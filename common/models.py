import datetime
import os
from django.contrib.auth.base_user import BaseUserManager, AbstractBaseUser
from django.db import models
from django.db.models import Count, Sum, Min, Max
from django.contrib.auth.models import User
from django.urls import reverse
from common.sysutil  import *
from common.translation import  (VN_C, VN_T)
from common import commonutil
from common.submodels import (imp_models, ecomm_models)

class OratechUserManager(BaseUserManager):
    def create_user(self, user_name, user_full_name, email, password=None):
        """
        Creates and saves a User with the given email, date of
        birth and password.
        """
        if not email:
            raise ValueError('Users must have an email address')

        if not user_name:
            raise ValueError('Users Name is mandatory')

        user = self.model(
            email=self.normalize_email(email),
            user_name=user_name,
            user_full_name=user_full_name,
        )
        if not user.user_id:
            user.user_id = get_sequenceval('cmn_users_s.nextval')
        user.user_password = password
        user.update_source = 'RESETPASSWORD'
        user.set_password(password)
        user.is_staff = True
        user.active = 'Y'
        user.bu_id = 1
        user.save(using=self._db)
        return user

    def create_superuser(self, user_name, email, user_full_name, password=None):
        """
        Creates and saves a superuser with the given email, date of
        birth and password.
        """
        user = self.create_user(
            email = email,
            password=password,
            user_name=user_name,
            user_full_name = user_full_name
        )
        user.is_admin = True
        user.save(using=self._db)
        return user


class CmnUsers(AbstractBaseUser):
    user_id = models.BigIntegerField(blank=False, null=False, primary_key=True, editable=False)
    user_name = models.CharField(max_length=30, blank=False, null=False,unique=True)
    user_full_name = models.CharField(max_length=100, blank=True, null=True)
    user_group = models.CharField(max_length=30, blank=True, null=True)
    user_description = models.CharField(max_length=100, blank=True, null=True)
    email = models.EmailField(
        verbose_name='email address',
        max_length=255,
        unique=True,
    )
    is_active = models.BooleanField(default=True,choices=populatelistitem('TRUE_FALSE',None))
    is_admin = models.BooleanField(default=False, choices=populatelistitem('TRUE_FALSE',None))
    is_staff = models.BooleanField(default=True,choices=populatelistitem('TRUE_FALSE',None))
    deliverto_contact_id = models.IntegerField(blank=True, null=True)
    active = models.CharField(max_length=1, blank=True, null=True, default='Y',
                              choices=populatelistitem('YES_NO',None))
    start_date = models.DateTimeField(auto_now_add=True, blank=True, null=True)
    last_password_date = models.DateTimeField(auto_now_add=True, blank=True, null=True)
    last_login_date = models.DateTimeField(blank=True, null=True)
    password_expire_after = models.IntegerField(blank=True, null=True, default=60)
    employee_id = models.IntegerField(blank=True, null=True)
    location_id = models.IntegerField(blank=True, null=True)
    customer_id = models.IntegerField(blank=True, null=True)
    end_date = models.DateTimeField(blank=True, null=True)
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False)
    record_status = models.CharField(max_length=1, blank=True, null=True)
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False)
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False)
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True)
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False)
    bu_id = models.IntegerField(blank=True, null=True, editable=False)
    supplier_id = models.IntegerField(blank=True, null=True)
    created_by = models.IntegerField(blank=True, null=True, editable=False)
    auto_exit_type = models.CharField(max_length=30, blank=True, null=True)
    function_id = models.IntegerField(blank=True, null=True)
    multi_location = models.CharField(max_length=1, blank=True, null=True, default='N')
    user_password = models.CharField(max_length=50, blank=False, null=False, editable=True)
    invoiceto_customer_id = models.IntegerField(blank=True, null=True)
    deliverto_customer_id = models.IntegerField(blank=True, null=True)
    invoiceto_contact_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cmn_users'
        verbose_name_plural = 'Users'
        verbose_name = verbose_name_plural

    USERNAME_FIELD = 'user_name'
    REQUIRED_FIELDS = ['email', 'user_full_name']

    objects = OratechUserManager()

    def __str__(self):
        return self.user_name

    def has_perm(self, perm, obj=None):
        "Does the user have a specific permission?"
        # Simplest possible answer: Yes, always
        return True

    def has_module_perms(self, app_label):
        "Does the user have permissions to view the app `app_label`?"
        # Simplest possible answer: Yes, always
        return True

    def save(self, *args, **kwargs):
        print('userpassword',kwargs)
        super().save(*args, **kwargs)
        self.update_source = 'DONOTRESET'
        print('userpassword',self.user_password, self.update_source)

    def fieldlist():
        return  ['user_name', 'user_full_name', 'user_description', 'email', 'user_group','is_admin', 'active']

    def get_absolute_url(self):
        return reverse('common:listusers')

    def get_responsibilities(self, userid):
        if not userid:
            return 'no user'
        print('user:'+str(userid))
        sql = """ SELECT distinct resp_id,resp_name,resp_description 
                 FROM   cmn_responsibilities_va
                WHERE   RESP_ID IN  ( SELECT cr_resp_id
                                   FROM cmn_user_responsibilities
                                   WHERE cu_user_id = {0})
                AND upper(resp_name) not like '1MOBILE%'""".format(userid)

        print('user:'+str(userid))
        print(sql)
        with connection.cursor() as cursor:
            cursor.execute(sql)
            rows = dictfetchall(cursor)
            print(rows)
            return rows

    def get_respmenu(self, userid):
        resptext = ''
        if not userid:
            return 'no user'
        print('user:'+str(userid))
        sql = """ SELECT  resp_description, resp_id
                 FROM   cmn_responsibilities_va
                WHERE   RESP_ID IN  ( SELECT cr_resp_id
                                   FROM cmn_user_responsibilities
                                   WHERE cu_user_id = {0})
                AND upper(resp_name) not like '1MOBILE%'""".format(userid)

        with connection.cursor() as cursor:
            cursor.execute(sql)
            rows = cursor.fetchall()
            for resp in rows:
                resptext += '<div class="nav-item dropdown"> \
                <a href="#" class="nav-link dropdown-toggle font-weight-bold" data-toggle="dropdown">'+resp[0]+'</a>\n<div class="dropdown-menu"> '
                with connection.cursor() as funccursor:
                    funccursor.execute("""
                      Select  distinct Function_ID, 
                      replace(initcap(user_menu_desc),'M.') user_menu_desc,
                      replace(lower(func_description),' ') func_description
                        From Cmn_Resp_Functions_V
                                where Function_Id not in 
                                            (Select ex.Function_Id
                                           from Cmn_User_Exclusions ex 
                                             Where ex.User_ID = {0} 
                                             and ex.Function_ID is not null) 
                                             and func_description is not null
                                             And cr_Resp_Id = {1}
                                            order by 2""".format(userid,resp[1]))
                    functions = funccursor.fetchall()
                    for function in functions:
                        resptext += '\
                        <a  href = "'+function[2]+'" class ="dropdown-item font-weight-bold" >'+ function[1]+'</a>\n'
                resptext += '</div>\n </div>'
            return resptext


class CmnAdditionalInfo(models.Model):
    date_active_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_to'))
    date_active_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_from'))
    info_attribute6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute6'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    info_position = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('info_position'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    info_attribute5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute5'))
    info_attribute4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute4'))
    info_attribute3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute3'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    info_attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute2'))
    info_attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('info_attribute1'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    info_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('info_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_additional_info'
        verbose_name = verbose_name_plural = VN_T('cmn_additional_info')

    def __str__(self):
        return str(self.info_id)


class CmnAlerts(models.Model):
    alert_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('alert_method_code'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    alert_event = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('alert_event'))
    alt_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('alt_source_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    alert_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('alert_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_alerts'
        verbose_name = verbose_name_plural = VN_T('cmn_alerts')

    def __str__(self):
        return str(self.alert_id)


class CmnAuditLogins(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    multi_user = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('multi_user'))
    terminal_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('terminal_name'))
    comments = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('comments'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    what = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('what'))
    end_datetime = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_datetime'))
    start_datetime = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_datetime'))
    login_name = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('login_name'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    id = models.BigIntegerField(blank=False, null=False, verbose_name=VN_C('id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_audit_logins'
        verbose_name = verbose_name_plural = VN_T('cmn_audit_logins')

    def __str__(self):
        return str(self.id)


class CmnBankStatements(models.Model):
    reference_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('reference_id'))
    cust_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cust_id'))
    sup_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sup_id'))
    cheque_no = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('cheque_no'))
    stmnt_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stmnt_id'))
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    stmnt_line_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('stmnt_line_balance'))
    credit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('credit_amount'))
    debit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('debit_amount'))
    stmnt_rec_from = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('stmnt_rec_from'))
    stmnt_paid_to = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('stmnt_paid_to'))
    stmnt_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('stmnt_desc'))
    stmnt_year = models.IntegerField(blank=True, null=True, verbose_name=VN_C('stmnt_year'))
    stmnt_month = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('stmnt_month'))
    stmnt_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('stmnt_date'))
    bank_account_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_account_id'))
    bank_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cbs_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cbs_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_bank_statements'
        verbose_name = verbose_name_plural = VN_T('cmn_bank_statements')

    def __str__(self):
        return str(self.cbs_id)


class CmnBusinessSectors(models.Model):
    sector_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('sector_desc'))
    sector_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sector_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cbs1_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cbs1_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_business_sectors'
        verbose_name = verbose_name_plural = VN_T('cmn_business_sectors')

    def __str__(self):
        return str(self.cbs1_id)

    def save(self, *args, **kwargs):
        if not commonutil.hasintvalue(self.cbs1_id):
            self.cbs1_id = get_sequenceval('cmn_business_sectors_s.nextval')
            print('gen cbs1id',self.cbs1_id)
        super().save(*args, **kwargs)

class CmnCalendar(models.Model):
    month = models.IntegerField(blank=True, null=True, verbose_name=VN_C('month'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cc_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cc_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_calendar'
        verbose_name = verbose_name_plural = VN_T('cmn_calendar')

    def __str__(self):
        return str(self.cc_id)


class CmnCards(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    card_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_category_code'))
    card_pin = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_pin'))
    valid_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('valid_to'))
    valid_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('valid_from'))
    issued_on = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('issued_on'))
    askfor_pin = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('askfor_pin'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    card_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('card_id'), primary_key=True)
    card_name = models.CharField(max_length=50, blank=True, null=True
        , verbose_name=VN_C('card_name'))
    card_number = models.CharField(max_length=50, blank=True, null=True
        , verbose_name=VN_C('card_number'))
    card_type = models.CharField(max_length=50, blank=True, null=True, default='LOYALTY'
        , verbose_name=VN_C('card_type'))

    class Meta:
        managed = False
        db_table = 'cmn_cards'
        verbose_name = verbose_name_plural = VN_T('cmn_cards')
        unique_together = ('card_number',)

    def __str__(self):
        return str(self.card_id)

class CmnCardAssignments(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I'
        , editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, default=1
        , editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API'
        , editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, default=-1
        , editable=False, verbose_name=VN_C('created_by'))
    last_updated_by = models.IntegerField(blank=True, null=True, default=-1
        , editable=False, verbose_name=VN_C('last_updated_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N'
        , editable=False, verbose_name=VN_C('delete_flag'))
    third_party_source = models.CharField(max_length=30, blank=True, null=True, default='THIS'
        , verbose_name=VN_C('third_party_source'))
    third_party_source_ref = models.CharField(max_length=50, blank=True, null=True, default=-1
        , verbose_name=VN_C('third_party_source_ref'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    assignment_id = models.BigAutoField(blank=False, null=False, editable=False, verbose_name=VN_C('assignment_id'), primary_key=True)
    card_id = models.ForeignKey(CmnCards, models.DO_NOTHING, blank=True, null=True, to_field='card_id', db_column='card_id')
    card_number = models.CharField(max_length=30, blank=False, null=False
        , verbose_name=VN_C('card_number'))
    assigned_category = models.CharField(max_length=30, blank=True, null=True, default='CUSTOMER'
        , verbose_name=VN_C('third_party_source_ref'))
    assigned_to_id = models.BigIntegerField(blank=False, null=False
        , verbose_name=VN_C('assigned_to_id'))

    class Meta:
        managed = False
        db_table = 'cmn_card_assignments'
        verbose_name=VN_T('cmn_card_assignments')
        unique_together = (('card_number'),)

    def __str__(self):
        return str(self.assignment_id)


class CmnCardTrans(models.Model):
    trans_source_link = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('trans_source_link'))
    trans_ref_details = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('trans_ref_details'))
    trans_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_amount'))
    trans_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('trans_points'))
    attribute1 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute3 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute4 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute5 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute6 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute6'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I'
        , editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, default=1
        , editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API'
        , editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, default=-1
        , editable=False, verbose_name=VN_C('created_by'))
    last_updated_by = models.IntegerField(blank=True, null=True, default=-1
        , editable=False, verbose_name=VN_C('last_updated_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N'
        , editable=False, verbose_name=VN_C('delete_flag'))
    third_party_source = models.CharField(max_length=30, blank=True, null=True, default='THIS'
        , verbose_name=VN_C('third_party_source'))
    third_party_source_ref = models.CharField(max_length=50, blank=True, null=True, default=-1
        , verbose_name=VN_C('third_party_source_ref'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    trans_id = models.BigAutoField(blank=False, null=False, editable=False, verbose_name=VN_C('trans_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_card_trans'
        verbose_name=VN_T('cmn_card_trans')

    def __str__(self):
        return str(self.trans_id)

class CmnLoyaltySummary(models.Model):
    total_amount = models.DecimalField(max_digits=20, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_amount'))
    total_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_points'))
    total_refund_amount = models.DecimalField(max_digits=20, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_refund_amount'))
    total_refund_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_refund_points'))
    total_redeemed_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_redeemed_points'))
    total_outstanding_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_outstanding_points'))
    total_voucher_points = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_voucher_points'))
    total_voucher_rdeemed = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('total_voucher_rdeemed'))
    attribute1 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute3 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute4 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute5 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute6 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('attribute6'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I'
    , editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, default=1
    , editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API'
    , editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, default=-1
    , editable=False, verbose_name=VN_C('created_by'))
    last_updated_by = models.IntegerField(blank=True, null=True, default=-1
    , editable=False, verbose_name=VN_C('last_updated_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N'
    , editable=False, verbose_name=VN_C('delete_flag'))
    third_party_source = models.CharField(max_length=30, blank=True, null=True, default='THIS'
    , verbose_name=VN_C('third_party_source'))
    third_party_source_ref = models.CharField(max_length=50, blank=True, null=True, default=-1
    , verbose_name=VN_C('third_party_source_ref'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    summary_id = models.BigAutoField(blank=False, null=False, editable=False, verbose_name=VN_C('summary_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_loyalty_summary'
        verbose_name=VN_T('cmn_loyalty_summary')

    def __str__(self):
        return str(self.summary_id)

class CmnCardOptions(models.Model):
    askfor_pin = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('askfor_pin'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('identifier'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    card_options_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('card_options_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_card_options'
        verbose_name = verbose_name_plural = VN_T('cmn_card_options')

    def __str__(self):
        return str(self.card_options_id)
        # unique_together = (('card_prefix_code'),('card_category_code'),)


class CmnClockinout(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    employee_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('employee_name'))
    employee_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('employee_id'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    customer_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('customer_name'))
    user_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_name'))
    card_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_number'))
    clockinout_source = models.CharField(max_length=30, blank=True, null=True, default='USER', verbose_name=VN_C('clockinout_source'))
    clockinout_category_code = models.CharField(max_length=30, blank=True, null=True, default='USER', verbose_name=VN_C('clockinout_category_code'))
    location_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('location_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    clockout_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('clockout_date'))
    clockin_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('clockin_date'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    clockinout_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('clockinout_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_clockinout'
        verbose_name = verbose_name_plural = VN_T('cmn_clockinout')

    def __str__(self):
        return str(self.clockinout_id)


class CmnCommodityCodes(models.Model):
    commodity_code = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('commodity_codes'))
    chapter = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('chapter'))
    section = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('section'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    footnote = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('footnote'))
    legal_act = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('legal_act'))
    exclusions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('exclusions'))
    conditions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('conditions'))
    measure_type = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('measure_type'))
    additional_codes = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('additional_codes'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('name'))
    heading = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('heading'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    ccc_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('ccc_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_commodity_codes'
        verbose_name = verbose_name_plural = VN_T('cmn_commodity_codes')

    def __str__(self):
        return self.commodity_code


class CmnCommunications(models.Model):
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    communication_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('communication_category_code'))
    alt_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('alt_source_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    communication_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('communication_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_communications'
        verbose_name = verbose_name_plural = VN_T('cmn_communications')

    def __str__(self):
        return str(self.communication_id)


class CmnContacts(models.Model):
    phone_home = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_home'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('identifier'))
    include_in_mailshot = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('include_in_mailshot'))
    contact_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('contact_method_code'))
    name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('name'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    fax_others = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('fax_others'))
    fax_business = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('fax_business'))
    phone_others = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('phone_others'))
    phone_mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_mobile'))
    phone_business = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_business'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    contact_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('contact_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_contacts'
        verbose_name = verbose_name_plural = VN_T('cmn_contacts')

    def __str__(self):
        return self.name


class CmnContactPermissions(models.Model):
    permission_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('permission_source'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    subscription_notes = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('subscription_notes'))
    subscribed_by = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('subscribed_by'))
    subscription_method = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subscription_method'))
    subscription_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('subscription_date'))
    subscription_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subscription_type'))
    contact_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('contact_method_code'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    permission_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('permission_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_contact_permissions'
        verbose_name = verbose_name_plural = VN_T('cmn_contact_permissions')

    def __str__(self):
        return str(self.permission_id)


class CmnBanks(models.Model):
    bank_name = models.CharField(max_length=50, blank=False, null=False,unique=True, verbose_name=VN_C('bank_name'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    credit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('credit_amount'))
    debit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('debit_amount'))
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    bank_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('bank_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_banks'
        verbose_name = verbose_name_plural = VN_T('cmn_banks')

    def __str__(self):
        return self.bank_id


class CmnContainers(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    pc_max_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_max_volume'))
    pc_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_volume'))
    pc_width = models.DecimalField(max_digits=8, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_width'))
    pc_height = models.DecimalField(max_digits=8, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_height'))
    pc_length = models.DecimalField(max_digits=8, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_length'))
    pc_max_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_max_weight'))
    pc_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_weight'))
    container_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('container_type'))
    pc_pack_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_pack_size'))
    pc_pallet_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_pallet_qty'))
    pc_length_mm = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_length_mm'))
    pc_height_mm = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_height_mm'))
    pc_width_mm = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_width_mm'))
    pc_length_inches = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_length_inches'))
    pc_height_inches = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_height_inches'))
    pc_width_inches = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pc_width_inches'))
    pc_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('pc_code'))
    noof_entry_ways = models.IntegerField(blank=True, null=True, verbose_name=VN_C('noof_entry_ways'))
    dynamic_load_kg = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('dynamic_load_kg'))
    tare_kg = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tare_kg'))
    static_load_kg = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('static_load_kg'))
    container_recycle_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('container_recycle_code'))
    container_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('container_category'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pc_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pc_id'), primary_key=True)
    pc_name = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('pc_name'))
    pc_default_type = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('pc_default_type'))

    class Meta:
        managed = False
        db_table = 'cmn_containers'
        verbose_name = verbose_name_plural = VN_T('cmn_containers')

    def __str__(self):
        return self.pc_name
        # unique_together = (('pc_name'),('pc_default_type'),)



class CmnImportBatch(models.Model):
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    system_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status_code'))
    system_status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('system_status_text'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phase_code'))
    import_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('import_status'))
    import_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('import_date'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    lines_ok = models.IntegerField(blank=True, null=True, verbose_name=VN_C('lines_ok'))
    lines_rejected = models.IntegerField(blank=True, null=True, verbose_name=VN_C('lines_rejected'))
    total_lines = models.IntegerField(blank=True, null=True, verbose_name=VN_C('total_lines'))
    user_status_text = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('user_status_text'))
    user_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_status'))
    import_template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('import_template_name'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_import_batch'
        verbose_name = verbose_name_plural = VN_T('cmn_import_batch')

    def __str__(self):
        return str(self.BATCH_ID)


class CmnLookupTypes(models.Model):
    security_level = models.CharField(max_length=10, blank=True, null=True,
                                     choices=populatelistitem('SECURITY_LEVEL',None),
                                      verbose_name=VN_C('security_level'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    lookup_module = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem('MODULES',None),
                                     verbose_name=VN_C('lookup_module'))
    lookup_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('lookup_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    lookup_type = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('lookup_type'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_lookup_types'
        verbose_name = verbose_name_plural = VN_T('cmn_lookup_types')

    def __str__(self):
        return self.lookup_type

    def fieldlist():
        return  ['lookup_type','lookup_module','security_level','lookup_desc']

class CmnLookupCodes(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    lookup_default = models.CharField(max_length=1, blank=True, null=True, default='N',
                                      verbose_name=VN_C('lookup_default'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    security_level = models.CharField(max_length=10, blank=True, null=True,
                                      choices=populatelistitem('SECURITY_LEVEL', None),
                                      verbose_name=VN_C('security_level'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                        choices=populatelistitem(None, GL_ACCOUNT_CODES_l),
                                        verbose_name=VN_C('gl_account_id'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    lookup_meaning = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('lookup_meaning'))
    attribute12 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute12'))
    attribute11 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute11'))
    attribute10 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute10'))
    attribute9 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute9'))
    attribute8 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute8'))
    attribute7 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute7'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    lookup_code = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('lookup_code'), primary_key=True)
    clt_lookup_type = models.ForeignKey(CmnLookupTypes, models.DO_NOTHING, blank=True,
                                    null=True, to_field='lookup_type', db_column='clt_lookup_type')

    class Meta:
        managed = False
        db_table = 'cmn_lookup_codes'
        verbose_name = verbose_name_plural = VN_T('cmn_lookup_codes')
        unique_together = (('clt_lookup_type', 'lookup_code'),)

    def __str__(self):
        return self.clt_lookup_type.lookup_type  +':'+ self.lookup_code

    def fieldlist():
        return ['clt_lookup_type', 'lookup_code', 'lookup_meaning','lookup_default','sl_no',
            'security_level','attribute1','attribute2','attribute3','start_date','end_date',
            'description', 'attribute4','attribute5','attribute6']


class CmnMailmergeHeaders(models.Model):
    table_view_name = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('table_view_name'))
    description = models.CharField(max_length=240, blank=False, null=False, verbose_name=VN_C('description'))
    identifier = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('identifier'))
    active = models.CharField(max_length=1, blank=False, null=False, default='Y',
                              choices=populatelistitem('YES_NO'),
                              verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    merge_type = models.CharField(max_length=30, blank=False, null=False, default='HTML',
                                  choices=populatelistitem('MERGE_TYPE', p_addblank=False),
                                  verbose_name=VN_C('merge_type'))
    merge_owner = models.CharField(max_length=30, blank=True, null=True, default='SYSTEM',
                                  choices=populatelistitem('RECORD_OWNER', p_addblank=False),
                                   verbose_name=VN_C('merge_owner'))
    barcode_text = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('barcode_text'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    sl_no = models.IntegerField(blank=False, null=False, verbose_name=VN_C('sl_no'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    report_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('report_id'))
    printer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('printer_id'))
    print_header_image = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('print_header_image'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    merge_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('merge_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_mailmerge_headers'
        verbose_name = verbose_name_plural = VN_T('cmn_mailmerge_headers')

    def __str__(self):
        return str(self.merge_header_id)

    def clean(self):
        if not commonutil.hasintvalue(self.merge_header_id):
            self.merge_header_id = get_sequenceval("{}_s.nextval".format(self._meta.db_table))


class CmnMailmergeLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'),
                              verbose_name=VN_C('active'))
    line_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('line_text'))
    identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('identifier'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    sl_no = models.IntegerField(blank=False, null=False, editable=True, verbose_name=VN_C('sl_no'))
    line_type = models.CharField(max_length=30, blank=True, null=True, default='HTML', verbose_name=VN_C('line_type'))
    variable = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('variable'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    # tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    merge_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('merge_line_id'),
                                           primary_key=True)
    merge_header_id = models.ForeignKey(CmnMailmergeHeaders, models.DO_NOTHING, blank=True,
                                        null=True, to_field='merge_header_id', db_column='merge_header_id')

    class Meta:
        managed = False
        db_table = 'cmn_mailmerge_lines'
        verbose_name = verbose_name_plural = VN_T('cmn_mailmerge_lines')

    def __str__(self):
        return str(self.merge_line_id)

    def clean(self):
        if not commonutil.hasintvalue(self.merge_line_id):
            self.merge_line_id = get_sequenceval("{}_s.nextval".format(self._meta.db_table))


class CmnMenus(models.Model):
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    menu_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('menu_id'), primary_key=True)
    menu_sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('menu_sl_no'))
    menu_name = models.CharField(max_length=40, blank=True, null=True, unique=True, verbose_name=VN_C('menu_name'))
    menu_description = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('menu_description'))
    menu_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('menu_type'))
    cf_function_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cf_function_id'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    parent_menu_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('parent_menu_id'))

    class Meta:
        managed = False
        db_table = 'cmn_menus'
        verbose_name = verbose_name_plural = VN_T('cmn_menus')

    def __str__(self):
        return "{} {} {}".format(self.menu_name, self.menu_description, self.menu_type)
        # unique_together = (('parent_menu_id','menu_name'),)




class CmnNavigations(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('name'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    to_function_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('to_function_id'))
    from_function_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('from_function_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    navigation_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('navigation_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_navigations'
        verbose_name = verbose_name_plural = VN_T('cmn_navigations')

    def __str__(self):
        return str(self.NAVIGATION_ID)


class CmnNotifications(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    notf_status = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('notf_status'))
    notf_out = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notf_out'))
    notf_in = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notf_in'))
    notf_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('notf_id'))
    login_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('login_name'))
    notf_subject = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('notf_subject'))
    notf_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('notf_type'))
    notf_readon = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('notf_readon'))
    notf_postedon = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('notf_postedon'))
    notf_read = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('notf_read'))
    notf_to_login = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('notf_to_login'))
    notf_from_login = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('notf_from_login'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)

    class Meta:
        managed = False
        db_table = 'cmn_notifications'
        verbose_name = verbose_name_plural = VN_T('cmn_notifications')

    def __str__(self):
        return str(self.NAVIGATION_ID)


class CmnObjectBatches(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    last_query_criteria = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('last_query_criteria'))
    access_level = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('access_level'))
    batch_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_category'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_object_batches'
        verbose_name = verbose_name_plural = VN_T('cmn_object_batches')

    def __str__(self):
        return str(self.BATCH_ID)
        # unique_together = (('source_object_name','name'),)


class CmnObjectStatuses(models.Model):
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    current_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('current_status'))
    old_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('old_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    status_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('status_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_object_statuses'
        verbose_name = verbose_name_plural = VN_T('cmn_object_statuses')

    def __str__(self):
        return str(self.STATUS_ID)
        # unique_together = (('source_object_name','source_object_id1','source_object_id2'),)


class CmnParameters(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    crated_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('crated_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    default_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('default_value'))
    default_value_type = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('default_value_type'))
    sql_query = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('sql_query'))
    datatype = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('datatype'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    prompt = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('prompt'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    parameter_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('parameter_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_parameters'
        verbose_name = verbose_name_plural = VN_T('cmn_parameters')

    def __str__(self):
        return str(self.PARAMETER_ID)


class CmnPaymentTerms(models.Model):
    terms_days = models.IntegerField(blank=True, null=True, verbose_name=VN_C('terms_days'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    terms_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('terms_type'))
    terms_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('terms_name'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cpt_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cpt_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_payment_terms'
        verbose_name = verbose_name_plural = VN_T('cmn_payment_terms')

    def __str__(self):
        return self.terms_name


class CmnPeriodHeaders(models.Model):
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    module_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('module_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    period_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('period_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_period_headers'
        verbose_name = verbose_name_plural = VN_T('cmn_period_headers')

    def __str__(self):
        return str(self.PERIOD_HEADER_ID)


class CmnPriceroundings(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    round_to = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('round_to'))
    to_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('to_price'))
    from_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('from_price'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    price_rounding_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('price_rounding_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_priceroundings'
        verbose_name = verbose_name_plural = VN_T('cmn_priceroundings')

    def __str__(self):
        return str(self.PRICE_ROUNDING_ID)


class CmnPrinters(models.Model):
    print_documents = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('print_documents'))
    ip_address = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ip_address'))
    print_port = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('print_port'))
    print_format = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('print_format'))
    print_style = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('print_style'))
    printer_copies = models.IntegerField(blank=True, null=True, verbose_name=VN_C('printer_copies'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    printer_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('printer_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_printers'
        verbose_name = verbose_name_plural = VN_T('cmn_printers')

    def __str__(self):
        return str(self.PRINTER_ID)


class CmnPrivileges(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    privilege_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('privilege_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_privileges'
        verbose_name = verbose_name_plural = VN_T('cmn_privileges')

    def __str__(self):
        return str(self.PRIVILEGE_ID)


class CmnProperties(models.Model):
    property_sql = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('property_sql'))
    property_data_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('property_data_type'))
    property_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('property_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    property_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('property_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_properties'
        verbose_name = verbose_name_plural = VN_T('cmn_properties')

    def __str__(self):
        return str(self.PROPERTY_ID)
        # unique_together = (('object_id','property_name'),)


class CmnPropertyObjects(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    object_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('object_description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    object_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('object_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_property_objects'
        verbose_name = verbose_name_plural = VN_T('cmn_property_objects')

    def __str__(self):
        return str(self.OBJECT_ID)
        # unique_together = (('object_name','object_value'),)


class CmnPropertyValues(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    property_value_type = models.CharField(max_length=30, blank=True, null=True, default='TEXT', verbose_name=VN_C('property_value_type'))
    property_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('property_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    property_value_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('property_value_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_property_values'
        verbose_name = verbose_name_plural = VN_T('cmn_property_values')

    def __str__(self):
        return str(self.PROPERTY_VALUE_ID)
        # unique_together = (('object_id','property_id','object_ref1','object_ref2','object_ref3'),)


class CmnReasons(models.Model):
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    reason_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('reason_desc'))
    reason_name = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('reason_name'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    reason_code_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('reason_code_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_reasons'
        verbose_name = verbose_name_plural = VN_T('cmn_reasons')

    def __str__(self):
        return str(self.REASON_CODE_ID)


class CmnReportgroupHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    report_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_category_code'))
    report_group_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_group_type'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    report_group_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('report_group_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_reportgroup_headers'
        verbose_name = verbose_name_plural = VN_T('cmn_reportgroup_headers')

    def __str__(self):
        return str(self.report_group_id)


class CmnReportoutputsSnap(models.Model):
    column17_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column17_value'))
    column16_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column16_value'))
    column15_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column15_value'))
    column14_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column14_value'))
    column13_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column13_value'))
    column21_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column21_value'))
    column20_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column20_value'))
    column19_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column19_value'))
    report_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_from'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    report_description = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('report_description'))
    report_identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_identifier'))
    snapshot_year = models.IntegerField(blank=True, null=True, verbose_name=VN_C('snapshot_year'))
    snapshot_month = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('snapshot_month'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    report_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_to'))
    sl_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sl_date_from'))
    column1_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column1_value'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    row_identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('row_identifier'))
    sl_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sl_date_to'))
    period_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_header_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    grand_total2 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('grand_total2'))
    grand_total1 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('grand_total1'))
    total4 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total4'))
    total3 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total3'))
    total2 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total2'))
    total1 = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total1'))
    column30_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column30_value'))
    column29_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column29_value'))
    column28_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column28_value'))
    column27_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column27_value'))
    column26_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column26_value'))
    column25_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column25_value'))
    column24_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column24_value'))
    column23_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column23_value'))
    column22_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column22_value'))
    column12_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column12_value'))
    column11_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column11_value'))
    column10_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column10_value'))
    column9_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column9_value'))
    column8_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column8_value'))
    column7_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column7_value'))
    column6_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column6_value'))
    column5_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column5_value'))
    column4_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column4_value'))
    column3_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column3_value'))
    column2_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column2_value'))
    column18_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('column18_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_reportoutputs_snap'
        verbose_name = verbose_name_plural = VN_T('cmn_reportoutputs_snap')

    def __str__(self):
        return str(self.SNAPSHOT_ID)


class CmnReports(models.Model):
    report_default_flag = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('report_default_flag'))
    report_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_category'))
    report_orderby = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('report_orderby'))
    report_groupby = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('report_groupby'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    crated_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('crated_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    report_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('report_type'))
    default_printer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('default_printer_id'))
    orientation = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orientation'))
    destype = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('destype'))
    desformat = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('desformat'))
    report_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_name'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    report_group = models.CharField(max_length=30, blank=True, null=True, default='SINGLE', verbose_name=VN_C('report_group'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    report_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('report_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_reports'
        verbose_name = verbose_name_plural = VN_T('cmn_reports')

    def __str__(self):
        return str(self.REPORT_ID)


class CmnReportColumns(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    report_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_type'))
    column30_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column30_title'))
    column29_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column29_title'))
    column28_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column28_title'))
    column27_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column27_title'))
    column26_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column26_title'))
    column25_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column25_title'))
    column24_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column24_title'))
    column23_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column23_title'))
    column22_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column22_title'))
    column21_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column21_title'))
    column20_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column20_title'))
    column19_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column19_title'))
    column18_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column18_title'))
    column17_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column17_title'))
    column16_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column16_title'))
    column15_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column15_title'))
    column14_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column14_title'))
    column13_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column13_title'))
    column12_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column12_title'))
    column11_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column11_title'))
    column10_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column10_title'))
    column9_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column9_title'))
    column8_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column8_title'))
    column7_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column7_title'))
    column6_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column6_title'))
    column5_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column5_title'))
    column4_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column4_title'))
    column3_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column3_title'))
    column2_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column2_title'))
    column1_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('column1_title'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    report_column_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('report_column_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_report_columns'
        verbose_name = verbose_name_plural = VN_T('cmn_report_columns')

    def __str__(self):
        return str(self.REPORT_COLUMN_ID)


class CmnReportConfig(models.Model):
    reportdesc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('reportdesc'))
    categoryname = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('categoryname'))
    reportmarketsector = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('reportmarketsector'))
    reporttype = models.CharField(max_length=20, blank=True, null=True, default='RELEASED', verbose_name=VN_C('reporttype'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    reportdateto = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('reportdateto'))
    reportdatefrom = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('reportdatefrom'))
    reportname = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('reportname'))
    defaultsetting = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('defaultsetting'))
    nooftimesused = models.IntegerField(blank=True, null=True, verbose_name=VN_C('nooftimesused'))
    hide = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('hide'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    crc_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('crc_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_report_config'
        verbose_name = verbose_name_plural = VN_T('cmn_report_config')

    def __str__(self):
        return str(self.CRC_ID)


class CmnResponsibilities(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    resp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('resp_id'), primary_key=True)
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    resp_name = models.CharField(max_length=50, blank=False, null=False, unique=True, verbose_name=VN_C('resp_name'))
    resp_description = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('resp_description'))
    resp_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('resp_category_code'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    end_date = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('end_date'))

    class Meta:
        managed = False
        db_table = 'cmn_responsibilities'
        verbose_name = verbose_name_plural = VN_T('cmn_responsibilities')

    def __str__(self):
        return "{} {}".format(self.resp_name, self.sl_no)


class CmnSeasons(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    season_comment = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('season_comment'))
    season_desc = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('season_desc'))
    selling_period_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('selling_period_to'))
    selling_period_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('selling_period_from'))
    buying_period_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('buying_period_to'))
    buying_period_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('buying_period_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    season_code_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('season_code_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_seasons'
        verbose_name = verbose_name_plural = VN_T('cmn_seasons')

    def __str__(self):
        return str(self.SEASON_CODE_ID)


class CmnSequences(models.Model):
    seq_comment = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('seq_comment'))
    suffix = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('suffix'))
    prefix = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('prefix'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    seq_increment = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('seq_increment'))
    seq_next_value = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('seq_next_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cs_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cs_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_sequences'
        verbose_name = verbose_name_plural = VN_T('cmn_sequences')

    def __str__(self):
        return str(self.CS_ID)
        # unique_together = (('bu_id','seq_name'),)


class CmnShifts(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    shift_description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('shift_description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    avg_hourly_cost = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('avg_hourly_cost'))
    noof_hours = models.DecimalField(max_digits=6, decimal_places=3,blank=True, null=True, verbose_name=VN_C('noof_hours'))
    shift_time_to = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shift_time_to'))
    shift_time_from = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shift_time_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    shift_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('shift_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_shifts'
        verbose_name = verbose_name_plural = VN_T('cmn_shifts')

    def __str__(self):
        return str(self.SHIFT_ID)


class CmnSysOptions(models.Model):
    consolidate_item_in_trans = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                            choices=populatelistitem('YES_NO',None),
                                                 verbose_name=VN_C('consolidate_item_in_trans'))
    smtp_from_address = models.CharField(max_length=256, blank=True, null=True, verbose_name=VN_C('smtp_from_address'))
    smtp_domain = models.CharField(max_length=256, blank=True, null=True, verbose_name=VN_C('smtp_domain'))
    casetype = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem('CASETYPE',None),
                                    verbose_name=VN_C('casetype'))
    report_server_url = models.CharField(max_length=300, blank=True, null=True, verbose_name=VN_C('report_server_url'))
    report_server_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('report_server_name'))
    picture_type = models.CharField(max_length=20, blank=True, null=True,
                                    choices=populatelistitem('', PICTURE_TYPES_l),
                                    verbose_name=VN_C('picture_type'))
    picture_path = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('picture_path'))
    application_directory = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('application_directory'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=True,
                                    choices=populatelistitem('', CMN_TAX_CODES_L),
                                      verbose_name=VN_C('tax_code_id'))
    country_code = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem('', CMN_COUNTRIES_L),
                                    verbose_name=VN_C('country_code'))
    currency_code = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem('', CMN_CURRENCIES_L),
                                     verbose_name=VN_C('currency_code'))
    financial_year_start_date = models.DateTimeField(blank=True, null=True,
                                                     verbose_name=VN_C('financial_year_start_date'))
    ver_no = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('ver_no'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    helpexec = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('helpexec'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    helpfile = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('helpfile'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    period_header_id = models.IntegerField(blank=True, null=True, editable=False,
                                    choices=populatelistitem('', CMN_PERIOD_HEADERS_l),
                                           verbose_name=VN_C('period_header_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    company_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('company_id'))
    option_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('option_type'))
    instance_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('instance_name'))
    batch_format = models.CharField(max_length=30, blank=True, null=True,
                                    choices=populatelistitem('', CMN_LOOKUP_CODES_L,'BATCH_FORMAT'),
                                    verbose_name=VN_C('batch_format'))
    report_output_path = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('report_output_path'))
    report_execution_method = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('report_execution_method'))
    smtp_server_name = models.CharField(max_length=256, blank=True, null=True, verbose_name=VN_C('smtp_server_name'))
    company_logo = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('company_logo'))
    smtp_port = models.IntegerField(blank=True, null=True, verbose_name=VN_C('smtp_port'))
    menu_color_scheme = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('menu_color_scheme'))
    enable_emailing = models.CharField(max_length=10,blank=True, null=True,
                                            choices=populatelistitem('YES_NO',None),
                                       default='Y', verbose_name=VN_C('enable_emailing'))
    enable_notifications = models.CharField(max_length=1, blank=True, null=True, default='N',
                                            choices=populatelistitem('YES_NO',None),
                                            verbose_name=VN_C('enable_notifications'))
    sys_attribute3 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('sys_attribute3'))
    sys_attribute2 = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sys_attribute2'))
    sys_attribute1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sys_attribute1'))
    sys_attribute4 = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sys_attribute4'))
    sys_attribute5 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sys_attribute5'))
    dir_outbound = models.CharField(max_length=200, blank=True, null=True, default='DIR_OUTBOUND', verbose_name=VN_C('dir_outbound'))
    dir_inbound_backup = models.CharField(max_length=200, blank=True, null=True, default='DIR_INBOUND_BACKUP', verbose_name=VN_C('dir_inbound_backup'))
    dir_tmp = models.CharField(max_length=200, blank=True, null=True, default='DIR_TMP', verbose_name=VN_C('dir_tmp'))
    dir_inbound = models.CharField(max_length=200, blank=True, null=True, default='DIR_INBOUND', verbose_name=VN_C('dir_inbound'))
    dir_outbound_backup = models.CharField(max_length=200, blank=True, null=True, default='DIR_OUTBOUND_BACKUP', verbose_name=VN_C('dir_outbound_backup'))
    default_browser = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('default_browser'))
    back_office_url = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('back_office_url'))
    licence_type = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('licence_type'))
    business_type = models.CharField(max_length=30, blank=True, null=True,
                                            choices=populatelistitem('BUSINESS_TYPE',None),
                                     verbose_name=VN_C('business_type'))
    alternate_report_server = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('alternate_report_server'))
    remote_report_url = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('remote_report_url'))
    alternate_report_url = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('alternate_report_url'))
    install_type = models.CharField(max_length=30, blank=True, null=True, default='SINGLEBU', verbose_name=VN_C('install_type'))
    mobile_url_homepage = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('mobile_url_homepage'))
    mobile_url = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('mobile_url'))
    db_string = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('db_string'))
    external_mail_exe = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('external_mail_exe'))
    smtp_password = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('smtp_password'))
    smtp_user_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('smtp_user_name'))
    email_bcc = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email_bcc'))
    email_cc = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email_cc'))
    www_image_path = models.FilePathField(max_length=100, path=images_path, blank=True, null=True, verbose_name=VN_C('www_image_path'))
    database_version = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('database_version'))
    forms_version = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('forms_version'))
    enable_tparty_interface = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('enable_tparty_interface'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sys_options_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('sys_options_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_sys_options'
        verbose_name = verbose_name_plural = VN_T('cmn_sys_options')

    def __str__(self):
        return str(self.sys_options_id)

    def fieldlist():
        return ['consolidate_item_in_trans', 'smtp_from_address', 'smtp_domain', 'casetype', 'report_server_url',
         'report_server_name', 'picture_type', 'picture_path', 'application_directory',
         'country_code', 'currency_code', 'financial_year_start_date', 'ver_no', 'helpexec', 'helpfile',
         'option_type', 'instance_name',
         'batch_format', 'report_output_path', 'report_execution_method', 'smtp_server_name',
         'company_logo', 'smtp_port', 'menu_color_scheme', 'enable_emailing', 'enable_notifications',
         'sys_attribute3', 'sys_attribute2', 'sys_attribute1', 'sys_attribute4', 'sys_attribute5',
         'dir_outbound', 'dir_inbound_backup', 'dir_tmp', 'dir_inbound', 'dir_outbound_backup',
         'default_browser', 'back_office_url', 'licence_type', 'business_type', 'alternate_report_server',
         'remote_report_url', 'alternate_report_url', 'install_type', 'mobile_url_homepage', 'mobile_url',
         'db_string', 'external_mail_exe', 'smtp_password', 'smtp_user_name', 'email_bcc',
         'email_cc', 'www_image_path', 'database_version', 'forms_version', 'enable_tparty_interface']




class CmnTerminals(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    install_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('install_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    hard_disk_volumeno = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('hard_disk_volumeno'))
    application_directory = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('application_directory'))
    hardware_type = models.CharField(max_length=30, blank=True, null=True, default='PC', verbose_name=VN_C('hardware_type'))
    terminal_type = models.CharField(max_length=30, blank=True, null=True, default='FrontOffice', verbose_name=VN_C('terminal_type'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    print_flag = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('print_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    terminal_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('terminal_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_terminals'
        verbose_name = verbose_name_plural = VN_T('cmn_terminals')

    def __str__(self):
        return str(self.TERMINAL_ID)


class CmnTerms(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    usage = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('usage'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    tc_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('tc_text'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    tc_code_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('tc_code_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_terms'
        verbose_name = verbose_name_plural = VN_T('cmn_terms')

    def __str__(self):
        return str(self.tc_code_id)


class CmnUnitOfMeasurements(models.Model):
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    uom_long_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('uom_long_desc'))
    uom_short_desc = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('uom_short_desc'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    uom_printsmalllabel = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('uom_printsmalllabel'))
    uom_conv_sdesc = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('uom_conv_sdesc'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    uom_conversion_desc = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('uom_conversion_desc'))
    uom_conversion = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, verbose_name=VN_C('uom_conversion'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    uom_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('uom_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_unit_of_measurements'
        verbose_name = verbose_name_plural = VN_T('cmn_unit_of_measurements')

    def __str__(self):
        return str(self.uom_id)


class CmnUserTopFunctions(models.Model):
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    screen_number = models.IntegerField(blank=True, null=True, verbose_name=VN_C('screen_number'))
    nooftimesused = models.IntegerField(blank=True, null=True, verbose_name=VN_C('nooftimesused'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cutf_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cutf_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_user_top_functions'
        verbose_name = verbose_name_plural = VN_T('cmn_user_top_functions')

    def __str__(self):
        return str(self.cutf_id)


class GlCategories(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    gl_category_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('gl_category_name'))
    gl_qualifier_code1 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE1'),
                                          verbose_name=VN_C('gl_qualifier_code1'))
    gl_qualifier_code2 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE2'),
                                          verbose_name=VN_C('gl_qualifier_code2'))
    active = models.CharField(max_length=1, blank=True, null=True,
                              choices=populatelistitem('YES_NO',None),
                              verbose_name=VN_C('active'))
    gl_category_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('gl_category_desc'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    gl_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('gl_category_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'gl_categories'
        verbose_name = verbose_name_plural = VN_T('gl_categories')

    def __str__(self):
        return self.gl_category_name



class GlSubCategories(models.Model):
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    gc_gl_category_id = models.ForeignKey(GlCategories, models.DO_NOTHING, blank=True, null=True, to_field='gl_category_id', db_column='gc_gl_category_id')
    gl_sub_category_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('gl_sub_category_name'))
    gl_qualifier_code1 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE1'),
                                          verbose_name=VN_C('gl_qualifier_code1'))
    gl_qualifier_code2 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE2'),
                                          verbose_name=VN_C('gl_qualifier_code2'))
    active = models.CharField(max_length=1, blank=True, null=True,
                              choices=populatelistitem('YES_NO',None),
                              verbose_name=VN_C('active'))
    gl_sub_category_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('gl_sub_category_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    gl_sub_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('gl_sub_category_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'gl_sub_categories'
        verbose_name = verbose_name_plural = VN_T('gl_sub_categories')

    def __str__(self):
        return self.gl_sub_category_name


class GlAccountCodes(models.Model):
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    gc_gl_category_id = models.ForeignKey(GlCategories, models.DO_NOTHING, blank=True, null=True,
                                          to_field='gl_category_id', db_column='gc_gl_category_id')
    gsc_gl_sub_category_id = models.ForeignKey(GlSubCategories, models.DO_NOTHING, blank=True, null=True,
                                               to_field='gl_sub_category_id', db_column='gsc_gl_sub_category_id')
    gl_account_code = models.BigIntegerField( blank=False, null=False, unique=True, verbose_name=VN_C('gl_code_char'))
    gl_code_char = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('gl_code_char'))
    short_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('short_name'))
    gl_code_category = models.CharField(max_length=30, blank=True, null=True,
                            choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_CODE_CATEGORY'),
                                        verbose_name=VN_C('gl_code_category'))
    gl_qualifier_code1 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE1'),
                                          verbose_name=VN_C('gl_qualifier_code1'))
    gl_qualifier_code2 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'GL_QUALIFIER_CODE2'),
                                          verbose_name=VN_C('gl_qualifier_code2'))
    active = models.CharField(max_length=1, blank=True, null=True,
                              choices=populatelistitem('YES_NO',None),
                              verbose_name=VN_C('active'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    description = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('description'))
    attribute12 = models.CharField(max_length=2000, blank=True, null=True, editable=False, verbose_name=VN_C('attribute12'))
    attribute12_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute12_type'))
    attribute11 = models.CharField(max_length=2000, blank=True, null=True, editable=False, verbose_name=VN_C('attribute11'))
    attribute11_type = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('attribute11_type'))
    attribute10 = models.CharField(max_length=2000, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute10'))
    attribute10_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute10_type'))
    attribute9 = models.CharField(max_length=2000, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute9'))
    attribute9_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute9_type'))
    attribute8 = models.CharField(max_length=2000, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute8'))
    attribute8_type = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('attribute8_type'))
    attribute7 = models.CharField(max_length=2000, blank=True, null=True, editable=False, verbose_name=VN_C('attribute7'))
    attribute7_type = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('attribute7_type'))
    attribute6 = models.CharField(max_length=2000, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute6'))
    attribute6_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute6_type'))
    attribute5 = models.CharField(max_length=2000, blank=True, null=True,  editable=False, verbose_name=VN_C('attribute5'))
    attribute5_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute5_type'))
    attribute4 = models.CharField(max_length=2000, blank=True, null=True,  editable=False, verbose_name=VN_C('attribute4'))
    attribute4_type = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('attribute4_type'))
    attribute3 = models.CharField(max_length=2000, blank=True, null=True, editable=False, verbose_name=VN_C('attribute3'))
    attribute3_type = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('attribute3_type'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute2'))
    attribute2_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute2_type'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, editable=False, verbose_name=VN_C('attribute1'))
    attribute1_type = models.CharField(max_length=30, blank=True, null=True,  editable=False,verbose_name=VN_C('attribute1_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    gl_account_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('gl_account_id'), primary_key=True)
    orig_system_ref1 = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('orig_system_ref1'))
    orig_system_ref2 = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('orig_system_ref2'))

    class Meta:
        managed = False
        db_table = 'gl_account_codes'
        verbose_name = verbose_name_plural = VN_T('gl_account_codes')

    def __str__(self):
        return str(self.gl_account_code)
        #unique_together = (('orig_system_ref1','orig_system_ref2'),)

class GlJeHeaders(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    je_header_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('je_header_status_date'))
    je_header_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('je_header_status'))
    je_type = models.CharField(max_length=30, blank=True, null=True, default='JOURNAL', verbose_name=VN_C('je_type'))
    je_category = models.CharField(max_length=30, blank=True, null=True, default='JOURNAL', verbose_name=VN_C('je_category'))
    date_entered = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('date_entered'))
    je_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('je_decription'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    je_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('je_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'gl_je_headers'
        verbose_name = verbose_name_plural = VN_T('gl_je_headers')

    def __str__(self):
        return str(self.je_header_idD)


class GlTemplates(models.Model):
    template_category = models.CharField(max_length=30, blank=True, null=True, default='PL', verbose_name=VN_C('template_category'))
    template_type = models.CharField(max_length=30, blank=True, null=True, default='GENERAL', verbose_name=VN_C('template_type'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    reporting_period = models.CharField(max_length=30, blank=True, null=True, default='MONTHLY', verbose_name=VN_C('reporting_period'))
    template_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('template_description'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    active_flag = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    template_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('template_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'gl_templates'
        verbose_name = verbose_name_plural = VN_T('gl_templates')

    def __str__(self):
        return str(self.templated_id)


class GlTemplateTransHeaders(models.Model):
    template_category = models.CharField(max_length=30, blank=True, null=True, default='PL', verbose_name=VN_C('template_category'))
    template_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('template_description'))
    template_type = models.CharField(max_length=30, blank=True, null=True, default='GENERAL', verbose_name=VN_C('template_type'))
    reporting_period = models.CharField(max_length=30, blank=True, null=True, default='MONTHLY', verbose_name=VN_C('reporting_period'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    report_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_to'))
    report_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    template_trans_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('template_trans_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'gl_template_trans_headers'
        verbose_name = verbose_name_plural = VN_T('gl_template_trans_headers')

    def __str__(self):
        return str(self.template_trans_header_id)


class GlTransSum(models.Model):
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    trans_seq = models.IntegerField(blank=True, null=True, verbose_name=VN_C('trans_seq'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    payment_method = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('payment_method'))
    trans_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_source'))
    account_name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('account_name'))
    trans_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('trans_id'))
    additional_reference = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('additional_reference'))
    exchange_rate = models.IntegerField(blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    tax_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('tax_amount'))
    tax_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tax_code'))
    trans_value = models.IntegerField(blank=True, null=True, verbose_name=VN_C('trans_value'))
    trans_details = models.CharField(max_length=60, blank=True, null=True, verbose_name=VN_C('trans_details'))
    trans_reference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_reference'))
    report_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date'))
    department = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('department'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    gl_account_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    account_ref = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('account_ref'))
    trans_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_type'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    trans_target = models.CharField(max_length=30, blank=True, null=True, default='GL', verbose_name=VN_C('trans_target'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)

    class Meta:
        managed = False
        db_table = 'gl_trans_sum'
        verbose_name = verbose_name_plural = VN_T('gl_trans_sum')

    def __str__(self):
        return str(self.template_trans_header_id)


class GlTemplateLines(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    line_expression = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('line_expression'))
    line_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default='100', verbose_name=VN_C('line_value'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    plus_minus = models.CharField(max_length=1, blank=True, null=True, default='+', verbose_name=VN_C('plus_minus'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    line_description = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('line_description'))
    xref_gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('xref_gl_account_id'))
    line_expression_type = models.CharField(max_length=30, blank=True, null=True, default='SQL', verbose_name=VN_C('line_expression_type'))
    line_type = models.CharField(max_length=30, blank=True, null=True, default='DYNAMIC', verbose_name=VN_C('line_type'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    trans_source = models.CharField(max_length=30, blank=True, null=True, default='GL', verbose_name=VN_C('trans_source'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    active_flag = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    template_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('template_line_id'), primary_key=True)
    template_id = models.ForeignKey(GlTemplates, models.DO_NOTHING, blank=True, null=True, to_field='template_id', db_column='template_id')

    class Meta:
        managed = False
        db_table = 'gl_template_lines'
        verbose_name = verbose_name_plural = VN_T('gl_template_lines')

    def __str__(self):
        return str(self.template_line_id)


class GlTemplateTrans(models.Model):
    plus_minus = models.CharField(max_length=1, blank=True, null=True, default='+', verbose_name=VN_C('plus_minus'))
    gl_account_name = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('gl_account_name'))
    gl_account_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('template_name'))
    trans_source = models.CharField(max_length=30, blank=True, null=True, default='GL', verbose_name=VN_C('trans_source'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    report_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date'))
    gl_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gl_value'))
    xref_gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('xref_gl_account_id'))
    line_expression_type = models.CharField(max_length=30, blank=True, null=True, default='SQL', verbose_name=VN_C('line_expression_type'))
    line_expression = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('line_expression'))
    line_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default='100', verbose_name=VN_C('line_value'))
    line_type = models.CharField(max_length=30, blank=True, null=True, default='DYNAMIC', verbose_name=VN_C('line_type'))
    line_description = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('line_description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    template_trans_header_id = models.ForeignKey(GlTemplateTransHeaders, models.DO_NOTHING, blank=True, null=True, to_field='template_trans_header_id', db_column='template_trans_header_id')

    class Meta:
        managed = False
        db_table = 'gl_template_trans'
        verbose_name = verbose_name_plural = VN_T('gl_template_trans')

    def __str__(self):
        return str(self.template_trans_header_id)
        # unique_together = (('template_id','template_line_id','report_date_from','report_date_to'),)


class CmnPeriodLines(models.Model):
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    calendar_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('calendar_date_to'))
    calendar_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('calendar_date_from'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    period_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('period_status_date'))
    period_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('period_status'))
    actual_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('actual_date_to'))
    actual_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('actual_date_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    period_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('period_line_id'), primary_key=True)
    period_header_id = models.ForeignKey(CmnPeriodHeaders, models.DO_NOTHING, blank=True, null=True, to_field='period_header_id', db_column='period_header_id')

    class Meta:
        managed = False
        db_table = 'cmn_period_lines'
        verbose_name = verbose_name_plural = VN_T('cmn_period_lines')

    def __str__(self):
        return str(self.period_line_id)
        # unique_together = (('period_name'),('period_year','period_month','sl_no'),)


class CmnPeriodBreakdowns(models.Model):
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    breakdown_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('breakdown_status_date'))
    breakdown_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('breakdown_status'))
    actual_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('actual_date_to'))
    actual_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('actual_date_from'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    period_breakdown_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('period_breakdown_id'), primary_key=True)
    period_header_id = models.ForeignKey(CmnPeriodHeaders, models.DO_NOTHING, blank=True, null=True, to_field='period_header_id', db_column='period_header_id')
    period_line_id = models.ForeignKey(CmnPeriodLines, models.DO_NOTHING, blank=True, null=True, to_field='period_line_id', db_column='period_line_id')

    class Meta:
        managed = False
        db_table = 'cmn_period_breakdowns'
        verbose_name = verbose_name_plural = VN_T('cmn_period_breakdowns')

    def __str__(self):
        return str(self.period_breakdown_id)
        # unique_together = (('cmnperiodheaders','cmnperiodlines','sub_ledger_code','period_breakdown_category'),)



class CmnModules(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    crated_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('crated_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    module_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('module_id'), primary_key=True)
    sl_no = models.IntegerField(blank=True, null=True, default=999, verbose_name=VN_C('sl_no'))
    module_name = models.CharField(max_length=50, blank=True, unique=True, null=True, verbose_name=VN_C('module_name'))
    module_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('module_desc'))

    class Meta:
        managed = False
        db_table = 'cmn_modules'
        verbose_name = verbose_name_plural = VN_T('cmn_modules')

    def __str__(self):
        return "{} : {} : {}".format(self.module_name,self.module_desc, self.sl_no)

class CmnFunctions(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cml_module_id = models.ForeignKey(CmnModules, models.DO_NOTHING, blank=True, null=True, to_field='module_id', db_column='cml_module_id')
    function_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('function_id'), primary_key=True)
    func_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('func_name'))
    func_short_name = models.CharField(max_length=50, blank=False, null=False, unique=True, verbose_name=VN_C('func_short_name'))
    func_disp_name = models.CharField(max_length=50, blank=False, null=False, unique=True, verbose_name=VN_C('func_disp_name'))
    func_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('func_type'))
    func_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('func_description'))
    run_type = models.CharField(max_length=30, blank=True, null=True, default='OPEN', verbose_name=VN_C('run_type'))
    run_mode = models.CharField(max_length=30, blank=True, null=True, default='SYSTEM', verbose_name=VN_C('run_mode'))
    func_path = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('func_path'))
    func_parameter = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('func_parameter'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))


    class Meta:
        managed = False
        db_table = 'cmn_functions'
        verbose_name = verbose_name_plural = VN_T('Functions')

    def __str__(self):
        return "{} : {} : {}".format(self.cml_module_id,self.func_disp_name, self.func_path)
        # unique_together = (('func_disp_name'),('func_short_name'),)


class CmnProfiles(models.Model):
    default_value_type = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('default_value_type'))
    sql_query = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('sql_query'))
    datatype = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('datatype'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    prompt = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('prompt'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    default_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('default_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    profile_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('profile_id'), primary_key=True)
    module_id = models.ForeignKey(CmnModules, models.DO_NOTHING, blank=True, null=True, to_field='module_id', db_column='module_id')

    class Meta:
        managed = False
        db_table = 'cmn_profiles'
        verbose_name = verbose_name_plural = VN_T('cmn_profiles')

    def __str__(self):
        return str(self.profile_id)


class CmnProfileValues(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    profile_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('profile_value'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    responsibility_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('responsibility_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    comp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('comp_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    profile_value_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('profile_value_id'), primary_key=True)
    profile_id = models.ForeignKey(CmnProfiles, models.DO_NOTHING, blank=True, null=True, to_field='profile_id', db_column='profile_id')

    class Meta:
        managed = False
        db_table = 'cmn_profile_values'
        verbose_name = verbose_name_plural = VN_T('cmn_profile_values')

    def __str__(self):
        return str(self.profile_value_id)


class CmnUserExclusions(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    exclusion_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('exclusion_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    exclusion_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('exclusion_id'), primary_key=True)
    user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='user_id')
    function_id = models.ForeignKey(CmnFunctions, models.DO_NOTHING, blank=True, null=True, to_field='function_id', db_column='function_id')
    report_id = models.ForeignKey(CmnReports, models.DO_NOTHING, blank=True, null=True, to_field='report_id', db_column='report_id')

    class Meta:
        managed = False
        db_table = 'cmn_user_exclusions'
        verbose_name = verbose_name_plural = VN_T('cmn_user_exclusions')

    def __str__(self):
        return str(self.exclusion_id)
        # unique_together = (('cmnusers','cmnreports'),('cmnusers','cmnfunctions'),)


class CmnLanguages(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    language_code = models.CharField(max_length=10, blank=False, null=False, verbose_name=VN_C('language_code'), primary_key=True)
    language_name = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('language_name'))

    class Meta:
        managed = False
        db_table = 'cmn_languages'
        verbose_name = verbose_name_plural = VN_T('cmn_languages')

    def __str__(self):
        return self.language_name


class CmnCountries(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    country_region_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('country_region_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    country_code = models.CharField(max_length=10, blank=False, null=False, verbose_name=VN_C('country_code'), primary_key=True)
    country_name = models.CharField(max_length=50, blank=False, null=False, verbose_name=VN_C('country_name'),unique=True)
    language_code = models.ForeignKey(CmnLanguages, models.DO_NOTHING, blank=True, null=True, to_field='language_code', db_column='language_code')

    class Meta:
        managed = False
        db_table = 'cmn_countries'
        verbose_name = verbose_name_plural = VN_T('cmn_countries')

    def __str__(self):
        return self.country_name


class CmnCurrencies(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cur_triangular_code = models.CharField(max_length=5, blank=True, null=True, verbose_name=VN_C('cur_triangular_code'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    cur_symbol = models.CharField(max_length=5, blank=True, null=True, verbose_name=VN_C('cur_symbol'))
    currency_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('currency_name'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    cur_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('cur_desc'))
    cur_active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('cur_active'))
    cur_numeric = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('cur_numeric'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cur_country = models.CharField(max_length=100, blank=False, null=False,
                                   choices=populatelistitem(None,CMN_COUNTRIES_L),
                                   verbose_name=VN_C('cur_country'), primary_key=False)
    currency_code = models.CharField(max_length=20, blank=False, null=False, primary_key=True, verbose_name=VN_C('currency_code'))

    class Meta:
        managed = False
        db_table = 'cmn_currencies'
        verbose_name = verbose_name_plural = VN_T('cmn_currencies')

    def __str__(self):
        return "{}.{}".format(self.currency_name,self.cur_country)


class CmnCurrencyRates(models.Model):
    currency_rate_type = models.CharField(max_length=30, blank=True, null=True, default='ONEOFF',
                                          choices=populatelistitem('CURRENCY_RATE_TYPE',p_addblank=False),
                                          verbose_name=VN_C('currency_rate_type'))
    currency_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('currency_rate'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    crated_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('crated_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    sell_currency_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('sell_currency_rate'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    from_currency_code = models.CharField(max_length=10, blank=False, null=False,  primary_key=True, unique=True , verbose_name=VN_C('from_currency_code'))
    currency_rate_date = models.DateField( blank=False, null=False, editable=True, verbose_name=VN_C('currency_date'))
    to_currency_code = models.CharField(max_length=10, blank=False, null=False, unique=True, verbose_name=VN_C('to_currency_code'))

    class Meta:
        managed = False
        db_table = 'cmn_currency_rates'
        verbose_name = verbose_name_plural = VN_T('cmn_currency_rates')
        unique_together = (('from_currency_code','to_currency_code'))

    def __str__(self):
        return "{}:{}:{}".format(self.from_currency_code,self.currency_rate_date,self.to_currency_code)

class CmnCompanies(models.Model):
    gl_account_id = models.IntegerField(blank=True, null=True, editable=True,
                                        choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                        verbose_name=VN_C('gl_account_id'))
    orig_system_ref_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('orig_system_ref_desc'))
    orig_system_ref_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref_code'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    url = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('url'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    comp_fax = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('comp_fax'))
    comp_phone2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('comp_phone2'))
    comp_phone1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('comp_phone1'))
    comp_post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('comp_post_code'))
    comp_county = models.CharField(max_length=25, blank=True, null=True, verbose_name=VN_C('comp_county'))
    comp_city = models.CharField(max_length=25, blank=True, null=True, verbose_name=VN_C('comp_city'))
    comp_address_line1 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('comp_address_line1'))
    comp_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('comp_name'))
    comp_trading_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('comp_trading_name'))
    comp_vat_reg_no = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('comp_vat_reg_no'))
    comp_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('comp_email'))
    comp_slogan = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('comp_slogan'))
    comp_reg_no = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('comp_reg_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    comp_id = models.BigIntegerField(blank=False, null=False, default=0, editable=False, verbose_name=VN_C('comp_id'), primary_key=True)
    cc1_currency_code = models.CharField(max_length=20, blank=True, null=True,
                                         choices=populatelistitem(None, CMN_CURRENCIES_L),
                                         verbose_name=VN_C('currency_code'))
    cc1_cur_country = models.CharField(max_length=20, blank=True, null=True,editable=False,
                                       verbose_name=VN_C('country_code'))
    cco_country_code = models.ForeignKey(CmnCountries, models.DO_NOTHING, blank=True, null=True, to_field='country_code', db_column='cco_country_code')

    class Meta:
        managed = False
        db_table = 'cmn_companies'
        verbose_name = verbose_name_plural = VN_T('cmn_companies')

    def __str__(self):
        return self.comp_name


class CmnBusinessUnits(models.Model):
    eori_number = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('eori_number'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_inv_footer = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('bu_inv_footer'))
    bu_fax = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('bu_fax'))
    bu_post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('bu_post_code'))
    bu_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('bu_phone'))
    bu_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('bu_county'))
    bu_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('bu_city'))
    bu_address_line1 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('bu_address_line1'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=True,
                                        choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                        verbose_name=VN_C('gl_account_id'))
    orig_system_ref_num = models.IntegerField(blank=True, null=True, verbose_name=VN_C('orig_system_ref_num'))
    orig_system_ref_char = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref_char'))
    bu_short_name = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('bu_short_name'))
    bu_name = models.CharField(max_length=100, blank=True, null=True, unique=True, verbose_name=VN_C('bu_name'))
    url = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('url'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    bu_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('bu_id'), primary_key=True)
    cc1_currency_code = models.CharField(max_length=20, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_CURRENCIES_L),
                                         verbose_name=VN_C('currency_code'))
    cc1_cur_country = models.CharField(max_length=20, blank=True, null=True,editable=False,
                                         verbose_name=VN_C('country_code'))
    cco_country_code = models.ForeignKey(CmnCountries, models.DO_NOTHING, blank=True, null=True, to_field='country_code', db_column='cco_country_code')
    cc_comp_id = models.ForeignKey(CmnCompanies, models.DO_NOTHING, blank=True, null=True, to_field='comp_id', db_column='cc_comp_id')

    class Meta:
        managed = False
        db_table = 'cmn_business_units'
        verbose_name = verbose_name_plural = VN_T('cmn_business_units')

    def __str__(self):
        return self.bu_name


class CmnPaymentMethods(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    pmnt_code = models.CharField(max_length=5, blank=False, null=False, unique=True, verbose_name=VN_C('pmnt_code'))
    pmnt_method = models.CharField(max_length=50, blank=False, null=False, verbose_name=VN_C('pmnt_method'))
    gac_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, related_name='inglaccount',
                                          blank=True, null=True, to_field='gl_account_id', db_column='gac_gl_account_id')
    out_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, related_name='outglaccount',
                                          null=True, to_field='gl_account_id', db_column='out_gl_account_id')
    pmnt_min_amount = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_min_amount'))
    pmnt_max_amount = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_max_amount'))
    pmnt_type = models.CharField(max_length=30, blank=True, null=True, default='STANDARD',
                                 choices=populatelistitem('PMNT_TYPE'),
                                    verbose_name=VN_C('pmnt_type'))
    charge_type = models.CharField(max_length=30, blank=True, null=True,
                                 choices=populatelistitem('VALUE_PERCENTAGE'),
                                   verbose_name=VN_C('charge_type'))
    validation_criteria = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('validation_criteria'))
    charge_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('charge_value'))
    pay_in = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                 choices=populatelistitem('YES_NO'),
                              verbose_name=VN_C('pay_in'))
    pay_out = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                 choices=populatelistitem('YES_NO'),
                               verbose_name=VN_C('pay_out'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    cashback_allowed = models.CharField(max_length=1, blank=True, null=True, default='N',
                                 choices=populatelistitem('YES_NO'),
                               verbose_name=VN_C('cashback_allowed'))
    available_to_all = models.CharField(max_length=1, blank=True, null=True, default='N',
                                 choices=populatelistitem('YES_NO'),
                               verbose_name=VN_C('available_to_all'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pmnt_method_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pmnt_method_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'cmn_payment_methods'
        verbose_name = verbose_name_plural = VN_T('cmn_payment_methods')

    def __str__(self):
        return self.pmnt_method


class CmnTaxCodes(models.Model):
    tax_percent = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, default=100, verbose_name=VN_C('tax_percent'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    tax_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('tax_desc'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    tax_rate = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tax_rate'))
    tax_print_desc = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('tax_print_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    tax_code_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('tax_code_id'), primary_key=True)
    gac_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gac_gl_account_id')
    tax_code = models.CharField(max_length=10, blank=True, null=True, unique=True, verbose_name=VN_C('tax_code'))

    class Meta:
        managed = False
        db_table = 'cmn_tax_codes'
        verbose_name = verbose_name_plural = VN_T('cmn_tax_codes')

    def __str__(self):
        return str(self.tax_code_id)


class CmnCommodityRates(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    country_code = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem(None,CMN_COUNTRIES_L),
                                    verbose_name=VN_C('country_code'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    duty_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('duty_rate'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    ccr_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('commodity_rate_id'), primary_key=True)
    ccc_id = models.ForeignKey(CmnCommodityCodes, models.DO_NOTHING, blank=True, null=True,
                                          to_field='ccc_id', db_column='ccc_id',
                                          verbose_name=VN_C('commodity_code')
                               )

    class Meta:
        managed = False
        db_table = 'cmn_commodity_rates'
        verbose_name = verbose_name_plural = VN_T('cmn_commodity_rates')

    def __str__(self):
        return str(self.ccr_id)


class CmnGrantedPrivs(models.Model):
    granted = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('granted'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    responsibility_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('responsibility_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    comp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('comp_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    granted_priv_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('granted_priv_id'), primary_key=True)
    privilege_id = models.ForeignKey(CmnPrivileges, models.DO_NOTHING, blank=True, null=True, to_field='privilege_id', db_column='privilege_id')

    class Meta:
        managed = False
        db_table = 'cmn_granted_privs'
        verbose_name = verbose_name_plural = VN_T('cmn_granted_privs')

    def __str__(self):
        return str(self.granted_prov_id)


class CmnLanguageTexts(models.Model):
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    language_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('language_text'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    source_object_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('source_object_id'), primary_key=True)
    language_code = models.ForeignKey(CmnLanguages, models.DO_NOTHING, blank=True, null=True, to_field='language_code', db_column='language_code')

    class Meta:
        managed = False
        db_table = 'cmn_language_texts'
        verbose_name = verbose_name_plural = VN_T('cmn_language_texts')

    def __str__(self):
        return str(self.source_object_id)


class CmnLoggedinUsers(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    login_name = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('login_name'))
    terminal_type = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('terminal_type'))
    curr_status = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('curr_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    login_time = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('login_time'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cu_user_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cu_user_id'), primary_key=True)
    cu_user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='cu_user_id')

    class Meta:
        managed = False
        db_table = 'cmn_loggedin_users'
        verbose_name = verbose_name_plural = VN_T('cmn_loggedin_users')

    def __str__(self):
        return str(self.cu_user_id)


class CmnLookupLinks(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    link_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('link_code'))
    short_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('short_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cll_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cll_id'), primary_key=True)
    lookup_type = models.ForeignKey(CmnLookupTypes, models.DO_NOTHING, blank=True, null=True, to_field='lookup_type', db_column='lookup_type')
    lookup_code = models.ForeignKey(CmnLookupCodes, models.DO_NOTHING, blank=True, null=True, to_field='lookup_code', db_column='lookup_code')

    class Meta:
        managed = False
        db_table = 'cmn_lookup_links'
        verbose_name = verbose_name_plural = VN_T('cmn_lookup_links')

    def __str__(self):
        return str(self.cll_id)
        # unique_together = (('cmnlookupcodes','cmnlookupcodes','sl_no'),)



class CmnMenuResponsibilities(models.Model):
    menu_resp_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('menu_resp_desc'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    menu_resp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('menu_resp_id'), primary_key=True)
    cm_menu_id = models.ForeignKey(CmnMenus, models.DO_NOTHING, blank=True, null=True, to_field='menu_id', db_column='cm_menu_id')
    cr_resp_id = models.ForeignKey(CmnResponsibilities, models.DO_NOTHING, blank=True, null=True, to_field='resp_id', db_column='cr_resp_id')

    class Meta:
        managed = False
        db_table = 'cmn_menu_responsibilities'
        verbose_name = verbose_name_plural = VN_T('cmn_menu_responsibilities')

    def __str__(self):
        return str(self.menu_resp_id)


class CmnObjectBatchLines(models.Model):
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_line_id'), primary_key=True)
    batch_id = models.ForeignKey(CmnObjectBatches, models.DO_NOTHING, blank=True, null=True, to_field='batch_id', db_column='batch_id')

    class Meta:
        managed = False
        db_table = 'cmn_object_batch_lines'
        verbose_name = verbose_name_plural = VN_T('cmn_object_batch_lines')

    def __str__(self):
        return str(self.batch_line_id)
        # unique_together = (('source_object_name','source_object_id1','source_object_id2'),)


class CmnPaymenttermBreakups(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    cpb_name = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('cpb_name'))
    cpb_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cpb_type'))
    cpb_percent = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cpb_percent'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cpb_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cpb_id'), primary_key=True)
    cpt_cpt_id = models.ForeignKey(CmnPaymentTerms, models.DO_NOTHING, blank=True, null=True, to_field='cpt_id', db_column='cpt_cpt_id')

    class Meta:
        managed = False
        db_table = 'cmn_paymentterm_breakups'
        verbose_name = verbose_name_plural = VN_T('cmn_paymentterm_breakups')

    def __str__(self):
        return str(self.cpb_id)


class CmnReportgroupLines(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'),verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    report_group_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('report_group_line_id'), primary_key=True)
    report_group_id = models.ForeignKey(CmnReportgroupHeaders, models.DO_NOTHING, blank=True, null=True, to_field='report_group_id', db_column='report_group_id')
    report_id = models.ForeignKey(CmnReports, models.DO_NOTHING, blank=True, null=True, to_field='report_id', db_column='report_id')

    class Meta:
        managed = False
        db_table = 'cmn_reportgroup_lines'
        verbose_name = verbose_name_plural = VN_T('cmn_reportgroup_lines')

    def __str__(self):
        return str(self.report_group_line_id)
        # unique_together = (('cmnreports','sl_no'),)


class CmnReportParameters(models.Model):
    prompt = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('prompt'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    order_by = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('order_by'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    default_value = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('default_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    crp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('crp_id'), primary_key=True)
    cmp_parameter_id = models.ForeignKey(CmnParameters, models.DO_NOTHING, blank=True, null=True, to_field='parameter_id', db_column='cmp_parameter_id')
    cmrr_report_id = models.ForeignKey(CmnReports, models.DO_NOTHING, blank=True, null=True, to_field='report_id', db_column='cmrr_report_id')

    class Meta:
        managed = False
        db_table = 'cmn_report_parameters'
        verbose_name = verbose_name_plural = VN_T('cmn_report_parameters')

    def __str__(self):
        return str(self.crp_id)


class CmnReportSet(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'),verbose_name=VN_C('active'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    run_mode = models.CharField(max_length=30, blank=True, null=True, default='SERIAL', verbose_name=VN_C('run_mode'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    set_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('set_id'), primary_key=True)
    parent_report_id = models.ForeignKey(CmnReports, models.DO_NOTHING, related_name='parentreport',
                                         blank=True, null=True, to_field='report_id', db_column='parent_report_id')
    report_id = models.ForeignKey(CmnReports, models.DO_NOTHING, related_name = 'report',
                                  blank=True, null=True, to_field='report_id', db_column='report_id')

    class Meta:
        managed = False
        db_table = 'cmn_report_set'
        verbose_name = verbose_name_plural = VN_T('cmn_report_set')

    def __str__(self):
        return str(self.set_id)
        # unique_together = (('cmnreports','cmnreports'),)


class CmnTerminalProperties(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    property_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('property_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    terminal_property_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('terminal_property_id'), primary_key=True)
    terminal_id = models.ForeignKey(CmnTerminals, models.DO_NOTHING, blank=True, null=True, to_field='terminal_id', db_column='terminal_id')

    class Meta:
        managed = False
        db_table = 'cmn_terminal_properties'
        verbose_name = verbose_name_plural = VN_T('cmn_terminal_properties')

    def __str__(self):
        return str(self.terminal_property_id)
        # unique_together = (('cmnterminals','name'),)


class CmnUserReportgroups(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    user_reportgroup_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('user_reportgroup_id'), primary_key=True)
    report_group_id = models.ForeignKey(CmnReportgroupHeaders, models.DO_NOTHING, blank=True, null=True, to_field='report_group_id', db_column='report_group_id')
    user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='user_id')

    class Meta:
        managed = False
        db_table = 'cmn_user_reportgroups'
        verbose_name = verbose_name_plural = VN_T('cmn_user_reportgroups')

    def __str__(self):
        return str(self.user_reportgroup_id)


class CmnUserResponsibilities(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    cur_delete = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('cur_delete'))
    write = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('write'))
    read = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('read'))
    user_resp_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('user_resp_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    user_resp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('user_resp_id'), primary_key=True)
    cu_user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='cu_user_id')
    cr_resp_id = models.ForeignKey(CmnResponsibilities, models.DO_NOTHING, blank=True, null=True, to_field='resp_id', db_column='cr_resp_id')

    class Meta:
        managed = False
        db_table = 'cmn_user_responsibilities'
        verbose_name = verbose_name_plural = VN_T('cmn_user_responsibilities')

    def __str__(self):
        return str(self.user_resp_id)


class EmpDepartments(models.Model):
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    department_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('department_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    department_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('department_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'emp_departments'
        verbose_name = verbose_name_plural = VN_T('emp_departments')

    def __str__(self):
        return str(self.department_id)


class EmpJobs(models.Model):
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    job_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('job_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('job_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'emp_jobs'
        verbose_name = verbose_name_plural = VN_T('emp_jobs')

    def __str__(self):
        return str(self.job_id)


class EmpJobTypes(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    job_type_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('job_type_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_type_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('job_type_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'emp_job_types'
        verbose_name = verbose_name_plural = VN_T('emp_job_types')

    def __str__(self):
        return str(self.job_type_id)


class EmpPositions(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    position_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('position_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    position_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('position_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'emp_positions'
        verbose_name = verbose_name_plural = VN_T('emp_positions')

    def __str__(self):
        return str(self.position_id)


class EmpWorkingDays(models.Model):
    break_timefrom = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('break_timefrom'))
    working_hours = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, verbose_name=VN_C('working_hours'))
    working_timeto = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('working_timeto'))
    working_timefrom = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('working_timefrom'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    working_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('working_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    week_day = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('week_day'))
    break_hours = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, verbose_name=VN_C('break_hours'))
    break_timeto = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('break_timeto'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    working_day_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('working_day_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'emp_working_days'
        verbose_name = verbose_name_plural = VN_T('emp_working_days')

    def __str__(self):
        return str(self.working_day_id)


class CmnWdayShifts(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    wday_shift_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('wday_shift_id'), primary_key=True)
    working_day_id = models.ForeignKey(EmpWorkingDays, models.DO_NOTHING, blank=True, null=True, to_field='working_day_id', db_column='working_day_id')
    shift_id = models.ForeignKey(CmnShifts, models.DO_NOTHING, blank=True, null=True, to_field='shift_id', db_column='shift_id')

    class Meta:
        managed = False
        db_table = 'cmn_wday_shifts'
        verbose_name = verbose_name_plural = VN_T('cmn_wday_shifts')

    def __str__(self):
        return str(self.wday_shift_id)


class EmpEmployees(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('mobile'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('country_code'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('address'))
    payroll_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payroll_number'))
    sex = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('sex'))
    ni_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ni_number'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    job_end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('job_end_date'))
    job_start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('job_start_date'))
    date_of_birth = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_of_birth'))
    title = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('title'))
    middle_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('middle_name'))
    last_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('last_name'))
    first_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('first_name'))
    employee_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('employee_number'))
    full_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('full_name'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    employee_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('employee_id'), primary_key=True)
    job_type_id = models.ForeignKey(EmpJobTypes, models.DO_NOTHING, blank=True, null=True, to_field='job_type_id', db_column='job_type_id')
    department_id = models.ForeignKey(EmpDepartments, models.DO_NOTHING, blank=True, null=True, to_field='department_id', db_column='department_id')
    position_id = models.ForeignKey(EmpPositions, models.DO_NOTHING, blank=True, null=True, to_field='position_id', db_column='position_id')
    job_id = models.ForeignKey(EmpJobs, models.DO_NOTHING, blank=True, null=True, to_field='job_id', db_column='job_id')

    class Meta:
        managed = False
        db_table = 'emp_employees'
        verbose_name = verbose_name_plural = VN_T('emp_employees')

    def __str__(self):
        return str(self.employee_id)


class EmpJobTypeDays(models.Model):
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_type_day_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('job_type_day_id'), primary_key=True)
    job_type_id = models.ForeignKey(EmpJobTypes, models.DO_NOTHING, blank=True, null=True, to_field='job_type_id', db_column='job_type_id')
    working_day_id = models.ForeignKey(EmpWorkingDays, models.DO_NOTHING, blank=True, null=True, to_field='working_day_id', db_column='working_day_id')

    class Meta:
        managed = False
        db_table = 'emp_job_type_days'
        verbose_name = verbose_name_plural = VN_T('emp_job_type_days')

    def __str__(self):
        return str(self.job_type_day_id)


class CrmCommunications(models.Model):
    attach_file1_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file1_identifier'))
    attach_file6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file6'))
    attach_file5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file5'))
    attach_file4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file4'))
    attach_file3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file3'))
    attach_file2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file2'))
    attach_file1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file1'))
    communtication_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('communtication_method_code'))
    communication_description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('communication_description'))
    communication_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('communication_name'))
    # communication_blob = models.BinaryField(blank=True, null=True, verbose_name=VN_C('communication_blob'))
    # communication_clob = models.TextField(blank=True, null=True, verbose_name=VN_C('communication_clob'))
    source_url = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('source_url'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    cmn_object_batch_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cmn_object_batch_id'))
    item_batch_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_batch_id'))
    whom_list = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('whom_list'))
    template_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('template_id'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    merge_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('merge_header_id'))
    plsql_function = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('plsql_function'))
    attach_url6_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url6_identifier'))
    attach_url5_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url5_identifier'))
    attach_url4_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url4_identifier'))
    attach_url3_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url3_identifier'))
    attach_url2_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url2_identifier'))
    attach_url1_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url1_identifier'))
    attach_url6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url6'))
    attach_url5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url5'))
    attach_url4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url4'))
    attach_url3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url3'))
    attach_url2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url2'))
    attach_url1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url1'))
    attach_file6_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file6_identifier'))
    attach_file5_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file5_identifier'))
    attach_file4_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file4_identifier'))
    attach_file3_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file3_identifier'))
    attach_file2_identifier = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file2_identifier'))
    reply_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('reply_email'))
    from_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('from_email'))
    subject = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('subject'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    communication_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('communication_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'crm_communications'
        verbose_name = verbose_name_plural = VN_T('crm_communications')

    def __str__(self):
        return str(self.communication_id)


class CrmParties(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    primary_party_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('primary_party_id'))
    www = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('www'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    fax_others = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('fax_others'))
    fax_business = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('fax_business'))
    phone_others = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('phone_others'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    phone_office = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_office'))
    phone_mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_mobile'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    phone_business = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone_business'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('contact_id'))
    subscription_method = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subscription_method'))
    subscription_notes = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('subscription_notes'))
    subscribed_by = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('subscribed_by'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    email3 = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email3'))
    email2 = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email2'))
    email1 = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email1'))
    contact_gender = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('contact_gender'))
    contact_lastname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('contact_lastname'))
    contact_middlename = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('contact_middlename'))
    contact_title = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('contact_title'))
    subscription_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('subscription_date'))
    subscription_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subscription_type'))
    contact_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('contact_method_code'))
    include_in_mailshot = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('include_in_mailshot'))
    contact_firstname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('contact_firstname'))
    system_status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('system_status_text'))
    import_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('import_status'))
    system_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    party_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('party_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'crm_parties'
        verbose_name = verbose_name_plural = VN_T('crm_parties')

    def __str__(self):
        return str(self.party_id)


class CrmTemplates(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    merge_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('merge_header_id'))
    plsql_function = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('plsql_function'))
    attach_url6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url6'))
    attach_url5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url5'))
    attach_url4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url4'))
    attach_url3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url3'))
    attach_url2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url2'))
    attach_url1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_url1'))
    attach_file6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file6'))
    attach_file5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file5'))
    attach_file4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file4'))
    attach_file3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file3'))
    attach_file2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file2'))
    attach_file1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attach_file1'))
    template_description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('template_description'))
    template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('template_name'))
    # template_blob = models.BinaryField(blank=True, null=True, verbose_name=VN_C('template_blob'))
    # template_clob = models.TextField(blank=True, null=True, verbose_name=VN_C('template_clob'))
    source_url = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('source_url'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    reply_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('reply_email'))
    from_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('from_email'))
    template_subject = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('template_subject'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    template_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('template_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'crm_templates'
        verbose_name = verbose_name_plural = VN_T('crm_templates')

    def __str__(self):
        return str(self.template_id)


class PrPricelistHeaders(models.Model):
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price'))
    price_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('price_type'))
    price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('price_type_id'))
    all_items = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('all_items'))
    sales_unit = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sales_unit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pricelist_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pricelist_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'pr_pricelist_headers'
        verbose_name = verbose_name_plural = VN_T('pr_pricelist_headers')

    def __str__(self):
        return str(self.pricelist_header_id)


class PriceTemplateLines(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('price_type_id'))
    price5 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price5'))
    price4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price4'))
    price3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price3'))
    price2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price2'))
    price1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price1'))
    price0 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price0'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    price6 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price6'))
    price10 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price10'))
    price9 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price9'))
    price8 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price8'))
    price7 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price7'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    price_type = models.CharField(max_length=30, blank=True, null=True, default='VALUE', verbose_name=VN_C('price_type'))
    su_category = models.CharField(max_length=30, blank=True, null=True, default='SALESUNIT', verbose_name=VN_C('su_category'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pricetemp_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pricetemp_line_id'), primary_key=True)
    uom_id = models.ForeignKey(CmnUnitOfMeasurements, models.DO_NOTHING, blank=True, null=True, to_field='uom_id', db_column='uom_id')

    class Meta:
        managed = False
        db_table = 'price_template_lines'
        verbose_name = verbose_name_plural = VN_T('price_template_lines')

    def __str__(self):
        return str(self.pricetem_line_id)
        # unique_together = (('pricetemp_id','sl_no'),('pricetemp_id','sales_unit'),)


class ArOptions(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False,
                                     verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    company_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('company_id'))

    customer_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,AR_CASHCUSTOMERS_L),
                                      verbose_name=VN_C('customer_id'))
    price_type_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,INV_PRICE_TYPES_l),
                                        verbose_name=VN_C('price_type_id'))
    offer_price_type_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,INV_PRICE_TYPES_l),
                                              verbose_name=VN_C('offer_price_type_id'))
    return_sub_location_id = models.IntegerField(blank=True, null=True,  editable=True,
                                      choices=populatelistitem(None,INV_SUBLOCATIONS_L),
                                                 verbose_name=VN_C('return_sub_location_id'))
    invoice_screen_format = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('invoice_screen_format'))
    invoice_report_format = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('invoice_report_format'))
    return_location_id = models.IntegerField(blank=True, null=True,  editable=True,
                                      choices=populatelistitem(None,INV_LOCATIONS_L),
                                             verbose_name=VN_C('return_location_id'))
    cpt_id = models.IntegerField(blank=True, null=True,  editable=True,
                                      choices=populatelistitem(None,CMN_PAYMENT_TERMS_l),
                                 verbose_name=VN_C('payment_terms'))
    pmnt_method_id = models.IntegerField(blank=True, null=True,  editable=True,
                                      choices=populatelistitem(None,CMN_PAYMENT_METHODS_l),
                                         verbose_name=VN_C('pmnt_method_id'))
    bank_account_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,CMN_BANK_ACCOUNTS_l),
                                          verbose_name=VN_C('bank_account_id'))
    gl_account_id = models.IntegerField(blank=True, null=True,  editable=True,
                                      choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                        verbose_name=VN_C('gl_account_id'))
    sales_order_type = models.CharField(max_length=30, blank=True, null=True, editable=True,
                                      choices=populatelistitem('ORDER_TYPE'),
                                        verbose_name=VN_C('sales_order_type'))
    gl_cashingup_by = models.CharField(max_length=30, blank=True, null=True, editable=True,
                                      choices=populatelistitem('CASHING_TYPE'),
                                       verbose_name=VN_C('gl_cashingup_by'))
    special_offer_hint = models.CharField(max_length=30, blank=True, null=True, editable=True,
                                      choices=populatelistitem('SPECIAL_OFFER_HINT'),verbose_name=VN_C('special_offer_hint'))
    document_path = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('document_path'))
    customer_numbering = models.CharField(max_length=30, blank=True, null=True, default='MANUAL',
                                          choices=populatelistitem('ITEM_NUMBERING'),
                                          verbose_name=VN_C('customer_numbering'))
    barcode_qty_hint = models.CharField(max_length=30, blank=True, null=True, default='BARCODEQTY',
                                          choices=populatelistitem('BARCODE_QTY_HINT'),
                                        verbose_name=VN_C('barcode_qty_hint'))
    inv_requisition_hint = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('INV_REQUISITION_HINT'),
                                            verbose_name=VN_C('inv_requisition_hint'))

    allocate_order_qty = models.CharField(max_length=1, blank=True, null=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('allocate_order_qty'))
    quantity_popup = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('quantity_popup'))
    display_invnumber_onfinalise = models.CharField(max_length=1, blank=True, null=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('display_invnumber_onfinalise'))
    populate_invoice_batch = models.CharField(max_length=1, blank=True, null=True,
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('populate_invoice_batch'))
    print_customer_note1 = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_customer_note1'))
    print_customer_note2 = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('print_customer_note2'))
    print_customer_note3 = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_customer_note3'))
    apply_offer_on_custprice = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('apply_offer_on_custprice'))
    surcharge_account_customers = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('surcharge_account_customers'))
    write_invoice_to_file = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('write_invoice_to_file'))
    central_payment = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('central_payment'))
    monitor_layaway = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('monitor_layaway'))
    pay_inout_slip = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('pay_inout_slip'))
    alert_less_then_cost = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('alert_less_then_cost'))
    must_select_customer = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('must_select_customer'))
    can_change_customer = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('can_change_customer'))
    print_bo_receipt = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_bo_receipt'))
    log_off_after_each_trans = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('log_off_after_each_trans'))
    duplicate_customer_name = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('duplicate_customer_name'))
    print_batch_count = models.CharField(max_length=1, blank=True, null=True, default='N',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_batch_count'))
    allow_minus_stock = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('allow_minus_stock'))
    allow_part_invoice = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('allow_part_invoice'))

    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    batch_format = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_format'))

    print_imagein_invoice = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_imagein_invoice'))
    print_output_path = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('print_output_path'))
    printer1_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,CMN_PRINTERS_L),
                                      verbose_name=VN_C('printer1_id'))
    printer1_copies = models.IntegerField(blank=True, null=True, verbose_name=VN_C('printer1_copies'))
    printer1_preview_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_PREVIEW_MODE'),
                                         verbose_name=VN_C('printer1_preview_mode'))
    printer1_format = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_OUTPUT_FORMAT'),
                                        verbose_name=VN_C('printer1_format'))
    printer1_batch_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('printer1_batch_mode'))
    printer1_execution_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_EXECUTION_MODE'),
                                          verbose_name=VN_C('printer1_execution_mode'))
    printer2_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,CMN_PRINTERS_L),
                                      verbose_name=VN_C('printer2_id'))
    printer2_copies = models.IntegerField(blank=True, null=True, verbose_name=VN_C('printer2_copies'))
    printer2_preview_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_PREVIEW_MODE'),
                                         verbose_name=VN_C('printer2_preview_mode'))
    printer2_format = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_OUTPUT_FORMAT'),
                                         verbose_name=VN_C('printer2_format'))
    printer2_batch_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('printer2_batch_mode'))
    printer2_execution_mode = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('REPORT_EXECUTION_MODE'),
                                          verbose_name=VN_C('printer2_execution_mode'))
    receipt_printer_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,CMN_PRINTERS_L),
                                        verbose_name=VN_C('receipt_printer_id'))
    quickcode_id = models.IntegerField(blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None,INV_QUICKCODES_L),
                                        verbose_name=VN_C('quickcode_id'))
    fo_price_basis = models.CharField(max_length=30, blank=True, null=True, default='NOVAT',
                                          choices=populatelistitem('PRICE_BASIS'),
                                         verbose_name=VN_C('fo_price_basis'))
    credit_limit_control = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('CREDIT_LIMIT_CRITERIA'),
                                         verbose_name=VN_C('credit_limit_control'))
    unit_cost_plus_percent = models.IntegerField(blank=True, null=True, verbose_name=VN_C('unit_cost_plus_percent'))
    noof_layaways = models.IntegerField(blank=True, null=True, default=999, verbose_name=VN_C('noof_layaways'))
    default_item_filter = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem('DEFAULT_ITEM_FILTER'),
                                        verbose_name=VN_C('default_item_filter'))
    logoff_timeout = models.IntegerField(blank=True, null=True, verbose_name=VN_C('logoff_timeout'))
    period_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_header_id'))
    option_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('option_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    www_markupdown = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                         verbose_name=VN_C('www_markupdown'))
    www_price_type_id = models.IntegerField(blank=True, null=True, editable=True,
                                            choices=populatelistitem(None,INV_PRICE_TYPES_l),
                                            verbose_name=VN_C('www_price_type_id'))
    www_customer_category = models.CharField(max_length=30, blank=True, null=True,
                                             choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'WWW_CUSTOMER_CATEGORY'),
                                             verbose_name=VN_C('www_customer_category'))
    www_subscription_preference = models.CharField(max_length=30, blank=True, null=True,
                                             choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'WWW_SUBSCRIPTION_PREFERENCE'),
                                                   verbose_name=VN_C('www_subscription_preference'))
    www_min_order_value = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                              verbose_name=VN_C('www_min_order_value'))
    www_min_order_freeship = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                                 verbose_name=VN_C('www_min_order_freeship'))
    www_price_break_display = models.CharField(max_length=2000, blank=True, null=True,
                                               verbose_name=VN_C('www_price_break_display'))
    delivery_confirmation = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('delivery_confirmation'))
    picking_confirmation = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('picking_confirmation'))
    ar_option_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('ar_option_id'), primary_key=True)
    backorder_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('backorder_header_id'))

    class Meta:
        managed = False
        db_table = 'ar_options'
        verbose_name = verbose_name_plural = VN_T('ar_options')

    def __str__(self):
        return str(self.ar_option_id)


class ArCustomerProfiles(models.Model):
    cust_profile_name = models.CharField(max_length=30,blank=False, null=False, unique=True, verbose_name=VN_C('cust_profile_name'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    max_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_value'))
    min_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_value'))
    min_item_su_value = models.IntegerField(blank=True, null=True, verbose_name=VN_C('min_item_su_value'))
    min_item_su_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('min_item_su_type'))
    item_pop_method = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_pop_method'))
    rrp_percentage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('rrp_percentage'))
    customer_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_category'))
    customer_type_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_type_code'))
    customer_class_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_class_code'))
    price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('price_type_id'))
    customer_markupdown = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_markupdown'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('tax_code_id'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    www_price_break_display = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('www_price_break_display'))
    www_subscription_preference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_subscription_preference'))
    www_min_order_freeship = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_min_order_freeship'))
    www_customer_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_customer_category'))
    www_min_order_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_min_order_value'))
    www_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('www_price_type_id'))
    www_markupdown = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_markupdown'))
    export_customer = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('export_customer'))
    upload_instock_items = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('upload_instock_items'))
    reserve_item = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('reserve_item'))
    consolidate_items = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('consolidate_items'))
    account_allowed = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('account_allowed'))
    upload_items = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('upload_items'))
    print_customer_name = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('print_customer_name'))
    default_profile = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('default_profile'))
    min_deposit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_deposit_amount'))
    www_end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('www_end_date'))
    www_start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('www_start_date'))
    take_deposit = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('take_deposit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cust_profile_id = models.BigIntegerField(blank=False, null=False, default=0, editable=False, verbose_name=VN_C('cust_profile_id'), primary_key=True)
    cpt_cpt_id = models.ForeignKey(CmnPaymentTerms, models.DO_NOTHING, blank=True, null=True, to_field='cpt_id', db_column='cpt_cpt_id')

    class Meta:
        managed = False
        db_table = 'ar_customer_profiles'
        verbose_name = verbose_name_plural = VN_T('ar_customer_profiles')

    def __str__(self):
        return self.cust_profile_name


class ArCustomers(models.Model):
    customer_number = models.CharField(max_length=30, unique=True,verbose_name=VN_C('customer_number'))
    customer_name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('customer_name'))
    contact_forename = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('firstname'))
    contact_surname = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('lastname'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    billto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_county'))
    billto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_city'))
    shipto_country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shipto_country_code'))
    shipto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    shipto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    shipto_post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    billto_post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('billto_post_code'))
    billto_address_line1 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('billto_address_line1'))
    billto_country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('billto_country_code'))
    contact_full_name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('contact_full_name'))
    cust_title = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('cust_title'))
    shipto_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('shipto_email'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    shipto_contact_name = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('shipto_contact_name'))
    fax = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('fax'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    www = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('www'))
    shipto_address_line1 = models.CharField(max_length=255, blank=True, null=True,
                                            verbose_name=VN_C('shipto_address_line1'))
    customer_markupdown = models.DecimalField(max_digits=6, decimal_places=3, blank=True, null=True,
                                              verbose_name=VN_C('customer_markupdown'))
    customer_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_category'))
    language_code = models.ForeignKey(CmnLanguages, models.DO_NOTHING, blank=True, null=True, to_field='language_code', db_column='language_code')
    eori_number = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('eori_number'))
    customer_type_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_type_code'))
    rrp_percentage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('rrp_percentage'))
    export_customer = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('export_customer'))
    job_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('job_id'))
    shipto_address_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipto_address_type'))
    export_footer = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('export_footer'))
    export_header = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('export_header'))
    export_header_list = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('export_header_list'))
    export_column_list = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('export_column_list'))
    item_batch_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_batch_id'))
    backorder_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('backorder_header_id'))
    item_batch_hint = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_batch_hint'))
    date_format = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('date_format'))
    default_upload_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('default_upload_status'))
    filter_criteria = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('filter_criteria'))
    print_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('print_price_type_id'))
    price_import_hint = models.CharField(max_length=30, blank=True, null=True, default='FROMFILE', verbose_name=VN_C('price_import_hint'))
    price_invoice_hint = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('price_invoice_hint'))
    www_shipping_hint = models.CharField(max_length=30, blank=True, null=True, default='BYORDER', verbose_name=VN_C('www_shipping_hint'))
    www_price_incshipping = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('www_price_incshipping'))
    www_sub_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('www_sub_source_id'))
    balance = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance'))
    cust_credit_limit = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cust_credit_limit'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cust_vatregno = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cust_vatregno'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    cust_password = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('cust_password'))
    paid_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('paid_amount'))
    invoiced_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoiced_amount'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    orig_system_ref_hdr = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref_hdr'))
    orig_system_ref = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    primary_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('primary_customer_id'))
    ipt_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('ipt_price_type_id'))
    customer_pricename = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_pricename'))
    min_deposit_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_deposit_amount'))
    take_deposit = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('take_deposit'))
    reserve_item = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('reserve_item'))
    hold_reason = models.CharField(max_length=105, blank=True, null=True, verbose_name=VN_C('hold_reason'))
    customer_hold = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('customer_hold'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('mobile'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    freight_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_header_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    item_pop_method = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_pop_method'))
    min_item_su_value = models.IntegerField(blank=True, null=True, verbose_name=VN_C('min_item_su_value'))
    min_item_su_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('min_item_su_type'))
    customer_class_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_class_code'))
    upload_items = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('upload_items'))
    max_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_value'))
    min_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_value'))
    host_image_path2 = models.FilePathField(max_length=100, path=images_path, blank=True, null=True, verbose_name=VN_C('host_image_path2'))
    host_image_path1 = models.FilePathField(max_length=100, path=images_path, blank=True, null=True, verbose_name=VN_C('host_image_path1'))
    ftp_contact = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ftp_contact'))
    ftp_service_provider = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('ftp_service_provider'))
    ftp_port = models.IntegerField(blank=True, null=True, verbose_name=VN_C('ftp_port'))
    ftp_server = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('ftp_server'))
    ftp_password = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ftp_password'))
    ftp_user_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ftp_user_name'))
    picturetype = models.CharField(max_length=30, blank=True, null=True, default='.jpg', verbose_name=VN_C('picturetype'))
    picturename = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('picturename'))
    account_allowed = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('account_allowed'))
    print_customer_name = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('print_customer_name'))
    consolidate_items = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('consolidate_items'))
    upload_instock_items = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('upload_instock_items'))
    www_subscription_preference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_subscription_preference'))
    www_end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('www_end_date'))
    www_start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('www_start_date'))
    www_customer_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_customer_category'))
    www_min_order_freeship = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_min_order_freeship'))
    www_price_break_display = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('www_price_break_display'))
    www_min_order_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_min_order_value'))
    www_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('www_price_type_id'))
    www_markupdown = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                     verbose_name=VN_C('www_markupdown'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    customer_id = models.BigIntegerField(blank=False, null=False, editable=True, verbose_name=VN_C('customer_id'), primary_key=True)
    # supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='supplier_id')
    supplier_id = models.IntegerField(blank=True, null=True,  db_column='supplier_id', verbose_name=VN_C('supplier_id'))
    cpt_cpt_id = models.ForeignKey(CmnPaymentTerms, models.DO_NOTHING, blank=True, null=True, to_field='cpt_id', db_column='cpt_cpt_id')
    ctc_tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='ctc_tax_code_id')
    ctp_cust_profile_id = models.ForeignKey(ArCustomerProfiles, models.DO_NOTHING, blank=True, null=True, to_field='cust_profile_id', db_column='ctp_cust_profile_id')
    dob = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_of_birth'))
    anniversary = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('aniversary'))
    class Meta:
        managed = False
        db_table = 'ar_customers'
        verbose_name = verbose_name_plural = VN_T('ar_customers')

    def __str__(self):
        return self.customer_name
        # unique_together = (('email'),('login_name'),('customer_number'),)

    @property
    def noof_orders(self):
        order =  ArCustomers.objects.filter(customer_id=self.customer_id).annotate(ordercount=Count('salesorders')).values()
        return commonutil.nvl(order[0]['ordercount'],0)
    @property
    def noof_invoices(self):
        inv =  ArCustomers.objects.filter(customer_id=self.customer_id).annotate(invcount=Count('salesinvoices')).values()
        return commonutil.nvl(inv[0]['invcount'],0)


class ArCustomerPricelists(models.Model):
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    customer_pricelist_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('customer_pricelist_id'), primary_key=True)
    pricelist_header_id = models.ForeignKey(PrPricelistHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pricelist_header_id', db_column='pricelist_header_id')
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')

    class Meta:
        managed = False
        db_table = 'ar_customer_pricelists'
        verbose_name = verbose_name_plural = VN_T('ar_customer_pricelists')

    def __str__(self):
        return str(self.CUSTOMER_PRICELIST_ID)
        # unique_together = (('arcustomers','prpricelistheaders'),('arcustomers','sl_no'),)


class ArFreightHeaders(models.Model):
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    freight_logo = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('freight_logo'))
    delivery_footer = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_footer'))
    delivery_header = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_header'))
    delivery_body = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_body'))
    orig_system_reference = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('orig_system_reference'))
    freight_least = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('freight_least'))
    freight_greatest = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('freight_greatest'))
    freight_median = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('freight_median'))
    max_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('max_weight'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    postal_codes = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('postal_codes'))
    freight_region_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_region_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    freight_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('freight_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_freight_headers'
        verbose_name = verbose_name_plural = VN_T('ar_freight_headers')

    def __str__(self):
        return str(self.FREIGHT_HEADER_ID)


class ArFreightLines(models.Model):
    freight_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_rate'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    container_unit_to = models.DecimalField(max_digits=18, decimal_places=6,blank=True, null=True, verbose_name=VN_C('container_unit_to'))
    container_unit_from = models.DecimalField(max_digits=18, decimal_places=6,blank=True, null=True, verbose_name=VN_C('container_unit_from'))
    hours = models.IntegerField(blank=True, null=True, verbose_name=VN_C('hours'))
    pc_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pc_id'))
    web_expedite_flag = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('web_expedite_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    freight_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('freight_line_id'), primary_key=True)
    freight_header_id = models.ForeignKey(ArFreightHeaders, models.DO_NOTHING, blank=True, null=True, to_field='freight_header_id', db_column='freight_header_id')

    class Meta:
        managed = False
        db_table = 'ar_freight_lines'
        verbose_name = verbose_name_plural = VN_T('ar_freight_lines')

    def __str__(self):
        return str(self.FREIGHT_LINE_ID)
        # unique_together = (('freight_name'),('freight_code'),)


class ApPaymentHeaders(models.Model):
    payment_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_date'))
    contact_details = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('contact_details'))
    country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('country_code'))
    county = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('city'))
    post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('post_code'))
    address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('address'))
    name_on_card = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('name_on_card'))
    security_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('security_code'))
    issue_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('issue_number'))
    valid_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('valid_from'))
    expiry_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('expiry_date'))
    authorisation_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('authorisation_number'))
    card_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_type'))
    card_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_number'))
    payment_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_number'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    bank_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('bank_currency_code'))
    bank_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_account_id'))
    bank_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_id'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    payment_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_status_date'))
    payment_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_status'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    trans_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_category'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    payment_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    paid_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('paid_amount'))
    payment_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('payment_user_id'))
    batch_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('batch_amount'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ap_payment_headers'
        verbose_name = verbose_name_plural = VN_T('ap_payment_headers')

    def __str__(self):
        return str(self.PAYMENT_HEADER_ID)


class ApSupplierPriceLists(models.Model):
    supplier_product_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('supplier_product_desc'))
    preference_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('preference_code'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    alternate_unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('alternate_unit_cp'))
    alternate_case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('alternate_case_cp'))
    supplier_product_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('supplier_product_code'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    reorder_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('reorder_qty'))
    case_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('case_unit'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    price_list_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('price_list_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ap_supplier_price_lists'
        verbose_name = verbose_name_plural = VN_T('ap_supplier_price_lists')

    def __str__(self):
        return str(self.PRICE_LIST_ID)
        # unique_together = (('item_id','supplier_id'),)


class ArCustsplitHeaders(models.Model):
    split_ratio = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, verbose_name=VN_C('split_ratio'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    custsplit_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('custsplit_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_custsplit_headers'
        verbose_name = verbose_name_plural = VN_T('ar_custsplit_headers')

    def __str__(self):
        return str(self.CUSTSPLIT_ID)


class ArCustItemMapcategories(models.Model):
    sub_category_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_category_id'))
    map_attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute2'))
    map_attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute1'))
    map_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('map_description'))
    map_attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute3'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    map_attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute6'))
    map_attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute5'))
    map_attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('map_attribute4'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    map_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('map_category_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_cust_item_mapcategories'
        verbose_name = verbose_name_plural = VN_T('ar_cust_item_mapcategories')

    def __str__(self):
        return str(self.MAP_CATEGORY_ID)


class ArInvbatchCount(models.Model):
    invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_line_id'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    terminal_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('terminal_name'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    quantity = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('quantity'))
    session_id = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('session_id'))
    batch_number = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('batch_number'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    invbatch_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('invbatch_line_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_invbatch_count'
        verbose_name = verbose_name_plural = VN_T('ar_invbatch_count')

    def __str__(self):
        return str(self.INVBATCH_LINE_ID)


class ArRepaymentLines(models.Model):
    payment_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_line_status'))
    payment_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_line_status_date'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    cashback_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cashback_amount'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    discount_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('discount_type'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    transaction_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_phase_code'))
    card_approval_code = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_approval_code'))
    card_approval_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_approval_date'))
    payment_card_types = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_card_types'))
    card_holder_name = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_holder_name'))
    card_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_number'))
    card_expiration_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiration_date'))
    payment_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('payment_header_id'))
    payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount'))
    additional_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('additional_payment_amount'))
    standard_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('standard_payment_amount'))
    actual_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('actual_payment_amount'))
    card_security_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_security_code'))
    payment_reference = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('payment_reference'))
    check_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('check_number'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    repayment_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('repayment_line_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_repayment_lines'
        verbose_name = verbose_name_plural = VN_T('ar_repayment_lines')

    def __str__(self):
        return str(self.REPAYMENT_LINE_ID)


class ArSalcrGroups(models.Model):
    sales_person_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sales_person_id'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    sales_person_area_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sales_person_area_code'))
    sales_person_region_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sales_person_region_code'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    salcr_group_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('salcr_group_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_salcr_groups'
        verbose_name = verbose_name_plural = VN_T('ar_salcr_groups')

    def __str__(self):
        return str(self.SALCR_GROUP_ID)


class ArSalesPersons(models.Model):
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    sales_person_area_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sales_person_area_code'))
    sales_person_region_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sales_person_region_code'))
    sales_person_group_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sales_person_group_code'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('mobile'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('country_code'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('address'))
    sex = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('sex'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    date_of_birth = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_of_birth'))
    title = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('title'))
    middle_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('middle_name'))
    employee_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('employee_id'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sales_person_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('sales_person_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_sales_persons'
        verbose_name = verbose_name_plural = VN_T('ar_sales_persons')

    def __str__(self):
        return str(self.sales_person_id)


class ArSoimportBatch(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    order_currency_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_currency_code'))
    pay_currency_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('pay_currency_code'))
    other_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('other_total'))
    additional_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('additional_total'))
    gross_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    postage_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('postage_total'))
    insurance_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('insurance_total'))
    discount_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    tax_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_total'))
    net_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    lines_ok = models.IntegerField(blank=True, null=True, verbose_name=VN_C('lines_ok'))
    lines_rejected = models.IntegerField(blank=True, null=True, verbose_name=VN_C('lines_rejected'))
    total_lines = models.IntegerField(blank=True, null=True, verbose_name=VN_C('total_lines'))
    price_hint = models.CharField(max_length=30, blank=True, null=True, default='SOURCE', verbose_name=VN_C('price_hint'))
    user_status_text = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('user_status_text'))
    user_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_status'))
    import_template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('import_template_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    order_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_type'))
    order_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_category_code'))
    order_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_source'))
    system_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status_code'))
    system_status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('system_status_text'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phase_code'))
    import_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('import_status'))
    import_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('import_date'))
    customer_name = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('customer_name'))
    customer_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_number'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ar_soimport_batch'
        verbose_name = verbose_name_plural = VN_T('ar_soimport_batch')

    def __str__(self):
        return str(self.batch_id)


class ArCustomerImport(models.Model):
    fax = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('fax'))
    contract_last_name = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('contract_last_name'))
    contact_first_name = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('contact_first_name'))
    user_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_status'))
    import_template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('import_template_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    customer_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_type'))
    customer_markup_down = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_markup_down'))
    customer_price_level = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_price_level'))
    hold_reason = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('hold_reason'))
    customer_on_hold = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('customer_on_hold'))
    credit_limit = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('credit_limit'))
    account_customer = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('account_customer'))
    user_password = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('user_password'))
    user_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_name'))
    shipto_country = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('shipto_country'))
    shipto_post_code = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    shipto_county = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    billto_country = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('billto_country'))
    billto_post_code = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('billto_post_code'))
    billto_county = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('billto_county'))
    billto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_city'))
    system_status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('system_status_text'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phase_code'))
    import_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('import_status'))
    import_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('import_date'))
    phone2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phone1'))
    vat_registration_no = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('vat_registration_no'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    shipto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    shipto_address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('shipto_address'))
    import_hint = models.CharField(max_length=30, blank=True, null=True, default='DEFAULT', verbose_name=VN_C('import_hint'))
    user_status_text = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('user_status_text'))
    mobile = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('mobile'))
    title = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('title'))
    customer_name = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('customer_name'))
    customer_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_number'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    billto_address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('billto_address'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    system_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status_code'))
    contact_last_name = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('contact_last_name'))
    line_number = models.IntegerField(blank=True, null=True, verbose_name=VN_C('line_number'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    import_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('import_id'), primary_key=True)
    batch_id = models.ForeignKey(CmnImportBatch, models.DO_NOTHING, blank=True, null=True, to_field='batch_id', db_column='batch_id')

    class Meta:
        managed = False
        db_table = 'ar_customer_import'
        verbose_name = verbose_name_plural = VN_T('ar_customer_import')

    def __str__(self):
        return str(self.import_id)


class ArSalcrGroupMembers(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    salcr_group_member_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('salcr_group_member_id'), primary_key=True)
    sales_person_id = models.ForeignKey(ArSalesPersons, models.DO_NOTHING, blank=True, null=True, to_field='sales_person_id', db_column='sales_person_id')
    salcr_group_id = models.ForeignKey(ArSalcrGroups, models.DO_NOTHING, blank=True, null=True, to_field='salcr_group_id', db_column='salcr_group_id')

    class Meta:
        managed = False
        db_table = 'ar_salcr_group_members'
        verbose_name = verbose_name_plural = VN_T('ar_salcr_group_members')

    def __str__(self):
        return str(self.salcr_group_member_id)


class ArSalesorderImport(models.Model):
    t_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_quantity'))
    t_customlabel = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_customlabel'))
    t_itemname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_itemname'))
    t_itemnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_itemnumber'))
    t_delivertopostcode = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertopostcode'))
    t_delivertocountry = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocountry'))
    t_delivertocounty = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocounty'))
    t_delivertocity = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocity'))
    t_delivertoaddress3 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress3'))
    t_delivertoaddress2 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress2'))
    t_delivertoaddress1 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress1'))
    t_delivertoemail = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('t_delivertoemail'))
    t_delivertophone = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertophone'))
    t_delivertoname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoname'))
    t_buyerpostcode = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyerpostcode'))
    t_buyercountry = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercountry'))
    t_buyercounty = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercounty'))
    t_buyercity = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercity'))
    t_buyeraddress3 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress3'))
    t_buyeraddress2 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress2'))
    price_hint = models.CharField(max_length=30, blank=True, null=True, default='SOURCE', verbose_name=VN_C('price_hint'))
    user_status_text = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('user_status_text'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    t_paycurrencycode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('t_paycurrencycode'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    t_attribute1 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_attribute1'))
    t_variation = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_variation'))
    t_attribute2 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_attribute2'))
    t_buyeraddress1 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress1'))
    t_buyeremail = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('t_buyeremail'))
    t_buyerphone = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyerphone'))
    t_buyername = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyername'))
    t_username = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_username'))
    t_ordernumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_ordernumber'))
    line_number = models.IntegerField(blank=True, null=True, verbose_name=VN_C('line_number'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    user_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_status'))
    import_template_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('import_template_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    order_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_type'))
    order_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_category_code'))
    order_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_source'))
    system_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status_code'))
    system_status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('system_status_text'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('phase_code'))
    sub_batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sub_batch_name'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    import_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('import_status'))
    import_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('import_date'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    customer_name = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('customer_name'))
    customer_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_number'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    order_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_line_id'))
    t_cashondeliveryoption = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_cashondeliveryoption'))
    t_postageservice = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_postageservice'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('tax_code_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    t_ordercurrencycode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('t_ordercurrencycode'))
    t_groupnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_groupnumber'))
    t_batchnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_batchnumber'))
    t_notes2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notes2'))
    t_notes1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notes1'))
    t_transactionlineid = models.CharField(max_length=140, blank=True, null=True, editable=False, verbose_name=VN_C('t_transactionlineid'))
    t_transactionid = models.CharField(max_length=140, blank=True, null=True, editable=False, verbose_name=VN_C('t_transactionid'))
    t_paymentreference = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_paymentreference'))
    t_notestosupplier = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notestosupplier'))
    t_receivefeedback = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('t_receivefeedback'))
    t_paiddate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_paiddate'))
    t_checkedoutdate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_checkedoutdate'))
    t_orderdate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_orderdate'))
    t_paymentmethod = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_paymentmethod'))
    t_linetotal = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_linetotal'))
    t_additionalcharges = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_additionalcharges'))
    t_voucher = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_voucher'))
    t_insurance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_insurance'))
    t_discount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_discount'))
    t_postage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_postage'))
    t_taxincluded = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('t_taxincluded'))
    t_taxamount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_taxamount'))
    t_taxrate = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_taxrate'))
    t_netprice = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_netprice'))
    t_unitpriceexltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_unitpriceexltax'))
    t_unitpriceinctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_unitpriceinctax'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    import_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('import_id'), primary_key=True)
    batch_id = models.ForeignKey(ArSoimportBatch, models.DO_NOTHING, blank=True, null=True, to_field='batch_id', db_column='batch_id')

    class Meta:
        managed = False
        db_table = 'ar_salesorder_import'
        verbose_name = verbose_name_plural = VN_T('ar_salesorder_import')

    def __str__(self):
        return str(self.import_id)


class ArFreightCountries(models.Model):
    expedite_flag = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('expedite_flag'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    freight_country_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('freight_country_id'), primary_key=True)
    freight_header_id = models.ForeignKey(ArFreightHeaders, models.DO_NOTHING, blank=True, null=True, to_field='freight_header_id', db_column='freight_header_id')
    freight_line_id = models.ForeignKey(ArFreightLines, models.DO_NOTHING, blank=True, null=True, to_field='freight_line_id', db_column='freight_line_id')
    country_code = models.ForeignKey(CmnCountries, models.DO_NOTHING, blank=True, null=True, to_field='country_code', db_column='country_code')

    class Meta:
        managed = False
        db_table = 'ar_freight_countries'
        verbose_name = verbose_name_plural = VN_T('ar_freight_countries')

    def __str__(self):
        return str(self.freight_country_id)
        # unique_together = (('arfreightlines','cmncountries'),)


class ApSupplierProfiles(models.Model):
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sup_profile_id = models.BigIntegerField(blank=False, null=False, default=0, editable=False,
                                            verbose_name=VN_C('sup_profile_id'), primary_key=True)
    sup_profile_name = models.CharField(max_length=30, blank=False, null=False, editable=True,
                                        unique=True,
                                        verbose_name=VN_C('sup_profile_name'))

    class Meta:
        managed = False
        db_table = 'ap_supplier_profiles'
        verbose_name = verbose_name_plural = VN_T('ap_supplier_profiles')

    def __str__(self):
        return self.sup_profile_name


class ApSuppliers(models.Model):
    supplier_name = models.CharField(max_length=100, blank=True, null=True, unique=True, verbose_name=VN_C('supplier_name'))
    supplier_number = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('supplier_number'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    hold_reason = models.CharField(max_length=1000, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'SUPPLIER_HOLD_REASON'),
                                         verbose_name=VN_C('hold_reason'))
    supplier_hold = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('supplier_hold'))
    contact_name2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('contact_name2'))
    www = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('www'))
    mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('mobile'))
    lead_time = models.IntegerField(blank=True, null=True, default=0, verbose_name=VN_C('lead_time'))
    min_order_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_order_amount'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    fax = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('fax'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('post_code'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    address_line1 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('address_line1'))
    contact_name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('contact_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_ordered_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_ordered_date'))
    order_cycle_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('order_cycle_type'))
    order_cycle = models.IntegerField(blank=True, null=True, default=0, verbose_name=VN_C('order_cycle'))
    short_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('short_name'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    country_code = models.CharField(max_length=10, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_COUNTRIES_L),
                                         verbose_name=VN_C('country_code'))
    currency_code = models.CharField(max_length=10, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_CURRENCIES_L),
                                        verbose_name=VN_C('currency_code'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_PAYMENT_METHODS_l),
                                         verbose_name=VN_C('pmnt_method_id'))
    cpt_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_PAYMENT_TERMS_l),
                                         verbose_name=VN_C('cpt_id'))
    orig_system_ref_hdr = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref_hdr'))
    po_condition = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('po_condition'))
    gac_gl_account_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                         verbose_name=VN_C('gac_gl_account_id'))
    orig_system_ref = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    primary_supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('primary_supplier_id'))
    order_qty_type = models.CharField(max_length=30, blank=True, null=True, default='CASEQTY', verbose_name=VN_C('order_qty_type'))
    account_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('account_number'))
    balance = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance'))
    paid_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('paid_amount'))
    invoiced_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoiced_amount'))
    sup_vatregno = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sup_vatregno'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    supplier_category_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('supplier_category_code'))
    item_prefix = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('item_prefix'))
    po_preference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('po_preference'))
    mkuptemp_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,INV_MKUPTEMPLATES_l),
                                         verbose_name=VN_C('mkuptemp_id'))
    po_allowed = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('po_allowed'))
    back_order_type = models.CharField(max_length=30, blank=True, null=True, default='UNKNOWN', verbose_name=VN_C('back_order_type'))
    safety_net_days = models.IntegerField(blank=True, null=True, verbose_name=VN_C('safety_net_days'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    supplier_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('supplier_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    asp_sup_profile_id = models.ForeignKey(ApSupplierProfiles, models.DO_NOTHING, blank=True, null=True,
                                           to_field='sup_profile_id', db_column='asp_sup_profile_id')
    cmc_pc_id = models.ForeignKey(CmnContainers, models.DO_NOTHING, blank=True, null=True, to_field='pc_id', db_column='cmc_pc_id')
    ctc_tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='ctc_tax_code_id')

    class Meta:
        managed = False
        db_table = 'ap_suppliers'
        verbose_name = verbose_name_plural = VN_T('ap_suppliers')

    def __str__(self):
        return self.supplier_name
        # unique_together = (('supplier_name'),('supplier_number'),)


    @property
    def noof_orders(self):
        order =  ApSuppliers.objects.filter(supplier_id=self.supplier_id).annotate(ordercount=Count('purchaseorders')).values()
        return commonutil.nvl(order[0]['ordercount'],0)

    @property
    def noof_invoices(self):
        inv =  ApSuppliers.objects.filter(supplier_id=self.supplier_id).annotate(invcount=Count('apinvoices')).values()
        return commonutil.nvl(inv[0]['invcount'],0)

    @property
    def noof_goodsins(self):
        goodsin =  ApSuppliers.objects.filter(supplier_id=self.supplier_id).annotate(goodsincount=Count('goodsins')).values()
        return commonutil.nvl(goodsin[0]['goodsincount'],0)

class ApOptions(models.Model):
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    cost_price_formula = models.CharField(max_length=20, blank=True, null=True,
                                          choices=populatelistitem('COST_PRICE_FORMULA'),
                                          verbose_name=VN_C('cost_price_formula'))
    print_output_path = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('print_output_path'))
    printer_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,CMN_PRINTERS_L),
                                          verbose_name=VN_C('printer_id'))
    printer_copies = models.IntegerField(blank=True, null=True, verbose_name=VN_C('printer_copies'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    billto_location_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,INV_BILLTOLOCATIONS_L),
                                          verbose_name=VN_C('billto_location_id'))
    shipto_location_id = models.IntegerField(blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None,INV_SHIPTOLOCATIONS_L),
                                          verbose_name=VN_C('shipto_location_id'))
    batch_format = models.CharField(max_length=30, blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'BATCH_FORMAT'),
                                         verbose_name=VN_C('batch_format'))
    bank_account_id = models.IntegerField(blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None,CMN_BANK_ACCOUNTS_l),
                                          verbose_name=VN_C('bank_account_id'))
    supplier_numbering = models.CharField(max_length=30, blank=True, null=True, default='MANUAL',  editable=True,
                                          choices=populatelistitem('ITEM_NUMBERING'),
                                         verbose_name=VN_C('supplier_numbering'))
    add_outsorder_qty = models.CharField(max_length=1, blank=True, null=True, default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('add_outsorder_qty'))
    goods_in_qty_to_zero = models.CharField(max_length=1, blank=True, null=True, default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('goods_in_qty_to_zero'))
    follow_up_po = models.CharField(max_length=1, blank=True, null=True,  default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('follow_up_po'))
    calculate_suggested_order = models.CharField(max_length=1, blank=True, null=True,  default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('calculate_suggested_order'))
    auto_dbn_from_grn = models.CharField(max_length=1, blank=True, null=True, default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('auto_dbn_from_grn'))
    auto_batch_on_grn = models.CharField(max_length=1, blank=True, null=True,  default='Y', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('auto_batch_on_grn'))
    company_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('company_id'))
    grn_approved_sub_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('grn_approved_sub_location'))
    grn_unapproved_sub_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('grn_unapproved_sub_location'))
    rejection_sub_location_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('rejection_sub_location_name'))
    print_supplier_note1 = models.CharField(max_length=1, blank=True, null=True, default='N', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('print_supplier_note1'))
    print_supplier_note2 = models.CharField(max_length=1, blank=True, null=True,  default='N', editable=True,
                                          choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('print_supplier_note2'))
    items_receipt_type = models.CharField(max_length=20, blank=True, null=True,  default='INUNITS', editable=True,
                                          choices=populatelistitem('ITEM_RECEIPT_TYPE'),
                                         verbose_name=VN_C('items_receipt_type'))
    what_price_to_grn = models.CharField(max_length=30, blank=True, null=True, default='POPRICE', editable=True,
                                          choices=populatelistitem('PO_PRICE_SELECTION'),
                                          verbose_name=VN_C('what_price_to_grn'))
    what_price_to_po = models.CharField(max_length=30, blank=True, null=True, default='BASEPRICE', editable=True,
                                          choices=populatelistitem('PO_PRICE_SELECTION'),
                                          verbose_name=VN_C('what_price_to_po'))
    suggested_qty_formula = models.CharField(max_length=100, blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None,SUGGESTED_QTY_FORMULA_L),
                                         verbose_name=VN_C('suggested_qty_formula'))
    suggested_formula_text = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('suggested_formula_text'))
    print_note_criteria = models.CharField(max_length=30, blank=True, null=True, editable=True,
                                          choices=populatelistitem('PO_PRINT_NOTE_CRITERIA'),
                                          verbose_name=VN_C('print_note_criteria'))
    invoice_matching_option = models.CharField(max_length=10, blank=True, null=True, editable=True,
                                          choices=populatelistitem('INVOICE_MATCHING_OPTION'),
                                          verbose_name=VN_C('invoice_matching_option'))
    cpt_id = models.IntegerField(blank=True, null=True,  editable=True,
                                          choices=populatelistitem(None, CMN_PAYMENT_TERMS_l),
                                          verbose_name=VN_C('cpt_id'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=True,
                                          choices=populatelistitem(None,CMN_PAYMENT_METHODS_l),
                                          verbose_name=VN_C('pmnt_method_id'))
    invoice_image_path = models.FilePathField(max_length=100, path=images_path, blank=True, null=True, verbose_name=VN_C('invoice_image_path'))
    grn_tolerance_type = models.CharField(max_length=20, blank=True, null=True, default='QUANTITY', verbose_name=VN_C('grn_tolerance_type'))
    grn_tolerance_percentage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('grn_tolerance_percentage'))
    print_split_case = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('print_split_case'))
    option_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('option_type'))
    period_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_header_id'))
    grn_synchronised_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('grn_synchronised_on'))
    po_synchronised_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('po_synchronised_on'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    ap_options_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('ap_options_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ap_options'
        verbose_name = verbose_name_plural = VN_T('ap_options')

    def __str__(self):
        return str(self.ap_options_id)



class ExtTransHeaders(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    ext_trans_type = models.CharField(max_length=30, blank=True, null=True, default='IMPORT', verbose_name=VN_C('ext_trans_type'))
    status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('status_date'))
    status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('status'))
    trans_target = models.CharField(max_length=30, blank=True, null=True, default='AR', verbose_name=VN_C('trans_target'))
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    trans_subsource_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('trans_subsource_id'))
    trans_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('trans_source_id'))
    payment_source = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('payment_source'))
    trans_source = models.CharField(max_length=100, blank=True, null=True, default='MARKETPLACE', verbose_name=VN_C('trans_source'))
    file_name = models.FilePathField(max_length=100, path=uploads_path, blank=True, null=True, verbose_name=VN_C('file_name'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'ext_trans_headers'
        verbose_name = verbose_name_plural = VN_T('ext_trans_headers')

    def __str__(self):
        return str(self.header_id)


class DailyStockSnapshots(models.Model):
    qtyshould = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyshould'))
    stockvalue = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('stockvalue'))
    dateto = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dateto'))
    datefrom = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('datefrom'))
    quarternum = models.IntegerField(blank=True, null=True, verbose_name=VN_C('quarternum'))
    closingbal = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('closingbal'))
    monthchar = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('monthchar'))
    daychar = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('daychar'))
    weekmonth = models.IntegerField(blank=True, null=True, verbose_name=VN_C('weekmonth'))
    weekyear = models.IntegerField(blank=True, null=True, verbose_name=VN_C('weekyear'))
    yearnum = models.IntegerField(blank=True, null=True, verbose_name=VN_C('yearnum'))
    monthnum = models.IntegerField(blank=True, null=True, verbose_name=VN_C('monthnum'))
    daynum = models.IntegerField(blank=True, null=True, verbose_name=VN_C('daynum'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    qtyadjusted = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyadjusted'))
    valuepro = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valuepro'))
    qtypro = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtypro'))
    valuepercent = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valuepercent'))
    stockpercent = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('stockpercent'))
    qtyinorder = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyinorder'))
    valueminus = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valueminus'))
    qtyminus = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyminus'))
    valueplus = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valueplus'))
    qtyplus = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyplus'))
    valuebought = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valuebought'))
    qtybought = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtybought'))
    valuesold = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('valuesold'))
    qtysold = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtysold'))
    item_cost_price = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_cost_price'))
    item_curr_qty = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_curr_qty'))
    openingbal = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('openingbal'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'daily_stock_snapshots'
        verbose_name = verbose_name_plural = VN_T('daily_stock_snapshots')

    def __str__(self):
        return str(self.item_id)


class ExportHeaders(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    param40 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param40'))
    param39 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param39'))
    param38 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param38'))
    param37 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param37'))
    param36 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param36'))
    param35 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param35'))
    param34 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param34'))
    param33 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param33'))
    param32 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param32'))
    param31 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param31'))
    param30 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param30'))
    param29 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param29'))
    param28 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param28'))
    param27 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param27'))
    param26 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param26'))
    param25 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param25'))
    param24 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param24'))
    param23 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param23'))
    param22 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param22'))
    param21 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param21'))
    param20 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param20'))
    param19 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param19'))
    param18 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param18'))
    param17 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param17'))
    param16 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param16'))
    param15 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param15'))
    param14 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param14'))
    param13 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param13'))
    param12 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param12'))
    param11 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param11'))
    param10 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param10'))
    param9 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param9'))
    param8 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param8'))
    param7 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param7'))
    param6 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param6'))
    param5 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param5'))
    param4 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param4'))
    param3 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param3'))
    param2 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param2'))
    param1 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param1'))
    source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('source_id'))
    source_name = models.CharField(max_length=50, blank=True, null=True, default='INV_ITEM_MASTERS', verbose_name=VN_C('source_name'))
    export_type = models.CharField(max_length=30, blank=True, null=True, default='ITEM', verbose_name=VN_C('export_type'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    export_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('export_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'export_headers'
        verbose_name = verbose_name_plural = VN_T('export_headers')

    def __str__(self):
        return str(self.EXPORT_HEADER_ID)


class ImpexpHeaders(models.Model):
    where_clause = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('where_clause'))
    table_operation = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('table_operation'))
    distinct_clause = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('distinct_clause'))
    groupby_clause = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('groupby_clause'))
    param_daterange = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('param_daterange'))
    param_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('param_date_from'))
    param_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('param_date_to'))
    column_headers = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('column_headers'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    access_level = models.CharField(max_length=30, blank=True, null=True, default='SYSTEM', verbose_name=VN_C('access_level'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    copied_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('copied_from'))
    column_delimiter = models.CharField(max_length=1, blank=True, null=True, default=',', verbose_name=VN_C('column_delimiter'))
    file_name_delimiter = models.CharField(max_length=1, blank=True, null=True, default='_', verbose_name=VN_C('file_name_delimiter'))
    file_name = models.FilePathField(max_length=100, path=uploads_path, blank=True, null=True, verbose_name=VN_C('file_name'))
    directory_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('directory_name'))
    use_api = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('use_api'))
    object_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('object_name'))
    impexp_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('impexp_decription'))
    impexp_type = models.CharField(max_length=30, blank=True, null=True, default='IMPORT', verbose_name=VN_C('impexp_type'))
    orderby_clause = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('orderby_clause'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    impexp_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('impexp_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'impexp_headers'
        verbose_name = verbose_name_plural = VN_T('impexp_headers')

    def __str__(self):
        return str(self.IMPEXP_HEADER_ID)


class ExportLines(models.Model):
    column242 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column242'))
    column241 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column241'))
    column240 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column240'))
    column239 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column239'))
    column238 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column238'))
    column237 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column237'))
    column236 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column236'))
    column235 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column235'))
    column234 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column234'))
    column233 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column233'))
    column232 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column232'))
    column231 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column231'))
    column230 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column230'))
    column229 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column229'))
    column228 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column228'))
    column227 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column227'))
    column226 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column226'))
    column225 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column225'))
    column224 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column224'))
    column223 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column223'))
    column222 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column222'))
    column221 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column221'))
    column220 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column220'))
    column219 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column219'))
    column218 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column218'))
    column217 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column217'))
    column216 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column216'))
    column215 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column215'))
    column214 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column214'))
    column213 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column213'))
    column212 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column212'))
    column211 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column211'))
    column210 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column210'))
    column209 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column209'))
    column208 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column208'))
    column207 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column207'))
    column206 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column206'))
    column205 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column205'))
    column204 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column204'))
    column203 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column203'))
    column202 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column202'))
    column201 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column201'))
    order_by_3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('order_by_3'))
    order_by_2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('order_by_2'))
    order_by_1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('order_by_1'))
    status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('status_text'))
    status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('status_code'))
    column150 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column150'))
    column149 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column149'))
    column148 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column148'))
    column147 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column147'))
    column146 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column146'))
    column145 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column145'))
    column144 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column144'))
    column143 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column143'))
    column142 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column142'))
    column141 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column141'))
    column140 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column140'))
    column139 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column139'))
    column138 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column138'))
    column137 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column137'))
    column136 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column136'))
    column135 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column135'))
    column134 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column134'))
    column133 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column133'))
    column132 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column132'))
    column131 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column131'))
    column130 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column130'))
    column129 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column129'))
    column128 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column128'))
    column127 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column127'))
    column126 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column126'))
    column125 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column125'))
    column124 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column124'))
    column123 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column123'))
    column122 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column122'))
    column121 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column121'))
    column120 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column120'))
    column119 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column119'))
    column118 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column118'))
    column117 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column117'))
    column116 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column116'))
    column115 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column115'))
    column114 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column114'))
    column113 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column113'))
    column112 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column112'))
    column111 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column111'))
    column110 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column110'))
    column109 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column109'))
    column108 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column108'))
    column107 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column107'))
    column106 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column106'))
    column105 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column105'))
    column104 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column104'))
    column103 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column103'))
    column102 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column102'))
    column101 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column101'))
    column100 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column100'))
    column99 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column99'))
    column98 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column98'))
    column97 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column97'))
    column96 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column96'))
    column95 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column95'))
    column94 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column94'))
    column93 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column93'))
    column92 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column92'))
    column91 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column91'))
    column90 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column90'))
    column89 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column89'))
    column88 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column88'))
    column87 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column87'))
    column86 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column86'))
    column85 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column85'))
    column84 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column84'))
    column83 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column83'))
    column82 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column82'))
    column81 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column81'))
    column80 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column80'))
    column79 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column79'))
    column78 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column78'))
    column77 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column77'))
    column76 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column76'))
    column75 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column75'))
    column74 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column74'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    column200 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column200'))
    column199 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column199'))
    column198 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column198'))
    column197 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column197'))
    column196 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column196'))
    data_type = models.CharField(max_length=30, blank=True, null=True, default='DATA', verbose_name=VN_C('data_type'))
    column250 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column250'))
    column249 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column249'))
    column248 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column248'))
    column247 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column247'))
    column246 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column246'))
    column245 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column245'))
    column244 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column244'))
    column243 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column243'))
    column50 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column50'))
    column49 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column49'))
    column48 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column48'))
    column47 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column47'))
    column46 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column46'))
    column45 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column45'))
    column44 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column44'))
    column43 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column43'))
    column42 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column42'))
    column41 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column41'))
    column40 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column40'))
    column39 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column39'))
    column38 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column38'))
    column37 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column37'))
    column36 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column36'))
    column35 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column35'))
    column34 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column34'))
    column33 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column33'))
    column32 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column32'))
    column31 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column31'))
    column30 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column30'))
    column29 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column29'))
    column28 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column28'))
    column27 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column27'))
    column26 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column26'))
    column25 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column25'))
    column24 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column24'))
    column23 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column23'))
    column22 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column22'))
    column21 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column21'))
    column20 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column20'))
    column19 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column19'))
    column18 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column18'))
    column17 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column17'))
    column16 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column16'))
    column15 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column15'))
    column14 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column14'))
    column13 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column13'))
    column12 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column12'))
    column11 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column11'))
    column10 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column10'))
    column9 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column9'))
    column8 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column8'))
    column7 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column7'))
    column6 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column6'))
    column5 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column5'))
    column4 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column4'))
    column3 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column3'))
    column2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column2'))
    column1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column1'))
    source_number = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('source_number'))
    source_id_4 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_id_4'))
    source_id_3 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_id_3'))
    source_id_2 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_id_2'))
    column195 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column195'))
    column194 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column194'))
    column193 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column193'))
    column192 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column192'))
    column191 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column191'))
    column190 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column190'))
    column189 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column189'))
    column188 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column188'))
    column187 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column187'))
    column186 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column186'))
    column185 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column185'))
    column184 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column184'))
    column183 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column183'))
    column182 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column182'))
    column181 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column181'))
    column180 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column180'))
    column179 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column179'))
    column178 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column178'))
    column177 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column177'))
    column176 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column176'))
    column175 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column175'))
    column174 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column174'))
    column173 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column173'))
    column172 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column172'))
    column171 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column171'))
    column170 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column170'))
    column169 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column169'))
    column168 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column168'))
    column167 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column167'))
    column166 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column166'))
    column165 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column165'))
    column164 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column164'))
    column163 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column163'))
    column162 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column162'))
    column161 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column161'))
    column160 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column160'))
    column159 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column159'))
    column158 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column158'))
    column157 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column157'))
    column156 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column156'))
    column155 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column155'))
    column154 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column154'))
    column153 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column153'))
    column152 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column152'))
    column151 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column151'))
    column73 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column73'))
    column72 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column72'))
    column71 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column71'))
    column70 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column70'))
    column69 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column69'))
    column68 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column68'))
    column67 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column67'))
    column66 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column66'))
    column65 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column65'))
    column64 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column64'))
    column63 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column63'))
    column62 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column62'))
    column61 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column61'))
    column60 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column60'))
    column59 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column59'))
    column58 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column58'))
    column57 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column57'))
    column56 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column56'))
    column55 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column55'))
    column54 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column54'))
    column53 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column53'))
    column52 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column52'))
    column51 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('column51'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    export_header_id = models.ForeignKey(ExportHeaders, models.DO_NOTHING, blank=True, null=True, to_field='export_header_id', db_column='export_header_id')

    class Meta:
        managed = False
        db_table = 'export_lines'
        verbose_name = verbose_name_plural = VN_T('export_lines')

    def __str__(self):
        return str(self.IMPEXP_HEADER_ID)


class ExtTransLines(models.Model):
    selling_fees = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('selling_fees'))
    promotional_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('promotional_price'))
    giftwrap_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('giftwrap_price'))
    postage_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('postage_price'))
    sales_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sales_price'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, default=1, verbose_name=VN_C('exchange_rate'))
    paid_currency_code = models.CharField(max_length=10, blank=True, null=True, default='GBP', verbose_name=VN_C('paid_currency_code'))
    order_currency_code = models.CharField(max_length=10, blank=True, null=True, default='GBP', verbose_name=VN_C('order_currency_code'))
    order_post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_post_code'))
    order_country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('order_country_code'))
    order_county = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('order_county'))
    order_city = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('order_city'))
    order_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('order_address'))
    trans_reference_id = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('trans_reference_id'))
    source_invoice_id = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('source_invoice_id'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    trans_fees3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_fees3'))
    trans_fees2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_fees2'))
    trans_fees1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_fees1'))
    attribute1 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute1'))
    balance_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance_amount'))
    counterparty_status = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('counterparty_status'))
    item_url = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_url'))
    buyer_id = models.CharField(max_length=100, blank=True, null=True, editable=False, verbose_name=VN_C('buyer_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    closing_date = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('closing_date'))
    marketplace_item_id = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('marketplace_item_id'))
    source_receipt_id = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('source_receipt_id'))
    source_customer_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_customer_number'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute6'))
    tax_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    total_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_price'))
    trans_fees4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_fees4'))
    to_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('to_email'))
    order_name = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('order_name'))
    fulfilled_by = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('fulfilled_by'))
    marketplace = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('marketplace'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    trans_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('trans_description'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    item_number = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_number'))
    order_id = models.CharField(max_length=100, blank=True, null=True, editable=False, verbose_name=VN_C('order_id'))
    trans_status = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('trans_status'))
    trans_type = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('trans_type'))
    settlement_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('settlement_ref'))
    trans_time = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('trans_time'))
    attribute5 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute5'))
    source_invoice_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_invoice_number'))
    address_status = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('address_status'))
    from_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('from_email'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    attribute4 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('attribute2'))
    fullfillment_fees = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('fullfillment_fees'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    header_id = models.ForeignKey(ExtTransHeaders, models.DO_NOTHING, blank=True, null=True, to_field='header_id', db_column='header_id')

    class Meta:
        managed = False
        db_table = 'ext_trans_lines'
        verbose_name = verbose_name_plural = VN_T('ext_trans_lines')

    def __str__(self):
        return str(self.IMPEXP_HEADER_ID)


class ImpexpLines(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    primary_flag = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('primary_flag'))
    update_flag = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('update_flag'))
    insert_flag = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('insert_flag'))
    parameter_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('parameter_name'))
    file_column_header = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('file_column_header'))
    filter_type = models.CharField(max_length=10, blank=True, null=True, default='EXCLUDE', verbose_name=VN_C('filter_type'))
    filter_condition = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('filter_condition'))
    format = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('format'))
    max_length = models.IntegerField(blank=True, null=True, verbose_name=VN_C('max_length'))
    expression_type = models.CharField(max_length=50, blank=True, null=True, default='EXPRESSION', verbose_name=VN_C('expression_type'))
    expression = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('expression'))
    file_position = models.IntegerField(blank=True, null=True, verbose_name=VN_C('file_position'))
    column_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('column_name'))
    data_type = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('data_type'))
    table_alias = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('table_alias'))
    if_null = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('if_null'))
    builtin_functions = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('builtin_functions'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    impexp_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('impexp_line_id'), primary_key=True)
    impexp_header_id = models.ForeignKey(ImpexpHeaders, models.DO_NOTHING, blank=True, null=True, to_field='impexp_header_id', db_column='impexp_header_id')

    class Meta:
        managed = False
        db_table = 'impexp_lines'
        verbose_name = verbose_name_plural = VN_T('impexp_lines')

    def __str__(self):
        return str(self.impexp_line_id)
        # unique_together = (('impexpheaders','sl_no'),)


class SysNotificationEvents(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    table_view_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('table_view_name'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    notification_group = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('notification_group'))
    event_type = models.CharField(max_length=30, blank=True, null=True, default='WORKLIST', verbose_name=VN_C('event_type'))
    subject_prefix = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('subject_prefix'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    event_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('event_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_notification_events'
        verbose_name = verbose_name_plural = VN_T('sys_notification_events')

    def __str__(self):
        return str(self.event_id)


class SysNotificationRecipients(models.Model):
    line_type = models.CharField(max_length=30, blank=True, null=True, default='WORKLIST', verbose_name=VN_C('line_type'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    user_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('user_name'))
    responsibility_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('responsibility_name'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    subject_prefix = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('subject_prefix'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    event_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('event_line_id'), primary_key=True)
    event_id = models.ForeignKey(SysNotificationEvents, models.DO_NOTHING, blank=True, null=True, to_field='event_id', db_column='event_id')
    user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='user_id')
    responsibility_id = models.ForeignKey(CmnResponsibilities, models.DO_NOTHING, blank=True, null=True, to_field='resp_id', db_column='responsibility_id')

    class Meta:
        managed = False
        db_table = 'sys_notification_recipients'
        verbose_name = verbose_name_plural = VN_T('sys_notification_recipients')

    def __str__(self):
        return str(self.event_line_id)


class TpStockSources(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    date_active_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_to'))
    date_active_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_from'))
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    tp_source_desc = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('tp_source_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    tp_source_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('tp_source_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'tp_stock_sources'
        verbose_name = verbose_name_plural = VN_T('tp_stock_sources')

    def __str__(self):
        return str(self.tp_source_id)


class TpStockLines(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    price_difference_flag = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('price_difference_flag'))
    tp_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tp_status'))
    tp_source_cost = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tp_source_cost'))
    my_cost = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('my_cost'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    barcode = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('barcode'))
    item_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_number'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    tp_stock_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('tp_stock_line_id'), primary_key=True)
    tp_source_id = models.ForeignKey(TpStockSources, models.DO_NOTHING, blank=True, null=True, to_field='tp_source_id', db_column='tp_source_id')

    class Meta:
        managed = False
        db_table = 'tp_stock_lines'
        verbose_name = verbose_name_plural = VN_T('tp_stock_lines')

    def __str__(self):
        return str(self.tp_stock_line_id)


class InvBarcodeRepository(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    repository_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('repository_id'), primary_key=True)
    barcode = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('barcode'))
    barcode_type = models.CharField(max_length=30, blank=True, null=True, default='EAN13', verbose_name=VN_C('barcode_type'))
    barcode_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('barcode_description'))
    barcode_status = models.CharField(max_length=30, blank=True, null=True, default='AVAILABLE',
                                      choices=populatelistitem('BARCODE_REPOSITORY_STATUS'),
                                      verbose_name=VN_C('barcode_status'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y',
                              choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    class Meta:
        managed = False
        db_table = 'inv_barcode_repository'
        verbose_name = verbose_name_plural = VN_T('inv_barcode_repository')

    def __str__(self):
        return self.barcode


class InvContainerLog(models.Model):
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('length'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    source_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('source_line_id'))
    quantity = models.IntegerField(blank=True, null=True, verbose_name=VN_C('quantity'))
    released_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('released_on'))
    received_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('received_on'))
    received_from = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('received_from'))
    height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('height'))
    width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('width'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    container_log_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('container_log_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_container_log'
        verbose_name = verbose_name_plural = VN_T('inv_container_log')

    def __str__(self):
        return str(self.container_log_id)


class InvItemcountInterface(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    item_count_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_count_header_id'))
    count_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('count_value'))
    unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    status_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('status_text'))
    status = models.CharField(max_length=10, blank=True, null=True, default='NEW', verbose_name=VN_C('status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='LOAD', editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_number'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    sub_location = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('sub_location'))
    location_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('location_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    interface_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('interface_date'))
    upload_status = models.CharField(max_length=20, blank=True, null=True, default='NEW', verbose_name=VN_C('upload_status'))
    stktake_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stktake_name'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    interface_id = models.IntegerField(blank=True, null=True, default=0, editable=False, verbose_name=VN_C('interface_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)

    class Meta:
        managed = False
        db_table = 'inv_itemcount_interface'
        verbose_name = verbose_name_plural = VN_T('inv_itemcount_interface')

    def __str__(self):
        return str(self.container_log_id)



class InvItemBatches(models.Model):
    last_query_criteria = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('last_query_criteria'))
    access_level = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('access_level'))
    item_batch_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_batch_category'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_id'), primary_key=True)
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    banner_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('banner_type'))
    on_click_action = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('on_click_action'))
    page_url = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('page_url'))
    display_order = models.IntegerField( blank=True, null=True, verbose_name=VN_C('display_order'))
    meta_title = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('meta_title'))
    key_words = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('key_words'))
    image_url = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('image_url'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y',
                              choices=populatelistitem('YES_NO'), verbose_name=VN_C('page_url'))

    class Meta:
        managed = False
        db_table = 'inv_item_batches'
        verbose_name = verbose_name_plural = VN_T('inv_item_batches')

    def __str__(self):
        return str(self.batch_id)


class InvItemCategories(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    category_id = models.BigIntegerField(blank=False, null=False, editable=False , primary_key=True , verbose_name=VN_C('category_id'))
    category_name = models.CharField(max_length=50,blank=False, null=False,unique=True,verbose_name=VN_C('category_name'))
    description = models.CharField(max_length=2000, blank=False, null=False, verbose_name=VN_C('description'))
    category_code = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('category_code'))
    category_markup = models.DecimalField(max_digits=6, decimal_places=3,blank=True, null=True, verbose_name=VN_C('category_markup'))
    take_snapshot = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO'),
                                     verbose_name=VN_C('take_snapshot'))
    picturename = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('picturename'))
    bin_identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bin_identifier'))
    key_words = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('key_words'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    amazon_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('amazon_percent'))
    ebay_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ebay_percent'))
    on_home_page = models.SmallIntegerField( default=0,
                                            choices=populatelistitem('TRUE_FALSE'),
                                            blank=True, null=True, verbose_name=VN_C('on_home_page'))
    active = models.SmallIntegerField( default=1,
                                            choices=populatelistitem('TRUE_FALSE'),
                                            blank=True, null=True, verbose_name=VN_C('active'))
    displayorder = models.SmallIntegerField(
                                            blank=True, null=True, verbose_name=VN_C('display_order'))
    meta_title = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('meta_title'))
    tags = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('tags'))
    picturename1 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('picturename1'))

    class Meta:
        managed = False
        db_table = 'inv_item_categories_v'
        verbose_name = verbose_name_plural = VN_T('inv_item_categories')

    def __str__(self):
        return self.category_name

    def clean(self):
        if not commonutil.hasintvalue(self.category_id):
            self.category_id = get_sequenceval('inv_item_categories_s.nextval')

    def save(self, *args, **kwargs):
        if not commonutil.hasintvalue(self.category_id):
            self.category_id = get_sequenceval('inv_item_categories_s.nextval')
        super().save(*args, **kwargs)

class InvStktakeTypes(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    stktake_type_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('stktake_type_id'), primary_key=True)
    stktake_name = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('stktake_name'))
    stktake_type = models.CharField(max_length=30, blank=False, null=False,
                                       choices=populatelistitem('STOCK_TAKE_TYPE',p_addblank=False),
                                    verbose_name=VN_C('stktake_type'))
    stktake_desc = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('stktake_desc'))
    stktake_frequency = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('stktake_frequency'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    count_method = models.CharField(max_length=20, blank=True, null=True,
                                       choices=populatelistitem('ITEM_COUNT_METHOD',p_addblank=False),
                                    verbose_name=VN_C('count_method'))
    picklist_method = models.CharField(max_length=20, blank=True, null=True,
                                       choices=populatelistitem('ITEM_COUNT_PICK_METHOD',p_addblank=False),
                                       verbose_name=VN_C('picklist_method'))
    schedule_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('schedule_id'))
    sub_location_type = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'SUB_LOCATION_TYPE'),
                                         verbose_name=VN_C('sub_location_type'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    noof_items = models.IntegerField(blank=True, null=True, verbose_name=VN_C('noof_items'))
    last_run_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_run_date'))


    class Meta:
        managed = False
        db_table = 'inv_stktake_types'
        verbose_name = verbose_name_plural = VN_T('inv_stktake_types')

    def __str__(self):
        return self.stktake_type

class InvItemCountHeaders(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_count_header_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                                  verbose_name=VN_C('item_count_header_id'), primary_key=True)
    stktake_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stktake_type_id'))
    count_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('count_date'))
    comments = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('comments'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    stktake_source_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stktake_source_code'))
    stktake_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stktake_phase_code'))
    count_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('count_status'))
    batch_name = models.CharField(max_length=30, blank=False, null=False, verbose_name=VN_C('batch_name'))
    count_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('count_status_date'))
    class Meta:
        managed = False
        db_table = 'inv_item_count_headers'
        verbose_name = verbose_name_plural = VN_T('inv_item_count_headers')

    def __str__(self):
        return str(self.item_count_header_id)


class InvItemCountLines(models.Model):
    stktake_item_sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('stktake_item_sl_no'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    reason_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('reason_desc'))
    crea_reason_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('crea_reason_code_id'))
    count_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('count_status'))
    count_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('count_status_date'))
    stktake_item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stktake_item_id'))
    item_count_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_count_header_id'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    qty_counted = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_counted'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    minus_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('minus_quantity'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_count_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_count_line_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_count_lines'
        verbose_name = verbose_name_plural = VN_T('inv_item_count_lines')

    def __str__(self):
        return str(self.item_count_line_id)




class InvItemOfferHeaders(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    offer_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('offer_name'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    offer_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_description'))
    free_qty_price_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('free_qty_price_type'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    free_qty_at_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_qty_at_price'))
    free_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_qty'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    buy_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('buy_qty'))
    offer_type_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('offer_type_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    offer_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('offer_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_offer_headers'
        verbose_name = verbose_name_plural = VN_T('inv_item_offer_headers')

    def __str__(self):
        return str(self.offer_header_id)
        # unique_together = (('group_code'),('promotion_code'),)


class InvItemOfferLines(models.Model):
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    sub_category_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_category_id'))
    category_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('category_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    offer_header_id = models.CharField(max_length=240, blank=True, null=True, editable=False, verbose_name=VN_C('offer_header_id'))
    free_qty_at_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_qty_at_price'))
    free_qty_price_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('free_qty_price_type'))
    free_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_qty'))
    buy_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('buy_qty'))
    free_item_qty_at_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_item_qty_at_price'))
    free_item_qty_price_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('free_item_qty_price_type'))
    free_item_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('free_item_qty'))
    free_item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('free_item_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    offer_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('offer_line_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_offer_lines'
        verbose_name = verbose_name_plural = VN_T('inv_item_offer_lines')

    def __str__(self):
        return str(self.offer_line_id)


class InvItemSerialNumbers(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    create_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('create_type'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    sup_supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sup_supplier_id'))
    cust_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cust_customer_id'))
    out_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('out_date'))
    in_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('in_date'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    grn_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_line_id'))
    dbnote_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('dbnote_line_id'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_line_id'))
    delivery_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('delivery_line_id'))
    order_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_line_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    serial_number_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('serial_number_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_serial_numbers'
        verbose_name = verbose_name_plural = VN_T('inv_item_serial_numbers')

    def __str__(self):
        return str(self.serial_number_id)
        # unique_together = (('iim_item_id','serial_number'),)




class InvManufacturers(models.Model):
    manf_name = models.CharField(max_length=50, blank=False, null=False, unique=True, verbose_name=VN_C('manf_short_name'))
    manf_short_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('manf_short_name'))
    country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('country_code'))
    contact_name = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('contact_name'))
    www = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('www'))
    mobile = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('mobile'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    fax = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('fax'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    address_line1 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('address_line1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    mkuptemp_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,INV_MKUPTEMPLATES_l),
                                      verbose_name=VN_C('mkuptemp_id'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    manf_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('manf_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_manufacturers'
        verbose_name = verbose_name_plural = VN_T('inv_manufacturers')

    def __str__(self):
        return str(self.manf_id)
        # unique_together = (('manf_number'),('manf_name'),)


class InvMkuptempHeaders(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    mkuptemp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('mkuptemp_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_mkuptemp_headers'
        verbose_name = verbose_name_plural = VN_T('inv_mkuptemp_headers')

    def __str__(self):
        return str(self.mkuptemp_id)


class InvOptions(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False,
                                     verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    company_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('company_id'))
    stock_search = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem(None,ITEM_SEARCH_L),
                                    verbose_name=VN_C('stock_search'))
    item_order_by = models.CharField(max_length=100, blank=True, null=True,
                                         choices=populatelistitem(None,ITEM_ORDER_BY_l),
                                     verbose_name=VN_C('item_order_by'))
    item_number = models.CharField(max_length=15, blank=True, null=True,
                                         choices=populatelistitem('ITEM_NUMBERING'),
                                   verbose_name=VN_C('item_number'))
    default_markup = models.DecimalField(max_digits=6, decimal_places=3,blank=True, null=True, verbose_name=VN_C('default_markup'))
    noof_selling_price = models.IntegerField(blank=True, null=True, default=5, verbose_name=VN_C('noof_selling_price'))
    stock_adjustment_reason = models.IntegerField(blank=True, null=True, verbose_name=VN_C('stock_adjustment_reason'))
    manf_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,INV_MANF_L),
                                              verbose_name=VN_C('manf_id'))
    season_code_id = models.IntegerField(blank=True, null=True,  editable=True,
                                         choices=populatelistitem(None,CMN_SEASONS_l),
                                         verbose_name=VN_C('season_code_id'))
    category_id = models.IntegerField(blank=True, null=True,  editable=True,
                                         choices=populatelistitem(None,INV_ITEM_CATEGORIES_l),
                                      verbose_name=VN_C('category_id'))
    sub_category_id = models.IntegerField(blank=True, null=True,  editable=True,
                                         choices=populatelistitem(None,INV_ITEM_SUB_CATEGORIES_l),
                                          verbose_name=VN_C('sub_category_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False,
                                         choices=populatelistitem(None,INV_LOCATIONS_L),
                                                 verbose_name=VN_C('location_id'))
    sub_location = models.CharField(max_length=30, blank=True, null=True,default='SALES',
                                    verbose_name=VN_C('sub_location'))
    primary_sub_location_hint = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem('PRIMARY_SUBLOC_HINT'),
                                                 verbose_name=VN_C('primary_sub_location_hint'))
    req_rcv_sub_location_hint = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem('PRIMARY_SUBLOC_HINT'),
                                                 verbose_name=VN_C('req_rcv_sub_location_hint'))
    printer_id = models.IntegerField(blank=True, null=True, editable=False,
                                         choices=populatelistitem(None,CMN_PRINTERS_L),
                                     verbose_name=VN_C('printer_id'))
    print_output_path = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('print_output_path'))
    printer_copies = models.IntegerField(blank=True, null=True, verbose_name=VN_C('printer_copies'))
    markup_type = models.CharField(max_length=30, blank=True, null=True, default='C',
                                         choices=populatelistitem('MARKUP_TYPE'),
                                   verbose_name=VN_C('markup_type'))
    report_markup_type = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem('MARKUP_TYPE'),
                                          verbose_name=VN_C('report_markup_type'))
    price_break_id = models.IntegerField(blank=True, null=True, editable=False,
                                         choices=populatelistitem(None,INV_PRICEBREAKS_L),
                                         verbose_name=VN_C('price_break_id'))
    price_break_criteria = models.CharField(max_length=30, blank=True, null=True, default='FORMULA',
                                         choices=populatelistitem('PRICE_BREAK_CRITERIA'),
                                            verbose_name=VN_C('price_break_criteria'))
    price_check_hint = models.CharField(max_length=30, blank=True, null=True, default='NOSTOCK',
                                         choices=populatelistitem('PRICE_CHECK_HINT'),
                                                 verbose_name=VN_C('price_check_hint'))
    quantity_format = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem('QTY_FORMAT'),
                                       verbose_name=VN_C('quantity_format'))
    populate_stock_history = models.CharField(max_length=30, blank=True, null=True, default='NONE',
                                         choices=populatelistitem('POPULATE_STOCK_HISTORY'),
                                              verbose_name=VN_C('populate_stock_history'))
    min_qty_formula = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('min_qty_formula'))
    max_qty_formula = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('max_qty_formula'))
    reorder_qty_formula = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('reorder_qty_formula'))
    period_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_header_id'))
    batch_format = models.CharField(max_length=30, blank=True, null=True,
                                         choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'BATCH_FORMAT'),
                                    verbose_name=VN_C('batch_format'))
    uom_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                 verbose_name=VN_C('uom_id'))
    box_uom_id = models.IntegerField(blank=True, null=True, editable=False,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                 verbose_name=VN_C('box_uom_id'))
    single_uom_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                 verbose_name=VN_C('single_uom_id'))
    weight_uom_id = models.DecimalField(max_digits=12, decimal_places=3,blank=True,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                null=True, editable=False, verbose_name=VN_C('weight_uom_id'))
    dimension_uom_id = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                 verbose_name=VN_C('dimension_uom_id'))
    volume_uom_id = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                verbose_name=VN_C('volume_uom_id'))
    volume_divider = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_divider'))
    option_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('option_location_id'))
    option_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('option_type'))
    defualt_picture_name = models.CharField(max_length=1, blank=True, null=True,  default='Y',
                                         choices=populatelistitem('YES_NO'),
                                            verbose_name=VN_C('defualt_picture_name'))
    value_format = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('value_format'))
    prefix_itemnumber = models.CharField(max_length=1, blank=True, null=True, default='N',
                                         choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('prefix_itemnumber'))
    snapshot_all_items = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                          verbose_name=VN_C('snapshot_all_items'))
    ignore_location_attributes = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                                  verbose_name=VN_C('ignore_location_attributes'))
    auto_release_to_web = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                           verbose_name=VN_C('auto_release_to_web'))
    export_all_items = models.CharField(max_length=1, blank=True, null=True, default='N',
                                         choices=populatelistitem('YES_NO'),
                                        verbose_name=VN_C('export_all_items'))
    enable_palleting = models.CharField(max_length=1, blank=True, null=True, default='N',
                                         choices=populatelistitem('YES_NO'),
                                        verbose_name=VN_C('enable_palleting'))
    maintain_minusstock_separately = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                                      verbose_name=VN_C('maintain_minusstock_separately'))
    add_item_to_location = models.CharField(max_length=1, blank=True, null=True, default='Y',
                                         choices=populatelistitem('YES_NO'),
                                            verbose_name=VN_C('add_item_to_location'))
    debit_gl_account_id = models.IntegerField(blank=True, null=True,  editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('debit_gl_account_id'))
    credit_gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('credit_gl_account_id'))
    gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('gl_account_id'))
    balancesheet_gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('balancesheet_gl_account_id'))
    pnl_gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('pnl_gl_account_id'))
    pricevariance_gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('pricevariance_gl_account_id'))
    costofsales_gl_account_id = models.IntegerField(blank=True, null=True,  editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('costofsales_gl_account_id'))
    sales_gl_account_id = models.IntegerField(blank=True, null=True,   editable=True,
                                         choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                              verbose_name=VN_C('sales_gl_account_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    inv_options_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('inv_options_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_options'
        verbose_name = verbose_name_plural = VN_T('inv_options')

    def __str__(self):
        return str(self.inv_options_id)


class InvPriceTypes(models.Model):
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    price_type_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('price_type_id'), primary_key=True)
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    price_type_name = models.CharField(max_length=10, blank=False, null=False, unique=True,
                                       verbose_name=VN_C('price_type_name'))
    min_unit = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('min_unit'))
    price_markup = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                       verbose_name=VN_C('price_markup'))
    currency_code = models.CharField(max_length=10, blank=False, null=False,
                                    choices=populatelistitem(None,CMN_CURRENCIES_L) ,
                                     verbose_name=VN_C('currency_code'))
    price_type_group_code = models.CharField(max_length=30, blank=True, null=True,
                                    choices=populatelistitem('PRICE_TYPE_GROUP_CODE') ,
                                    verbose_name=VN_C('price_type_group_code'))
    price_exltax = models.DecimalField(max_digits=14, decimal_places=3, blank=True, null=True,editable=False,
                                       verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=14, decimal_places=3, blank=True, null=True,editable=False,
                                       verbose_name=VN_C('price_inctax'))
    description = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('description'))

    class Meta:
        managed = False
        db_table = 'inv_price_types'
        verbose_name = verbose_name_plural = VN_T('inv_price_types')

    def __str__(self):
        return self.price_type_name


class InvQuickcodeHeaders(models.Model):
    quickcode_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('quickcode_status_date'))
    quickcode_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('quickcode_status'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    quickcode_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('quickcode_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_quickcode_headers'
        verbose_name = verbose_name_plural = VN_T('inv_quickcode_headers')

    def __str__(self):
        return str(self.quickcode_id)


class InvSimilarItemHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    total_curr_qty = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_curr_qty'))
    long_desc = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('long_desc'))
    similar_item_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('similar_item_category'))
    include_in_po = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('include_in_po'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    similar_item_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('similar_item_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_similar_item_headers'
        verbose_name = verbose_name_plural = VN_T('inv_similar_item_headers')

    def __str__(self):
        return str(self.similar_item_id)


class InvSlocassignBatchs(models.Model):
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    subloc_levels = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_levels'))
    subloc_columns = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_columns'))
    subloc_rows = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_rows'))
    assignment_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('assignment_line_id'))
    assignment_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('assignment_id'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    moveto_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('moveto_qty'))
    record_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('record_type'))
    to_qtyinstock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('to_qtyinstock'))
    to_sub_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('to_sub_location'))
    to_location_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('to_location_name'))
    from_sub_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('from_sub_location'))
    from_location_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('from_location_name'))
    user_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('user_name'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    from_qtyinstock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('from_qtyinstock'))
    to_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('to_sub_location_id'))
    to_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('to_location_id'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    assignment_batch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('assignment_batch_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_slocassign_batchs'
        verbose_name = verbose_name_plural = VN_T('inv_slocassign_batchs')

    def __str__(self):
        return str(self.assignment_batch_id)


class InvSlocassignHeaders(models.Model):
    assigned_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('assigned_to'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    assignment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('assignment_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_slocassign_headers'
        verbose_name = verbose_name_plural = VN_T('inv_slocassign_headers')

    def __str__(self):
        return str(self.assignment_id)


class InvStktakeItems(models.Model):
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_run_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_run_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    stktake_item_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('stktake_item_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_stktake_items'
        verbose_name = verbose_name_plural = VN_T('inv_stktake_items')

    def __str__(self):
        return str(self.stktake_item_id)
        # unique_together = (('stktake_type_id','sl_no'),('item_id','stktake_type_id'),)



class InvSubInventories(models.Model):
    sub_inventory = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('sub_inventory'))
    short_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('short_name'))
    noof_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('noof_units'))
    description = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)

    class Meta:
        managed = False
        db_table = 'inv_sub_inventories'
        verbose_name = verbose_name_plural = VN_T('inv_sub_inventories')

    def __str__(self):
        return str(self.stktake_type_id)


class InvWeeeCharges(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    to_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('to_date'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    from_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('from_date'))
    unit_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_rate'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    name = models.CharField(max_length=50, blank=False, null=False, verbose_name=VN_C('name'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_weee_charges'
        verbose_name = verbose_name_plural = VN_T('inv_weee_charges')

    def __str__(self):
        return self.name




class InvItemSubCategories(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sub_category_id = models.BigIntegerField(blank=False, null=False, editable=True, verbose_name=VN_C('sub_category_id'), primary_key=True)
    iic_category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='iic_category_id')
    sub_category_name = models.CharField(max_length=50,blank=False, null=False, verbose_name=VN_C('sub_category_name'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    sub_category_code = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('sub_category_code'))
    sub_category_markup = models.DecimalField(max_digits=6, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sub_category_markup'))
    take_snapshot = models.CharField(max_length=1, blank=True, null=True, default='N',
                                     choices=populatelistitem('YES_NO'),
                                     verbose_name=VN_C('take_snapshot'))
    picturename = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('picturename'))
    bin_identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bin_identifier'))
    key_words = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('key_words'))
    ebay_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ebay_percent'))
    amazon_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('amazon_percent'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    on_home_page = models.SmallIntegerField( default=0,
                                            choices=populatelistitem('TRUE_FALSE'),
                                            blank=True, null=True, verbose_name=VN_C('on_home_page'))
    active = models.SmallIntegerField( default=1,
                                            choices=populatelistitem('TRUE_FALSE'),
                                            blank=True, null=True, verbose_name=VN_C('active'))
    displayorder = models.SmallIntegerField(blank=True, null=True, verbose_name=VN_C('display_order'))
    meta_title = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('meta_title'))
    tags = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('tags'))
    picturename1 = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('picturename1'))

    class Meta:
        managed = False
        db_table = 'inv_item_sub_categories_v'
        verbose_name = verbose_name_plural = VN_T('inv_item_sub_categories')
        unique_together = (('iic_category_id','sub_category_name'),)

    def __str__(self):
        return "{}-{}".format(self.iic_category_id, self.sub_category_name)

    def clean(self):
        if not commonutil.hasintvalue(self.sub_category_id):
            self.sub_category_id = get_sequenceval('inv_item_sub_categories_s.nextval')

    def save(self, *args, **kwargs):
        if not commonutil.hasintvalue(self.sub_category_id):
            self.category_id = get_sequenceval('inv_item_sub_categories_s.nextval')
        super().save(*args, **kwargs)

class InvMkuptempLines(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    mark_updown = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('mark_updown'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO',''), editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    mkuptemp_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('mkuptemp_line_id'), primary_key=True)
    price_type_id = models.ForeignKey(InvPriceTypes, models.DO_NOTHING, blank=True, null=True, to_field='price_type_id', db_column='price_type_id')
    mkuptemp_id = models.ForeignKey(InvMkuptempHeaders, models.DO_NOTHING, blank=True, null=True, to_field='mkuptemp_id', db_column='mkuptemp_id')

    class Meta:
        managed = False
        db_table = 'inv_mkuptemp_lines'
        verbose_name = verbose_name_plural = VN_T('inv_mkuptemp_lines')

    def __str__(self):
        return str(self.mkuptemp_line_id)
        # unique_together = (('invmkuptempheaders','invpricetypes'),)


class InvPallets(models.Model):
    length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('length'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    quantity = models.IntegerField(blank=True, null=True, verbose_name=VN_C('quantity'))
    height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('height'))
    width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('width'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pallet_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pallet_id'), primary_key=True)
    container_log_id = models.ForeignKey(InvContainerLog, models.DO_NOTHING, blank=True, null=True, to_field='container_log_id', db_column='container_log_id')

    class Meta:
        managed = False
        db_table = 'inv_pallets'
        verbose_name = verbose_name_plural = VN_T('inv_pallets')

    def __str__(self):
        return str(self.pallet_id)
        # unique_together = (('invcontainerlog','pallet_number'),)



class InvSimilarItemLines(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    add_saleshistory = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('add_saleshistory'))
    add_qty = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('add_qty'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    similar_item_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('similar_item_line_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sih_similar_item_id = models.ForeignKey(InvSimilarItemHeaders, models.DO_NOTHING, blank=True, null=True, to_field='similar_item_id', db_column='sih_similar_item_id')

    class Meta:
        managed = False
        db_table = 'inv_similar_item_lines'
        verbose_name = verbose_name_plural = VN_T('inv_similar_item_lines')

    def __str__(self):
        return str(self.price_break_line_id)
        # unique_together = (('invsimilaritemheaders','iim_item_id'),)


class InvItemMasters(models.Model):
    item_number = models.CharField(max_length=50,null=False, blank=False,unique=True,verbose_name=VN_C('item_number'))
    item_name = models.CharField(max_length=100,null=False, blank=False,unique=True,verbose_name=VN_C('item_name'))
    sup_supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True,
                                      to_field='supplier_id', db_column='sup_Supplier_id')
    iic_category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, editable=False,
                                        blank=True, null=True, to_field='category_id', db_column='iic_category_id')
    iisc_sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING,
                                             blank=True, null=True, to_field='sub_category_id',
                                             db_column='iisc_sub_category_id')
    supplier_product_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('supplier_product_code'))
    inner_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inner_qty'))
    case_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('case_unit'))
    pallet_qty = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                     verbose_name=VN_C('pallet_qty'))
    stock_holding_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('stock_holding_unit'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    reorder_qty = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                      verbose_name=VN_C('reorder_qty'))
    min_pb_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_pb_qty'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    alternate_unit_cp = models.DecimalField(max_digits=14, decimal_places=3, blank=True, null=True,
                                            verbose_name=VN_C('alternate_unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    alternate_case_cp = models.DecimalField(max_digits=14, decimal_places=3, blank=True, null=True,
                                            verbose_name=VN_C('alternate_case_cp'))
    short_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('short_desc'))
    im_manf_id = models.IntegerField(blank=True, null=True, editable=True,
                                     choices=populatelistitem(None,INV_MANF_L),
                                     verbose_name=VN_C('im_manf_id'))
    ctc_tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True,
                                        to_field='tax_code_id', db_column='ctc_tax_code_id')
    ccc_id = models.IntegerField(blank=True, null=True, editable=True,
                                 choices=populatelistitem(None,CMN_COMMODITYCODES_l),
                                 verbose_name=VN_C('commodity_code'))
    season_code_id = models.IntegerField(blank=True, null=True, editable=True,
                                         choices=populatelistitem(None,CMN_SEASONS_l),
                                         verbose_name=VN_C('season'))
    ipbh_price_break_id = models.IntegerField(blank=True, null=True, editable=True,
                                              choices=populatelistitem(None,INV_PRICE_BREAK_HEADERS_L),
                                              verbose_name=VN_C('price_break'))
    item_status = models.CharField(max_length=30, blank=True, null=True,
                                   choices=populatelistitem('ITEM_STATUS'),
                                   verbose_name=VN_C('item_status'))

    delivery_charges = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('delivery_charges'))
    supplier_case_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('supplier_case_cp'))
    supplier_unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('supplier_unit_cp'))
    ## starts order tab
    reorder_interval = models.IntegerField(blank=True, null=True, verbose_name=VN_C('reorder_interval'))
    reorder_uomid = models.IntegerField(blank=True, null=True, editable=True,
                                        choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                        verbose_name=VN_C('reorder_uom'))
    virtual_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('virtual_stock'))
    cmc_pc_id = models.BigIntegerField(blank=True, null=True, editable=True,
                                        choices=populatelistitem(None,CMN_CONTAINERS_L),
                                       verbose_name=VN_C('container'))
    gross_case_weight = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_case_weight'))
    net_case_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('net_case_weight'))
    case_length = models.DecimalField(max_digits=9, decimal_places=3, blank=True, null=True,
                                      verbose_name=VN_C('case_length'))
    case_height = models.DecimalField(max_digits=9, decimal_places=3, blank=True, null=True,
                                      verbose_name=VN_C('case_height'))
    case_width = models.DecimalField(max_digits=9, decimal_places=3, blank=True, null=True,
                                     verbose_name=VN_C('case_width'))
    case_volume = models.DecimalField(max_digits=9, decimal_places=3, blank=True, null=True,
                                      verbose_name=VN_C('case_volume'))
    gross_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    net_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('net_unit_weight'))
    unit_height = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_height'))
    unit_width = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_width'))
    unit_length = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_length'))
    unit_volume = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    net_ingredient = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    replenished_from_location = models.IntegerField(blank=True, null=True,
                                        choices=populatelistitem(None,INV_LOCATIONS_L),
                                       verbose_name=VN_C('replenished_from_location'))
    replenishment_options = models.CharField(max_length=30, blank=True, null=True,
                                             choices=populatelistitem('REPLENISHMENT_OPTIONS'),
                                             verbose_name=VN_C('replenishment_options'))
    unit_volumetric_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_volumetric_weight'))
    case_volumetric_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('case_volumetric_weight'))

    volume_uomid = models.IntegerField(blank=True, null=True, editable=False,
                                        choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                       verbose_name=VN_C('volume_uomid'))
    weight_uomid = models.IntegerField(blank=True, null=True, editable=False,
                                        choices=populatelistitem(None,CMN_UNIT_OF_MEASUREMENTS_l),
                                       verbose_name=VN_C('weight_uomid'))
    ## Notes secion
    customer_notes1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('customer_notes1'))
    customer_notes2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('customer_notes2'))
    customer_notes3 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('customer_notes3'))
    supplier_notes1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('supplier_notes1'))
    supplier_notes2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('supplier_notes2'))
    supplier_notes3 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('supplier_notes3'))
    item_specifications = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('item_specifications'))
    item_comment = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('item_comment'))
    key_words = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('key_words'))
    technical_specs = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('technical_specs'))
    long_desc = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('long_desc'))
    ## picture section
    image_hint = models.CharField(max_length=30, blank=True, null=True, default='AVAILABLE', verbose_name=VN_C('image_hint'))
    picturetype = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('picturetype'))
    picturename = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('picturename'))
    picturename1 = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('picturename1'))
    picturename2 = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('picturename2'))
    picturename3 = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('picturename3'))
    technical_specs_file = models.CharField(max_length=240, blank=True, null=True,
                                            verbose_name=VN_C('technical_specs_file'))
    demo_video_file = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('demo_video_file'))

    ## decisions tab
    apply_offer = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  verbose_name=VN_C('apply_offer'))
    publish_to_web = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  verbose_name=VN_C('publish_to_web'))
    enforce_tax_code = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  verbose_name=VN_C('enforce_tax_code'))
    warrantied = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('warrantied'))
    serial_numbered = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('serial_numbered'))
    serviceditem = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('serviceditem'))
    stockable = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('stockable'))
    saleable = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('saleable'))
    purchaseable = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  verbose_name=VN_C('purchaseable'))
    reservable = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                 verbose_name=VN_C('reservable'))
    valuable = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  default='Y', verbose_name=VN_C('valuable'))
    take_snapshot = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO',''), verbose_name=VN_C('take_snapshot'))
    enforce_reorder_qty = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('enforce_reorder_qty'))
    freight = models.CharField(max_length=1, blank=True, null=True,
                               choices=populatelistitem('YES_NO'),
                               verbose_name=VN_C('freight'))
    freight_price_criteria = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('freight_price_criteria'))
    flaginwebexport = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('flaginwebexport'))
    flagindatefrom = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('flagindatefrom'))
    flagindateto = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('flagindateto'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    ## variations
    item_style = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_style'))
    item_colour = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_colour'))
    item_size = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_size'))
    item_fitting = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('item_fitting'))
    whose_for = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('gender_age'))
    uom_id = models.ForeignKey(CmnUnitOfMeasurements, models.DO_NOTHING,
                               blank=True, null=True, to_field='uom_id', db_column='uom_id')
    www_parent_sku = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('parent_sku'))
    www_relationship_type = models.CharField(max_length=100, blank=True, null=True,
                                             verbose_name=VN_C('relationship_type'))
    www_variation_theme = models.CharField(max_length=100, blank=True, null=True,
                                           verbose_name=VN_C('variation_theme'))
    www_package_quantity = models.CharField(max_length=100, blank=True, null=True,
                                            verbose_name=VN_C('package_quantity'))
    www_design_pattern = models.CharField(max_length=100, blank=True, null=True,
                                          verbose_name=VN_C('design_pattern'))
    www_parentage = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('parentage'))
    www_barcode_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('barcode_type'))
    group1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tag1'))
    group2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tag22'))
    group3 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tag33'))
    group4 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tag44'))
    warranty_period = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('warranty_period'))
    web_expedite_flag = models.CharField(max_length=150, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                  verbose_name=VN_C('web_expedite_flag'))
    freight_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('freight_name'))
    instrunction = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('instrunction'))
    ## others section
    last_bought_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_bought_unitcp'))
    average_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('average_unitcp'))
    trading_casecp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trading_casecp'))
    trading_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trading_unitcp'))
    iwc_charge_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('iwc_charge_id'))
    item_dimension = models.CharField(max_length=1, blank=True, null=True, default='N',
                                      choices=populatelistitem('YES_NO', ''), verbose_name=VN_C('item_dimension'))
    item_dimension_type = models.CharField(max_length=30, blank=True, null=True,
                                           verbose_name=VN_C('item_dimension_type'))
    item_class_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_class_category'))
    stock_take_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stock_take_category'))
    item_condition = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_condition'))
    mkuptemp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('mkuptemp_id'))
    default_label_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('default_label_name'))
    external_reference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('external_reference'))
    similar_item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('similar_item_id'))

    similar_item_concated = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('similar_item_concated'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    sales_price_flag = models.CharField(max_length=30, blank=True, null=True, default='CALCULATED', verbose_name=VN_C('sales_price_flag'))
    min_max_cal_type = models.CharField(max_length=30, blank=True, null=True, default='DYNAMIC', verbose_name=VN_C('min_max_cal_type'))
    typical_daily_usage = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('typical_daily_usage'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    sales_location_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sales_location_qty'))
    print_picture = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('print_picture'))
    weighed_item = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('weighed_item'))
    qtyinstock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qtyinstock'))
    opening_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('opening_balance'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    track_usage = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('track_usage'))
    closing_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('closing_balance'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO',''), editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    balancesheet_gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('balancesheet_gl_account_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_id'), primary_key=True)
    goodsin_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('goodsin_location_id'))
    sales_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sales_location_id'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    stp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_id'))
    stp_level1_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level1_id'))
    stp_level2_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level2_id'))
    stp_level3_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level3_id'))
    stp_level4_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level4_id'))
    stp_level5_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level5_id'))
    stp_level6_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stp_level6_id'))
    pnl_gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                            verbose_name=VN_C('pnl_gl_account_id'))
    pricevariance_gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                                      verbose_name=VN_C('pricevariance_gl_account_id'))
    costofsales_gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                                    verbose_name=VN_C('costofsales_gl_account_id'))
    sales_gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                              verbose_name=VN_C('sales_gl_account_id'))
    gac_gl_account_id = models.IntegerField(blank=True, null=True, editable=False,
                                            verbose_name=VN_C('gac_gl_account_id'))
    country_of_manf = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('country_of_manf'))
    country_of_origin = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('country_of_origin'))
    click_and_collect = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                         verbose_name=VN_C('click_and_collect'))
    delivery = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                verbose_name=VN_C('delivery'))
    in_store = models.CharField(max_length=1, blank=True, null=True,
                                   choices=populatelistitem('YES_NO'),
                                verbose_name=VN_C('delivery'))
    primary_barcode = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('primary_barcode'))

    class Meta:
        managed = False
        db_table = 'inv_item_masters_v'
        verbose_name = verbose_name_plural = VN_T('inv_item_masters')

    def __str__(self):
        return self.item_number


class InvItemStatuses(models.Model):
    average_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('average_unitcp'))
    last_bought_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_bought_unitcp'))
    qty_sold = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_sold'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_adjust_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_adjust_date'))
    last_sold_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_sold_date'))
    last_bought_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_bought_date'))
    qty_returned_to_supplier = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_returned_to_supplier'))
    qty_returned_from_customer = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_returned_from_customer'))
    qty_adjusted = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_adjusted'))
    qty_goodsin = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_goodsin'))
    qty_reserved = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved'))
    qty_allocated = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_allocated'))
    qty_inorder = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_inorder'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    last_grn_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_grn_qty'))
    qty_reserved_invoiced = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_invoiced'))
    last_po_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_po_date'))
    last_po_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_po_qty'))
    last_sold_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_sold_qty'))
    qty_reserved_grn = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_grn'))
    qty_reserved_po = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_po'))
    qty_reserved_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_balance'))
    qty_reserved_fulfilled = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_fulfilled'))
    typical_daily_usage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('typical_daily_usage'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    min_max_cal_type = models.CharField(max_length=30, blank=True, null=True, default='DYNAMIC', verbose_name=VN_C('min_max_cal_type'))
    last_year1_sales_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year1_sales_qty'))
    last_year2_sales_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year2_sales_qty'))
    last_year3_sales_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year3_sales_qty'))
    last_year4_sales_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year4_sales_qty'))
    last_year1_purchase_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year1_purchase_qty'))
    last_year2_purchase_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year2_purchase_qty'))
    last_year3_purchase_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year3_purchase_qty'))
    last_year4_purchase_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('last_year4_purchase_qty'))
    ytd_sales_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('ytd_sales_qty'))
    ytd_purchase_qty = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('ytd_purchase_qty'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.OneToOneField(InvItemMasters,models.DO_NOTHING, null=False, blank=False, primary_key=True,
                                   db_column='item_id', to_field='item_id',related_name='item_statuses',
                                   verbose_name=VN_C('item_id'))
    #models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_statuses'
        verbose_name = verbose_name_plural = VN_T('inv_item_statuses')

    def __str__(self):
        return str(self.item_id)

class InvSimilarCategories(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    similar_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('similar_category_id'), primary_key=True)
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, null=True, to_field='sub_category_id', db_column='sub_category_id')

    class Meta:
        managed = False
        db_table = 'inv_similar_categories'
        verbose_name = verbose_name_plural = VN_T('inv_similar_categories')

    def __str__(self):
        return str(self.similar_category_id)


class InvLocations(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    item_snapshot_schedule_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_snapshot_schedule_id'))
    weee_gl_account_id = models.IntegerField(blank=True, null=True, editable=True,
                                             choices=populatelistitem(None,GL_ACCOUNT_CODES_l),
                                             verbose_name=VN_C('weee_gl_account_id'))
    relative_distance = models.IntegerField(blank=True, null=True, verbose_name=VN_C('relative_distance'))
    stockable_area = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('stockable_area'))
    total_area = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_area'))
    length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('length'))
    width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('width'))
    height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('height'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    location_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('location_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    location_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('location_desc'))
    location_name = models.CharField(max_length=100, blank=True, null=True, unique=True, verbose_name=VN_C('location_name'))
    location_number = models.CharField(max_length=5, blank=True, null=True, unique=True, verbose_name=VN_C('location_number'))
    location_region_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('location_region_code'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    location_type = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,LOCATION_TYPE_L),
                                     verbose_name=VN_C('location_type'))
    orig_system_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    location_area_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('location_area_code'))
    location_contact = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('location_contact'))
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('address'))
    city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('city'))
    county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('county'))
    post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('post_code'))
    country_code = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem(None,CMN_COUNTRIES_L),
                                    verbose_name=VN_C('country_code'))
    phone1 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone1'))
    phone2 = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('phone2'))
    fax = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('fax'))
    stockable = models.CharField(max_length=1, blank=True, null=True,
                                     choices=populatelistitem('YES_NO',''), verbose_name=VN_C('stockable'))
    ship_to = models.CharField(max_length=1, blank=True, null=True,
                                     choices=populatelistitem('YES_NO',''), verbose_name=VN_C('ship_to'))
    bill_to = models.CharField(max_length=1, blank=True, null=True,
                                     choices=populatelistitem('YES_NO',''),
                               verbose_name=VN_C('bill_to'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y',
                              choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    currency_code = models.CharField(max_length=5, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_CURRENCIES_L),
                                     verbose_name=VN_C('currency_code'))
    item_sub_location_hint = models.CharField(max_length=30, blank=True, null=True,
                                              choices=populatelistitem('ITEM_SUB_LOCATION_HINT'),
                                              verbose_name=VN_C('item_sub_location_hint'))
    replenish_location_id = models.IntegerField(blank=True, null=True, editable=True, verbose_name=VN_C('replenish_location_id'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=True,
                                      choices=populatelistitem(None,CMN_TAX_CODES_L),
                                      verbose_name=VN_C('tax_code_id'))
    item_snapshot_type = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'ITEM_SNAPSHOT_TYPE',p_addblank=True),
                                          verbose_name=VN_C('item_snapshot_type'))
    purge_snapshot_days = models.IntegerField(blank=True, null=True, verbose_name=VN_C('purge_snapshot_days'))
    location_comment = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('location_comment'))
    take_snapshot = models.CharField(max_length=1, blank=True, null=True, default='N',
                                     choices=populatelistitem('YES_NO',''),
                                     verbose_name=VN_C('take_snapshot'))
    noof_levels = models.IntegerField(blank=True, null=True, verbose_name=VN_C('noof_levels'))
    sub_loc_separator = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('sub_loc_separator'))

    class Meta:
        managed = False
        db_table = 'inv_locations'
        verbose_name = verbose_name_plural = VN_T('inv_locations')

    def __str__(self):
        return self.location_name
        # unique_together = (('location_name'),('location_number'),)


class InvSublocHierarchy(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('name'))
    noofchar = models.IntegerField(blank=True, null=True, verbose_name=VN_C('noofchar'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    hierarchy_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('hierarchy_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'inv_subloc_hierarchy'
        verbose_name = verbose_name_plural = VN_T('inv_subloc_hierarchy')

    def __str__(self):
        return str(self.hierarchy_id)
        # unique_together = (('invlocations','sl_no'),)


class InvSubLocations(models.Model):
    short_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('short_name'))
    sub_location = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('sub_location'))
    sub_location_number = models.CharField(max_length=50, blank=True, null=True, unique=False, verbose_name=VN_C('sub_location_number'))
    description = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('description'))
    noof_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('noof_units'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    relative_distance = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, verbose_name=VN_C('relative_distance'))
    take_snapshot = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO',''), verbose_name=VN_C('take_snapshot'))
    length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('length'))
    width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('width'))
    height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('height'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    hierarchy10 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy10'))
    hierarchy9 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy9'))
    hierarchy8 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy8'))
    hierarchy7 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy7'))
    hierarchy6 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy6'))
    hierarchy5 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy5'))
    hierarchy4 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy4'))
    hierarchy3 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy3'))
    hierarchy2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy2'))
    hierarchy1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hierarchy1'))
    level0_hierarchy = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('level0_hierarchy'))
    total_area = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_area'))
    stockable_area = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('stockable_area'))
    storage_area1 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'STORAGE_AREAS'),
                                     verbose_name=VN_C('storage_area1'))
    storage_area2 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'STORAGE_AREA2'),
                                     verbose_name=VN_C('storage_area2'))
    storage_area3 = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'STORAGE_AREA3'),
                                     verbose_name=VN_C('storage_area3'))
    pallet_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pallet_header_id'))
    pickable = models.CharField(max_length=1, blank=True, null=True, default='Y',choices=populatelistitem('YES_NO'), verbose_name=VN_C('pickable'))
    adjustable = models.CharField(max_length=1, blank=True, null=True, default='Y',choices=populatelistitem('YES_NO'), verbose_name=VN_C('adjustable'))
    stocktake = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('stocktake'))
    sub_loc_group_code = models.CharField(max_length=30, blank=True, null=True,
                                          choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'SUB_LOCATION_GROUP_CODE'),
                                          verbose_name=VN_C('sub_loc_group_code'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    stockable = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'),verbose_name=VN_C('stockable'))
    valuable = models.CharField(max_length=1, blank=True, null=True, default='Y',choices=populatelistitem('YES_NO'), verbose_name=VN_C('valuable'))
    include_stock = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'),verbose_name=VN_C('include_stock'))
    sub_location_type = models.CharField(max_length=30, blank=True, null=True, default='INTERNAL',
                        choices = populatelistitem(None, CMN_LOOKUP_CODES_L, 'SUB_LOCATION_TYPES'),
                                  verbose_name=VN_C('sub_location_type'))
    primary = models.CharField(max_length=1, blank=True, null=True, default='N',
                               choices=populatelistitem('YES_NO'),
                               verbose_name=VN_C('primary'))
    bin = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('bin'))
    aisle = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('aisle'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    sub_location_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('sub_location_id'), primary_key=True)
    il_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=False, null=False, editable=False, to_field='location_id', db_column='il_location_id')

    class Meta:
        managed = False
        db_table = 'inv_sub_locations'
        verbose_name = verbose_name_plural = VN_T('inv_sub_locations')

    def __str__(self):
        return self.sub_location
        # unique_together = (('sub_location_number'),('invlocations','sub_location'),)


class InvPriceBreakHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    price_break_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('price_break_id'), primary_key=True)
    name = models.CharField(max_length=100, blank=False, null=False, unique=True, verbose_name=VN_C('name'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    item_id = models.ForeignKey(InvItemMasters,models.DO_NOTHING, blank=True, null=True,to_field='item_id',db_column='item_id',
                                verbose_name=VN_C('item_id'))
    user_display_text = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('user_display_text'))

    class Meta:
        managed = False
        db_table = 'inv_price_break_headers'
        verbose_name = verbose_name_plural = VN_T('inv_price_break_headers')

    def __str__(self):
        return self.name


class InvPriceBreakLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sales_unit = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('sales_unit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    price_break_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('price_break_line_id'), primary_key=True)
    ipbh_price_break_id = models.ForeignKey(InvPriceBreakHeaders, models.DO_NOTHING, blank=True, null=True, to_field='price_break_id', db_column='ipbh_price_break_id')
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    price_break_source_type = models.CharField(max_length=30, blank=True, null=True,
                                               choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'PRICE_BREAK_SOURCE_TYPE'),
                                               verbose_name=VN_C('price_break_source_type'))
    qty_from_source = models.CharField(max_length=30, blank=True, null=True,
                                        choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'PRICE_BREAK_QUANTITY_SOURCE'),
                                       verbose_name=VN_C('qty_from_source'))
    qty_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_from_plusminus'))
    qty_from_plusminus = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_from_plusminus'))
    qty_to_source = models.CharField(max_length=30, blank=True, null=True,
                                        choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'PRICE_BREAK_QUANTITY_SOURCE'),
                                     verbose_name=VN_C('qty_to_source'))
    qty_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_from_plusminus'))
    qty_to_plusminus = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_to_plusminus'))
    price_break_type = models.CharField(max_length=30, blank=True, null=True,
                                        choices=populatelistitem('PRICE_TYPE'),
                                        verbose_name=VN_C('price_break_type'))
    price_break_value = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_break_value'))
    user_display_text = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('user_display_text'))
    ipt_price_type_id = models.ForeignKey(InvPriceTypes, models.DO_NOTHING, blank=True,
                                          null=True, to_field='price_type_id', db_column='ipt_price_type_id')

    class Meta:
        managed = False
        db_table = 'inv_price_break_lines'
        verbose_name = verbose_name_plural = VN_T('inv_price_break_lines')

    def __str__(self):
        return str(self.price_break_line_id)
        # unique_together = (('invpricebreakheaders','qty_from','qty_to'),)

class InvItemAdjustmentHeaders(models.Model):
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    comments = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('comments'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    adjust_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('adjust_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    adjust_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('adjust_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'inv_item_adjustment_headers'
        verbose_name = verbose_name_plural = VN_T('inv_item_adjustment_headers')

    def __str__(self):
        return str(self.adjust_header_id)

class InvItemAdjustmentLines(models.Model):
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    reason_desc = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('reason_desc'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    qty_adjusted = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                       verbose_name=VN_C('qty_adjusted'))
    # tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    adjust_line_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                            verbose_name=VN_C('adjust_line_id'), primary_key=True)
    iiah_adjust_header_id = models.ForeignKey(InvItemAdjustmentHeaders, models.DO_NOTHING, blank=True,
                                              null=True, to_field='adjust_header_id', db_column='iiah_adjust_header_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True,
                                    related_name='adjustsublocation',
                                        null=True, to_field='sub_location_id', db_column='sub_location_id',
                                        verbose_name=VN_C('sub_location_id'))
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True,
                                        null=True, to_field='location_id', db_column='location_id',
                                    related_name='adjustlocation',
                                   verbose_name=VN_C('location_id'))
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True,
                                        null=True, to_field='item_id', db_column='iim_item_id'
                                   , verbose_name=VN_C('item_id'))

    class Meta:
        managed = False
        db_table = 'inv_item_adjustment_lines'
        verbose_name = VN_T('inv_item_adjustment_lines')

    def __str__(self):
        return str(self.adjust_line_id)


class InvItemMovementHeaders(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    item_movement_category = models.CharField(max_length=30, blank=True, null=True, default='STANDARD', editable=False,
                                              verbose_name=VN_C('item_movement_category'))
    # tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_movement_header_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                                     verbose_name=VN_C('item_movement_header_id'), primary_key=True)
    movement_type = models.CharField(max_length=30, blank=True, null=True, default='INTERNALTOINTERNAL',
                                     verbose_name=VN_C('movement_type'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True,
                                           verbose_name=VN_C('orig_sys_ref_header'))
    source_object = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_object'))
    header_movement_status = models.CharField(max_length=30, blank=True, null=True, editable=False, default='NEW',
                                              verbose_name=VN_C('header_movement_status'))
    header_movement_status_date = models.DateTimeField(blank=True, null=True, editable=False,
                                                       verbose_name=VN_C('header_movement_status_date'))
    item_extloc_lookup_type = models.CharField(max_length=30, blank=True, null=True,
                                               verbose_name=VN_C('item_extloc_lookup_type'))
    issue_ref_no = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('issue_ref_no'))
    issued_to = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('issued_to'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    source_ref_no = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_no'))
    transfered_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('transfered_on'))
    sourced_from = models.CharField(max_length=30, blank=True, null=True,
                                    choices=populatelistitem(None, CMN_LOOKUP_CODES_L, 'ITEM_EXTERNAL_LOCATIONS'),
                                    verbose_name=VN_C('sourced_from'))
    from_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='location_id', db_column='from_location_id',
                                         related_name='movehdrfrom_location',  verbose_name=VN_C('from_location_id'))
    from_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='sub_location_id', db_column='from_sub_location_id',
                                         related_name='movehdrfrom_sublocation',  verbose_name=VN_C('from_sub_location_id'))
    to_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='location_id', db_column='to_location_id',
                                         related_name='movehdrto_location',  verbose_name=VN_C('to_location_id'))
    to_sub_location_id =  models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='sub_location_id', db_column='to_sub_location_id',
                                         related_name='movehdrto_sublocation',  verbose_name=VN_C('to_sub_location_id'))

    class Meta:
        managed = False
        db_table = 'inv_item_movement_headers'
        verbose_name = VN_T('inv_item_movement_headers')

    def __str__(self):
        return self.item_movement_header_id



class InvItemMovementLines(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    rejection_sub_location_id = models.IntegerField(blank=True, null=True, editable=False,
                                                    verbose_name=VN_C('rejection_sub_location_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_movement_line_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                                   verbose_name=VN_C('item_movement_line_id'), primary_key=True)
    iimh_item_movement_header_id = models.ForeignKey(InvItemMovementHeaders, models.DO_NOTHING, blank=True,
                                                     null=True, to_field='item_movement_header_id',
                                                     db_column='iimh_item_movement_header_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='location_id', db_column='location_id',
                                         related_name='moveline_location',  verbose_name=VN_C('location_id'))
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='sub_location_id', db_column='sub_location_id',
                                         related_name='moveline_sublocation',  verbose_name=VN_C('sub_location_id'))
    to_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='location_id', db_column='to_location_id',
                                         related_name='movelineto_location',  verbose_name=VN_C('to_location_id'))
    to_sub_location_id =  models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                         to_field='sub_location_id', db_column='to_sub_location_id',
                                         related_name='movelineto_sublocation',  verbose_name=VN_C('to_sub_location_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    iim_item_id = models.ForeignKey(InvItemMasters,models.DO_NOTHING, blank=False, null=False, editable=False,
                                    to_field='item_id', db_column='iim_item_id', verbose_name=VN_C('item_id'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    reason_for_rejection = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('reason_for_rejection'))
    notes_destination = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes_destination'))
    notes = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes'))
    qty_goodsin = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_goodsin'))
    qty_rejected = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_rejected'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    reason_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('reason_code_id'))
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True,editable=False,  verbose_name=VN_C('orig_sys_ref_line'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True,editable=False,  verbose_name=VN_C('orig_sys_ref_header'))
    source_object = models.CharField(max_length=30, blank=True, null=True, editable=False,verbose_name=VN_C('source_object'))

    class Meta:
        managed = False
        db_table = 'inv_item_movement_lines'
        verbose_name = verbose_name_plural = VN_T('inv_item_movement_lines')

    def __str__(self):
        return str(self.item_movement_line_id)

class PoBuyers(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    approval_limit = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('approval_limit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    po_buyer_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('po_buyer_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'po_buyers'
        verbose_name = verbose_name_plural = VN_T('po_buyers')

    def __str__(self):
        return str(self.po_buyer_id)
        # unique_together = (('buyer_id','supervisor_id'),)


class PriceTemplateHeaders(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    su_name_expression = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('su_name_expression'))
    su_number_expression = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('su_number_expression'))
    add_default_barcode = models.CharField(max_length=1, blank=True, null=True, default='N', choices=populatelistitem('YES_NO',''), verbose_name=VN_C('add_default_barcode'))
    su_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('su_category'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pricetemp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pricetemp_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'price_template_headers'
        verbose_name = verbose_name_plural = VN_T('price_template_headers')

    def __str__(self):
        return str(self.pricetemp_id)
        # unique_together = (('pricetemp_code'),('pricetemp_name'),)


class PriceUpdateitemcpHeaders(models.Model):
    price_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_value'))
    price_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('price_type'))
    header_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('header_status_date'))
    header_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('header_status'))
    all_items = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('all_items'))
    sub_category_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_category_id'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    category_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('category_id'))
    supplier_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('supplier_id'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    query_string = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('query_string'))
    sp1_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp1_value'))
    sp5_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp5_value'))
    sp4_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp4_value'))
    sp3_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp3_value'))
    sp2_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp2_value'))
    sp7_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp7_value'))
    sp6_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp6_value'))
    sp11_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp11_value'))
    sp10_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp10_value'))
    sp9_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp9_value'))
    sp8_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp8_value'))
    updateitem_source = models.CharField(max_length=30, blank=True, null=True, default='COSTPRICE', verbose_name=VN_C('updateitem_source'))
    sp12_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sp12_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    updateitemcp_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('updateitemcp_header_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'price_updateitemcp_headers'
        verbose_name = verbose_name_plural = VN_T('price_updateitemcp_headers')

    def __str__(self):
        return str(self.updateitemcp_header_id)


class SysAttachmentHeaders(models.Model):
    name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('name'))
    default_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('default_text'))
    access_level = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('access_level'))
    attachment_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('attachment_category'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    source_ref2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref2'))
    source_ref1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref1'))
    source_id2 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_id2'))
    source_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_id1'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    attachment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('attachment_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_attachment_headers'
        verbose_name = verbose_name_plural = VN_T('sys_attachment_headers')

    def __str__(self):
        return self.name


class SysAttachmentLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    attachment_line_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                                verbose_name=VN_C('attachment_line_id'), primary_key=True)
    attachment_id = models.ForeignKey(SysAttachmentHeaders,models.DO_NOTHING, blank=False, null=False,
                                      to_field='attachment_id', db_column='attachment_id',
                                      verbose_name=VN_C('attachment_id'))
    name = models.CharField(max_length=30, blank=False, null=False,  verbose_name=VN_C('name'),unique=True)
    enclosedby = models.CharField(max_length=1, blank=True, null=True, default='    ', verbose_name=VN_C('enclosedby'))
    delimiter = models.CharField(max_length=1, blank=True, null=True, default=',', verbose_name=VN_C('delimiter'))
    file_type = models.CharField(max_length=10, blank=True, null=True, default='.csv', verbose_name=VN_C('file_type'))
    file_name = models.FilePathField(max_length=100, path=uploads_path, blank=True, null=True, verbose_name=VN_C('file_name'))
    file_directory = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('file_directory'))
    header_row = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('header_row'))
    orderby_clause = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('orderby_clause'))
    groupby_clause = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('groupby_clause'))
    where_clause = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('where_clause'))
    select_clause = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('select_clause'))
    from_clause = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('from_clause'))
    concatenated_columnlist = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('concatenated_columnlist'))
    line_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('line_text'))
    line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('line_type'))

    class Meta:
        managed = False
        db_table = 'sys_attachment_lines'
        verbose_name = verbose_name_plural = VN_T('sys_attachment_lines')

    def __str__(self):
        return "{} : {}".format(self.attachment_id,self.name)


class SysControlHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    control_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('control_header_id'), primary_key=True)
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    identifier = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('identifier'))
    control_type = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('control_type'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))

    class Meta:
        managed = False
        db_table = 'sys_control_headers'
        verbose_name = verbose_name_plural = VN_T('sys_control_headers')
        unique_together = (('control_type','identifier'),)

    def __str__(self):
        return "{} : {}".format(self.identifier, self.control_type)


class SysControlLines(models.Model):
    param_value = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('param_value'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    program_type = models.CharField(max_length=30, blank=True, null=True, default='FORM', verbose_name=VN_C('program_type'))
    program_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('program_name'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    control_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('control_line_id'), primary_key=True)
    control_header_id = models.ForeignKey(SysControlHeaders, models.DO_NOTHING, blank=False, null=False,
                                             editable=False, to_field='control_header_id',
                                            db_column='control_header_id', verbose_name=VN_C('control_header_id'))
    identifier = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('identifier'))
    control_line_type = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('control_line_type'))

    class Meta:
        managed = False
        db_table = 'sys_control_lines'
        verbose_name = verbose_name_plural = VN_T('sys_control_lines')
        unique_together = (('control_header_id','control_line_type','identifier'),)

    def __str__(self):
        return "{} : {} : {}".format(self.control_header_id, self.identifier, self.control_line_type)


class SysFunctionAudit(models.Model):
    function_name = models.CharField(max_length=200, blank=True, null=True, verbose_name=VN_C('function_name'))
    function_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('function_id'))
    session_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('session_id'))
    out_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('out_date'))
    in_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('in_date'))
    location_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('location_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    user_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('user_name'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    function_audit_id = models.BigIntegerField(primary_key=True, blank=False, null=False, verbose_name=VN_C('function_audit_id'))
    class Meta:
        managed = False
        db_table = 'sys_function_audit'
        verbose_name = verbose_name_plural = VN_T('sys_function_audit')

    def __str__(self):
        return "{}.{}.{}".format(self.user_name,self.in_date,self.function_name)


class SysScheduleJobs(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    what_to_run = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('what_to_run'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('job_id'), primary_key=True)
    job_name= models.CharField(max_length=50, blank=False, null=False, editable=True, unique=True, verbose_name=VN_C('job_name'))
    job_short_name= models.CharField(max_length=50, blank=False, null=False, editable=True, unique=True, verbose_name=VN_C('job_short_name'))

    class Meta:
        managed = False
        db_table = 'sys_schedule_jobs'
        verbose_name = verbose_name_plural = VN_T('sys_schedule_jobs')

    def __str__(self):
        return  "{}:{}".format(self.job_short_name,self.job_name)
        # unique_together = (('job_name'),('job_short_name'),)

class SysScheduleJobParams(models.Model):
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    param_default_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('param_default_type'))
    display = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('display'))
    param_default_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('param_default_value'))
    param_format = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('param_format'))
    param_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('param_type'))
    param_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('param_name'))
    param_prompt = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('param_prompt'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    param_id = models.BigIntegerField(blank=False, null=False, editable=False, primary_key=True, verbose_name=VN_C('param_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_id = models.ForeignKey(SysScheduleJobs,models.DO_NOTHING,blank=False,null=False,to_field='job_id',db_column='job_id',
                               verbose_name=VN_C('job_id'))

    class Meta:
        managed = False
        db_table = 'sys_schedule_job_params'
        verbose_name = verbose_name_plural = VN_T('sys_schedule_job_params')

    def __str__(self):
        return "{}.{}".format(self.sl_no,self.param_name)



class SysJobParamValues(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    paramvalue_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('paramvalue_id'), primary_key=True)
    job_id = models.ForeignKey(SysScheduleJobs, models.DO_NOTHING, blank=True, null=True, to_field='job_id', db_column='job_id')
    param_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('param_id'))
    param_value = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('param_value'))

    class Meta:
        managed = False
        db_table = 'sys_job_param_values'
        verbose_name = verbose_name_plural = VN_T('sys_job_param_values')

    def __str__(self):
        return "{} {} {}".format(self.job_id,self.param_id,self.param_value)


class SysJobQueue(models.Model):
    repeat_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('repeat_unit'))
    report_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_to'))
    schedule_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('schedule_id'))
    queue_category_code = models.CharField(max_length=30, blank=True, null=True, default='GENERAL', verbose_name=VN_C('queue_category_code'))
    queue_type = models.CharField(max_length=30, blank=True, null=True, default='PLSQL', verbose_name=VN_C('queue_type'))
    queue_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('queue_description'))
    queue_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('queue_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email'))
    report_date_criteria = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('report_date_criteria'))
    report_file_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('report_file_name'))
    last_run_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_run_date'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    parameters = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('parameters'))
    increase_date_params = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('increase_date_params'))
    skip_text = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('skip_text'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    program_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('program_source_id'))
    program_source = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('program_source'))
    report_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('report_date_from'))
    program_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('program_name'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    schedule_type = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('schedule_type'))
    repeat = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('repeat'))
    max_times_to_run = models.IntegerField(blank=True, null=True, verbose_name=VN_C('max_times_to_run'))
    run_count = models.IntegerField(blank=True, null=True, verbose_name=VN_C('run_count'))
    job_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('job_text'))
    next_run_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('next_run_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    email_bcc = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('email_bcc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    queue_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('queue_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_job_queue'
        verbose_name = verbose_name_plural = VN_T('sys_job_queue')

    def __str__(self):
        return str(self.queue_id)


class SysLastsavedValues(models.Model):
    lastsaved_value = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('lastsaved_value'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    data_type = models.CharField(max_length=30, blank=True, null=True, default='CHAR', verbose_name=VN_C('data_type'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    saved_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('saved_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_lastsaved_values'
        verbose_name = verbose_name_plural = VN_T('sys_lastsaved_values')

    def __str__(self):
        return str(self.saved_id)


class SysLoggedinsessions(models.Model):
    current_operation = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('current_operation'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    terminal_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('terminal_name'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    last_login_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_login_date'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    parameters = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('parameters'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    session_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('session_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_loggedinsessions'
        verbose_name = verbose_name_plural = VN_T('sys_loggedinsessions')

    def __str__(self):
        return str(self.session_id)


class SysLoginAudit(models.Model):
    session_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('session_id'))
    logoff_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('logoff_date'))
    login_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('login_date'))
    location_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('location_name'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    user_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('user_name'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    login_audit_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('login_audit_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_login_audit'
        verbose_name = verbose_name_plural = VN_T('sys_login_audit')

    def __str__(self):
        return "{}:{}:{}:{}".format(self.user_name,self.location_name,self.login_date,self.logoff_date)


class SysLogHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    log_result = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('log_result'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    log_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('log_header_id'), primary_key=True)
    log_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('log_description'))
    log_type = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('log_type'))
    log_name = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('log_name'))

    class Meta:
        managed = False
        db_table = 'sys_log_headers'
        verbose_name = verbose_name_plural = VN_T('sys_log_headers')
        ordering=['-last_update_date']

    def __str__(self):
        return "{} :{}: {}".format(self.log_name,self.log_description, self.last_update_date)


class SysLogLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    log_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('log_line_id'), primary_key=True)
    object_ref3 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('object_ref3'))
    object_ref2 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('object_ref2'))
    object_ref1 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('object_ref1'))
    object_id3 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('object_id3'))
    object_id2 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('object_id2'))
    object_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('object_id1'))
    object_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('object_name'))
    log_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('log_line_status'))
    log_line_long_desc = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('log_line_long_desc'))
    log_line_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('log_line_desc'))
    log_line_tag = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('log_line_tag'))
    class Meta:
        managed = False
        db_table = 'sys_log_lines'
        verbose_name = verbose_name_plural = VN_T('sys_log_lines')
        ordering = ['-last_update_date','log_line_id']

    def __str__(self):
        return "{} {} {} {}".format(self.log_line_tag,self.object_name,self.log_line_status, self.last_update_date)


class SysPrograms(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    program_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('program_description'))
    program_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('program_category'))
    program_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('program_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    program_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('program_id'), primary_key=True)
    identifier = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('identifier'))
    program_name = models.CharField(max_length=100, blank=True, null=True,  verbose_name=VN_C('identifier'))

    class Meta:
        managed = False
        db_table = 'sys_programs'
        verbose_name = verbose_name_plural = VN_T('sys_programs')

    def __str__(self):
        return "{}:{}".format(self.identifier,self.program_name)


class SysScheduledJobs(models.Model):
    schedule_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('schedule_status_date'))
    schedule_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('schedule_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    scheduler_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('scheduler_name'))
    schedule_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('schedule_name'))
    repeat_string = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('repeat_string'))
    frequency = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('frequency'))
    comments = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('comments'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    repeat_interval = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('repeat_interval'))
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    job_type = models.CharField(max_length=30, blank=True, null=True, default='PLSQL_BLOCK', verbose_name=VN_C('job_type'))
    parameter = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('parameter'))
    job_action = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('job_action'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    runfor_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('runfor_source_id'))
    runfor_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('runfor_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    job_id = models.BigIntegerField(primary_key=True)
    schedule_id = models.BigIntegerField(blank=True,null=False,unique=True)

    class Meta:
        managed = False
        db_table = 'sys_scheduled_jobs'
        ordering = ['-schedule_status_date','job_id']
        verbose_name = verbose_name_plural = VN_T('sys_scheduled_jobs')
        unique_together = (('job_id','schedule_id'),)

    def __str__(self):
        return "{} {} {}".format(self.schedule_status_date, self.scheduler_name , self.schedule_name)


class SysScheduleHeaders(models.Model):
    skip_text = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('skip_text'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    increase_date_params = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('increase_date_params'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    schedule_id = models.BigIntegerField(blank=False, null=False, editable=False, primary_key=True, verbose_name=VN_C('schedule_id'))
    schedule_name= models.CharField(max_length=50, blank=False, null=False, editable=True, unique=True, verbose_name=VN_C('schedule_name'))

    class Meta:
        managed = False
        db_table = 'sys_schedule_headers'
        verbose_name = verbose_name_plural = VN_T('sys_schedule_headers')

    def __str__(self):
        return self.schedule_name


class SysScheduleLines(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    line_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('line_description'))
    year_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('year_to'))
    year_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('year_from'))
    month_to = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('month_to'))
    month_from = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('month_from'))
    hour_to = models.CharField(max_length=8, blank=True, null=True, verbose_name=VN_C('hour_to'))
    hour_from = models.CharField(max_length=8, blank=True, null=True, verbose_name=VN_C('hour_from'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    week_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('week_to'))
    week_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('week_from'))
    days_to = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('days_to'))
    days_from = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('days_from'))
    include_exclude = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('include_exclude'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    schedule_line_id = models.BigIntegerField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_schedule_lines'
        verbose_name = verbose_name_plural = VN_T('sys_schedule_lines')

    def __str__(self):
        return  "{} :{}".format(self.schedule_line_id, self.line_description)


class SysUiregions(models.Model):
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    parent_region_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('parent_region_id'))
    ui_type = models.CharField(max_length=30, blank=True, null=True, default='VB.net', verbose_name=VN_C('ui_type'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    inherit_to = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('inherit_to'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    region_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('region_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_uiregions'
        verbose_name = verbose_name_plural = VN_T('sys_uiregions')

    def __str__(self):
        return str(self.region_id)


class SysUiitems(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    item_type = models.CharField(max_length=30, blank=True, null=True, default='ITEM', verbose_name=VN_C('item_type'))
    item_style = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_style'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_id'), primary_key=True)
    region_id = models.ForeignKey(SysUiregions, models.DO_NOTHING, blank=True, null=True, to_field='region_id', db_column='region_id')

    class Meta:
        managed = False
        db_table = 'sys_uiitems'
        verbose_name = verbose_name_plural = VN_T('sys_uiitems')

    def __str__(self):
        return str(self.item_id)
        # unique_together = (('sysuiregions','name'),)


class SysUiitemattrs(models.Model):
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    attribute_value = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute_value'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_attr_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_attr_id'), primary_key=True)
    item_id = models.ForeignKey(SysUiitems, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'sys_uiitemattrs'
        verbose_name = verbose_name_plural = VN_T('sys_uiitemattrs')

    def __str__(self):
        return str(self.item_attr_id)
        # unique_together = (('sysuiitems','attribute_id'),)


class SysUserControls(models.Model):
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    control_type = models.CharField(max_length=30, blank=True, null=True, default='ALLOW', verbose_name=VN_C('control_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    user_control_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('user_control_id'), primary_key=True)
    control_line_id = models.ForeignKey(SysControlLines, models.DO_NOTHING, blank=True, null=True, to_field='control_line_id', db_column='control_line_id')

    class Meta:
        managed = False
        db_table = 'sys_user_controls'
        verbose_name = verbose_name_plural = VN_T('sys_user_controls')

    def __str__(self):
        return "{} :{} : {}".format(self.control_line_id, self.user_control_id, self.control_type)


class SysWorklist(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    worklist_type = models.CharField(max_length=30, blank=True, null=True, default='FYI', verbose_name=VN_C('worklist_type'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    action_text = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('action_text'))
    action_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('action_type'))
    source_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_id2'))
    source_id1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_id1'))
    to_type = models.CharField(max_length=30, blank=True, null=True, default='USER', verbose_name=VN_C('to_type'))
    to_whom = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('to_whom'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    from_whom = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('from_whom'))
    text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('text'))
    source = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source'))
    status_text = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('status_text'))
    status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('status'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    worklist_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('worklist_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'sys_worklist'
        verbose_name = verbose_name_plural = VN_T('sys_worklist')

    def __str__(self):
        return str(self.worklist_id)


class WwwSources(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    date_active_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_to'))
    date_active_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_from'))
    www_source_desc = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('www_source_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    www_source_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('www_source_id'), primary_key=True)

    class Meta:
        managed = False
        db_table = 'www_sources'
        verbose_name = verbose_name_plural = VN_T('www_sources')

    def __str__(self):
        return str(self.www_source_id)


class WwwSubSources(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    date_active_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_to'))
    date_active_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    www_sub_source_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('www_sub_source_id'), primary_key=True)
    country_code = models.ForeignKey(CmnCountries, models.DO_NOTHING, blank=True, null=True, to_field='country_code', db_column='country_code')
    www_source_id = models.ForeignKey(WwwSources, models.DO_NOTHING, blank=True, null=True, to_field='www_source_id', db_column='www_source_id')
    language_code = models.ForeignKey(CmnLanguages, models.DO_NOTHING, blank=True, null=True, to_field='language_code', db_column='language_code')

    class Meta:
        managed = False
        db_table = 'www_sub_sources'
        verbose_name = verbose_name_plural = VN_T('www_sub_sources')

    def __str__(self):
        return str(self.www_sub_source_id)
        # unique_together = (('wwwsources','sub_source_name'),)


class ApInvoiceHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    authorized_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('authorized_by'))
    exchange_rate = models.IntegerField(blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    approved_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('approved_amount'))
    voucher_num = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('voucher_num'))
    invoice_received_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_received_date'))
    grn_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_id'))
    grn_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('grn_date'))
    po_header_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    shipto_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('shipto_location_id'))
    invoice_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_user_id'))
    billto_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('billto_location_id'))
    invoice_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_status'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    trans_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_category'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    paid_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('paid_total'))
    balance_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance_total'))
    gross_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    cpt_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cpt_id'))
    discount_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    invoice_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_date'))
    carriage_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    invoice_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_status_date'))
    file_name = models.FilePathField(max_length=100, path=uploads_path, blank=True, null=True, verbose_name=VN_C('file_name'))
    gross_total_fc = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total_fc'))
    net_total_fc = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total_fc'))
    dbnote_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('dbnote_id'))
    invoice_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_type'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    vat_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    net_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    invoice_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('invoice_currency_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    invoice_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('invoice_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    sup_supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True,
                                      to_field='supplier_id', db_column='sup_Supplier_id')
    invoice_number = models.CharField(max_length=30, blank=False, null=False, unique=True,
                                      verbose_name=VN_C('invoice_number'))

    class Meta:
        managed = False
        db_table = 'ap_invoice_headers'
        verbose_name = verbose_name_plural = VN_T('ap_invoice_headers')

    def __str__(self):
        return self.invoice_number


class ArFreightMasters(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    charge_basis = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('charge_basis'))
    cost_per_item = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cost_per_item'))
    min_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_weight'))
    cost_per_kg = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cost_per_kg'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    tax_code = models.CharField(max_length=3, blank=True, null=True, verbose_name=VN_C('tax_code'))
    login_id = models.CharField(max_length=5, blank=True, null=True, editable=False, verbose_name=VN_C('login_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    freight_charges = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('freight_charges'))
    freight_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('freight_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    freight_code = models.CharField(max_length=5, blank=False, null=False, verbose_name=VN_C('freight_code'), primary_key=True)
    gac_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gac_gl_account_id')

    class Meta:
        managed = False
        db_table = 'ar_freight_masters'
        verbose_name = verbose_name_plural = VN_T('ar_freight_masters')

    def __str__(self):
        return str(self.freight_code)


class CmnBankAccounts(models.Model):
    currency_code = models.CharField(max_length=10, blank=True, null=True,
                                        choices=populatelistitem('', CMN_CURRENCIES_L),
                                     verbose_name=VN_C('currency_code'))
    country_code = models.CharField(max_length=10, blank=True, null=True,
                                    choices=populatelistitem('', CMN_COUNTRIES_L),
                                    verbose_name=VN_C('country_code'))
    branch_used_for = models.CharField(max_length=30, blank=True, null=True,
                                    choices=populatelistitem('BRANCH_USED_FOR', None),
                                       verbose_name=VN_C('branch_used_for'))
    bank_branch_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('bank_branch_county'))
    bank_branch_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('bank_branch_city'))
    branch_allow_payout = models.CharField(max_length=1, blank=True, null=True,
                                           choices=populatelistitem('YES_NO',None),
                                           verbose_name=VN_C('branch_allow_payout'))
    branch_allow_payin = models.CharField(max_length=1, blank=True, null=True,
                                           choices=populatelistitem('YES_NO',None),
                                          verbose_name=VN_C('branch_allow_payin'))
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    branch_phone = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('branch_phone'))
    credit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('credit_amount'))
    debit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('debit_amount'))
    branch_post_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('branch_post_code'))
    branch_address_line1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('branch_address_line1'))
    branch_acctname = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('branch_acctname'))
    iban = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('iban'))
    swift = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('swift'))
    bic = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('bic'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    bank_account_id = models.IntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('bank_account_id'), primary_key=True)
    cb_bank_id = models.ForeignKey(CmnBanks, models.DO_NOTHING, blank=True, null=True, to_field='bank_id', db_column='cb_bank_id')
    gac_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gac_gl_account_id')

    class Meta:
        managed = False
        db_table = 'cmn_bank_accounts'
        verbose_name = verbose_name_plural = VN_T('cmn_bank_accounts')

    def __str__(self):
        return self.branch_acctname
        # unique_together = (('branch_code','branch_acctnumber'),('branch_desc'),)


class GlJeLines(models.Model):
    je_line_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('je_line_status'))
    trans_type = models.CharField(max_length=30, blank=True, null=True, default='JOURNAL', verbose_name=VN_C('trans_type'))
    je_line_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('je_line_decription'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    line_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('line_amount'))
    credit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('credit_amount'))
    debit_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('debit_amount'))
    je_line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('je_line_status_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    je_lines_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('je_lines_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    je_header_id = models.ForeignKey(GlJeHeaders, models.DO_NOTHING, blank=True, null=True, to_field='je_header_id', db_column='je_header_id')

    class Meta:
        managed = False
        db_table = 'gl_je_lines'
        verbose_name = verbose_name_plural = VN_T('gl_je_lines')

    def __str__(self):
        return str(self.je_lines_id)
        # unique_together = (('gljeheaders','sl_no'),)


class InvBom(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    picklist = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('picklist'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    bom_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_category'))
    bom_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_type'))
    bom_action = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_action'))
    parent_bom_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('parent_bom_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    bom_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('bom_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, related_name='invbomitem',
                                blank=True, null=True, to_field='item_id', db_column='item_id')
    parent_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, related_name='invbomparent',
                                       blank=True, null=True, to_field='item_id', db_column='parent_item_id')
    level0_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, related_name='invbomtop',
                                       blank=True, null=True, to_field='item_id', db_column='level0_item_id')

    class Meta:
        managed = False
        db_table = 'inv_bom'
        verbose_name = verbose_name_plural = VN_T('inv_bom')

    def __str__(self):
        return str(self.bom_id)
        # unique_together = (('invitemmasters','bom_level','invitemmasters'),)


class InvItemBatchLines(models.Model):
    barcode = models.IntegerField(blank=True, null=True, verbose_name=VN_C('barcode'))
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('quantity'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    batch_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('batch_line_id'), primary_key=True)
    batch_id = models.ForeignKey(InvItemBatches, models.DO_NOTHING, blank=True, null=True, to_field='batch_id', db_column='batch_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    category_id = models.IntegerField(blank=True, null=True, verbose_name=VN_C('category_id'))
    bom_id = models.IntegerField(blank=True, null=True, verbose_name=VN_C('bom_id'))

    class Meta:
        managed = False
        db_table = 'inv_item_batch_lines'
        verbose_name = verbose_name_plural = VN_T('inv_item_batch_lines')

    def __str__(self):
        return str(self.batch_line_id)


class InvItemDimensions(models.Model):
    end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date'))
    start_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date'))
    dim_sales_criteria = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dim_sales_criteria'))
    dim_stock_update_criteria = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dim_stock_update_criteria'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    dimension_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('dimension_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    dimension_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('dimension_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_dimensions'
        verbose_name = verbose_name_plural = VN_T('inv_item_dimensions')

    def __str__(self):
        return str(self.dimension_id)
        # unique_together = (('invitemmasters'),('dimension_name'),)


class InvItemExtras(models.Model):
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    itemextras_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('itemextras_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_extras'
        verbose_name = verbose_name_plural = VN_T('inv_item_extras')

    def __str__(self):
        return str(self.itemextras_id)
        # unique_together = (('invitemmasters','item_extras_category','item_extras_meaning'),)


class InvItemMultiCategories(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    user_category_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('user_category_desc'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    multi_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('multi_category_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, editable=False, null=True, to_field='sub_category_id', db_column='sub_category_id')

    class Meta:
        managed = False
        db_table = 'inv_item_multi_categories'
        verbose_name = verbose_name_plural = VN_T('inv_item_multi_categories')

    def __str__(self):
        return str(self.multi_category_id)


class InvItemMultiSeasons(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    multi_season_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('multi_season_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    season_code_id = models.ForeignKey(CmnSeasons, models.DO_NOTHING, blank=True, null=True, to_field='season_code_id', db_column='season_code_id')

    class Meta:
        managed = False
        db_table = 'inv_item_multi_seasons'
        verbose_name = verbose_name_plural = VN_T('inv_item_multi_seasons')

    def __str__(self):
        return str(self.multi_season_id)
        # unique_together = (('invitemmasters','cmnseasons'),)


class InvItemPicklist(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    picklist_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('picklist_status_date'))
    picklist_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('picklist_status'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    comments = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('comments'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    parent_item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('parent_item_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    picklist_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('picklist_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_picklist'
        verbose_name = verbose_name_plural = VN_T('inv_item_picklist')

    def __str__(self):
        return str(self.picklist_id)


class InvItemPricehistories(models.Model):
    iim_item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('iim_item_id'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    item_reference = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('item_reference'))
    item_desc = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('item_desc'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    cp_changed = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('cp_changed'))
    cp_changed_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cp_changed_on'))
    cp_change_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cp_change_on'))
    item_list_price = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('item_list_price'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    afterlistprice = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('afterlistprice'))
    aftercostprice = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('aftercostprice'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    item_reorder_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('item_reorder_unit'))
    cp_effectupto = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cp_effectupto'))
    bonus4_type = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('bonus4_type'))
    bonus4_amount = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('bonus4_amount'))
    bonus3_type = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('bonus3_type'))
    bonus3_amount = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('bonus3_amount'))
    bonus2_type = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('bonus2_type'))
    bonus2_amount = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('bonus2_amount'))
    bonus1_type = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('bonus1_type'))
    bonus1_amount = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('bonus1_amount'))
    item_unit_size = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('item_unit_size'))
    suspend_reason = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('suspend_reason'))
    suspend = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('suspend'))
    source_ref_no = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_no'))
    sourced_from = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sourced_from'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    item_cost_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('item_cost_price'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    iip1_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('iip1_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_pricehistories'
        verbose_name = verbose_name_plural = VN_T('inv_item_pricehistories')

    def __str__(self):
        return str(self.iip1_id)


class InvItemSalesUnits(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    attribute2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    print_in_pricelist = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('print_in_pricelist'))
    create_type = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('create_type'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    su_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('su_number'))
    print_in_directory = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('print_in_directory'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    item_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_sub_location_id'))
    su_name = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('su_name'))
    uom_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('uom_id'))
    bin_identifier = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bin_identifier'))
    web_price2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('web_price2'))
    web_price1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('web_price1'))
    web_price4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('web_price4'))
    web_price3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('web_price3'))
    unit_volume = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    gross_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    net_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('net_unit_weight'))
    web_expedite_flag = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('web_expedite_flag'))
    su_category = models.CharField(max_length=30, blank=True, null=True, default='SALESUNIT', verbose_name=VN_C('su_category'))
    freight_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('freight_name'))
    unit_height = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_height'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    unit_volumetric_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_volumetric_weight'))
    unit_length = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_length'))
    unit_width = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_width'))
    pricetemp_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pricetemp_line_id'))
    pricetemp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pricetemp_id'))
    publish_to_web = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('publish_to_web'))
    amazon_asin = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('amazon_asin'))
    markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('markup'))
    price_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_inctax'))
    sp1_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP1 markup'))
    sp1_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP1 IncTax'))
    sp1_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP1 ExlTax'))
    sp2_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP2 markup'))
    sp2_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP2 IncTax'))
    sp2_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP2 ExlTax'))
    sp3_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP3 markup'))
    sp3_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP3 IncTax'))
    sp3_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP3 ExlTax'))
    sp4_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP4 markup'))
    sp4_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP4 IncTax'))
    sp4_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP4 ExlTax'))
    sp5_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP5 markup'))
    sp5_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP5 IncTax'))
    sp5_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('SP5 ExlTax'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    su_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('su_id'), primary_key=True)
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='iim_item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_sales_units'
        verbose_name = verbose_name_plural = VN_T('inv_item_sales_units')

    def __str__(self):
        return str(self.su_id)


class InvQuickcodeLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    item_code = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('item_code'))
    display_item_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('display_item_name'))
    display_sub_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('display_sub_category'))
    display_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('display_category'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    quickcode_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('quickcode_line_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    quickcode_id = models.ForeignKey(InvQuickcodeHeaders, models.DO_NOTHING, blank=True, null=True, to_field='quickcode_id', db_column='quickcode_id')

    class Meta:
        managed = False
        db_table = 'inv_quickcode_lines'
        verbose_name = verbose_name_plural = VN_T('inv_quickcode_lines')

    def __str__(self):
        return str(self.quickcode_line_id)
        # unique_together = (('invquickcodeheaders','invitemmasters'),)


class InvSerialnumTransactions(models.Model):
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    quantity = models.IntegerField(blank=True, null=True, verbose_name=VN_C('quantity'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    transaction_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('transaction_id'), primary_key=True)
    serial_number_id = models.ForeignKey(InvItemSerialNumbers, models.DO_NOTHING, blank=True, null=True, to_field='serial_number_id', db_column='serial_number_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_serialnum_transactions'
        verbose_name = verbose_name_plural = VN_T('inv_serialnum_transactions')

    def __str__(self):
        return str(self.transaction_id)


class PriceUpdateitemcpLines(models.Model):
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    new_basecp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('new_basecp'))
    old_averagecp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_averagecp'))
    old_basecp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_basecp'))
    price_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_value'))
    price_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('price_type'))
    line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('line_status_date'))
    line_status = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('line_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    new_alternateunitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('new_alternateunitcp'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    old_alternateunitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_alternateunitcp'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    new_averagecp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('new_averagecp'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    updateitemcp_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('updateitemcp_line_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    updateitemcp_header_id = models.ForeignKey(PriceUpdateitemcpHeaders, models.DO_NOTHING, blank=True, null=True, to_field='updateitemcp_header_id', db_column='updateitemcp_header_id')

    class Meta:
        managed = False
        db_table = 'price_updateitemcp_lines'
        verbose_name = verbose_name_plural = VN_T('price_updateitemcp_lines')

    def __str__(self):
        return str(self.updateitemcp_line_id)
        # unique_together = (('updateitemcp_line_id','invitemmasters'),)


class PrPricelistLines(models.Model):
    price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    sales_unit = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sales_unit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pricelist_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pricelist_line_id'), primary_key=True)
    pricelist_header_id = models.ForeignKey(PrPricelistHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pricelist_header_id', db_column='pricelist_header_id')
    price_type_id = models.ForeignKey(InvPriceTypes, models.DO_NOTHING, blank=True, null=True, to_field='price_type_id', db_column='price_type_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, null=True, to_field='sub_category_id', db_column='sub_category_id')

    class Meta:
        managed = False
        db_table = 'pr_pricelist_lines'
        verbose_name = verbose_name_plural = VN_T('pr_pricelist_lines')

    def __str__(self):
        return str(self.pricelist_line_id)


class WwwNodes(models.Model):
    language_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('language_code'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    date_active_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_to'))
    date_active_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_active_from'))
    sub_category = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('sub_category'))
    category = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('category'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    www_node_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('www_node_id'), primary_key=True)
    www_source_id = models.ForeignKey(WwwSources, models.DO_NOTHING, blank=True, null=True, to_field='www_source_id', db_column='www_source_id')
    www_sub_source_id = models.ForeignKey(WwwSubSources, models.DO_NOTHING, blank=True, null=True, to_field='www_sub_source_id', db_column='www_sub_source_id')

    class Meta:
        managed = False
        db_table = 'www_nodes'
        verbose_name = verbose_name_plural = VN_T('www_nodes')

    def __str__(self):
        return str(self.www_node_id)
        # unique_together = (('wwwsubsources','source_node_id'),)


class WwwNodeLinks(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    language_code = models.CharField(max_length=10, blank=True, null=True, default='ENG', verbose_name=VN_C('language_code'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, null=True, to_field='sub_category_id', db_column='sub_category_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'www_node_links'
        verbose_name = verbose_name_plural = VN_T('www_node_links')

    def __str__(self):
        return str(self.www_node_id)



class ApInvoiceLines(models.Model):
    tax_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_amount'))
    net_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_amount'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    invoice_amount_exl_tax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_amount_exl_tax'))
    case_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_size'))
    unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    tax_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    discount_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_amount'))
    invoice_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_amount'))
    carriage_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_amount'))
    total_line_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_line_amount'))
    unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('unit'))
    qty_invoiced_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    exchange_rate = models.IntegerField(blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    grn_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_line_id'))
    grn_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_id'))
    po_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_line_id'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    invoice_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_line_status_date'))
    invoice_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_line_status'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    invoice_line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_line_type'))
    total_line_amount_fc = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_line_amount_fc'))
    net_amount_fc = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_amount_fc'))
    invoice_amount_fc = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_amount_fc'))
    tax_line_flag = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('tax_line_flag'))
    dbnote_line_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('dbnote_line_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    invoice_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('invoice_line_id'), primary_key=True)
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    invoice_id = models.ForeignKey(ApInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_id', db_column='invoice_id')
    item_id = models.ForeignKey(InvItemMasters,models.DO_NOTHING, blank=True, null=True, editable=False,
                                to_field='item_id', db_column='item_id',
                                verbose_name=VN_C('item_id'))
    sl_no = models.IntegerField(blank=False,null=False,verbose_name=VN_C('sl_no'))
    class Meta:
        managed = False
        db_table = 'ap_invoice_lines'
        verbose_name = verbose_name_plural = VN_T('ap_invoice_lines')

    def __str__(self):
        return str(self.invoice_line_id)
        # unique_together = (('apinvoiceheaders','sl_no'),)


class AuditStockHistory(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    avg_sold_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('avg_sold_qty'))
    no_of_days = models.IntegerField(blank=True, null=True, verbose_name=VN_C('no_of_days'))
    stock_soldout_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('stock_soldout_date'))
    stock_in_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('stock_in_date'))
    item_name = models.CharField(max_length=100, blank=False, null=False, verbose_name=VN_C('item_name'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'audit_stock_history'
        verbose_name = verbose_name_plural = VN_T('audit_stock_history')

    def __str__(self):
        return str(self.invoice_line_id)


class CmnBankCheques(models.Model):
    update_source = models.CharField(max_length=20, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    cheque_no_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cheque_no_to'))
    date_issued = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_issued'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cba_bank_account_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cba_bank_account_id'), primary_key=True)
    cba_bank_account_id = models.ForeignKey(CmnBankAccounts, models.DO_NOTHING, blank=True, null=True, to_field='bank_account_id', db_column='cba_bank_account_id')

    class Meta:
        managed = False
        db_table = 'cmn_bank_cheques'
        verbose_name = verbose_name_plural = VN_T('cmn_bank_cheques')

    def __str__(self):
        return str(self.cba_bank_account_id)
        # unique_together = (('cmnbankaccounts','cheque_no_from'),)


class CmnPayments(models.Model):
    card_expiration_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiration_date'))
    card_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_number'))
    card_holder_name = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_holder_name'))
    payment_card_types = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_card_types'))
    check_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('check_number'))
    payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount'))
    payment_amount_out = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount_out'))
    payment_amount_in = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount_in'))
    source_object_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('source_object_id'))
    source_object = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source_object'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    payment_category_code = models.CharField(max_length=30, blank=True, null=True, default='GENERAL', verbose_name=VN_C('payment_category_code'))
    payment_type = models.CharField(max_length=30, blank=True, null=True, default='DEPOSIT', verbose_name=VN_C('payment_type'))
    payment_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('payment_description'))
    payment_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('payment_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    balance_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance_amount'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    bank_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('bank_currency_code'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    payment_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_date'))
    card_security_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_security_code'))
    card_approval_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_approval_date'))
    card_approval_code = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_approval_code'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cmn_payment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cmn_payment_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods, models.DO_NOTHING, blank=True, null=True, to_field='pmnt_method_id', db_column='pmnt_method_id')
    bank_id = models.ForeignKey(CmnBanks, models.DO_NOTHING, blank=True, null=True, to_field='bank_id', db_column='bank_id')
    bank_account_id = models.ForeignKey(CmnBankAccounts, models.DO_NOTHING, blank=True, null=True, to_field='bank_account_id', db_column='bank_account_id')

    class Meta:
        managed = False
        db_table = 'cmn_payments'
        verbose_name = verbose_name_plural = VN_T('cmn_payments')

    def __str__(self):
        return str(self.cmn_payment_id)


class CmnPrinterMatrix(models.Model):
    destype = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('destype'))
    desformat = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('desformat'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    matrx_source_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('matrx_source_id1'))
    matrix_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('matrix_source_id'))
    matrix_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('matrix_source'))
    preview_mode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('preview_mode'))
    execution_mode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('execution_mode'))
    output_directory = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('output_directory'))
    batch_mode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_mode'))
    copies = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('copies'))
    show_output = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('show_output'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    print_matrix_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('print_matrix_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    printer_id = models.ForeignKey(CmnPrinters, models.DO_NOTHING, blank=True, null=True, to_field='printer_id', db_column='printer_id')
    program_id = models.ForeignKey(SysPrograms, models.DO_NOTHING, blank=True, null=True, to_field='program_id', db_column='program_id')
    terminal_id = models.ForeignKey(CmnTerminals, models.DO_NOTHING, blank=True, null=True, to_field='terminal_id', db_column='terminal_id')

    class Meta:
        managed = False
        db_table = 'cmn_printer_matrix'
        verbose_name = verbose_name_plural = VN_T('cmn_printer_matrix')

    def __str__(self):
        return str(self.print_matrix_id)


class CmnTaxBreakups(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    ctb_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ctb_percent'))
    ctb_recoverable = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('ctb_recoverable'))
    ctb_name = models.CharField(max_length=30, blank=True, null=True, unique=True, verbose_name=VN_C('ctb_name'))
    ctb_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ctb_desc'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    ctb_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('ctb_id'), primary_key=True)
    ctc_tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='ctc_tax_code_id')

    class Meta:
        managed = False
        db_table = 'cmn_tax_breakups'
        verbose_name = verbose_name_plural = VN_T('cmn_tax_breakups')

    def __str__(self):
        return str(self.ctb_id)


class DispatchHeaders(models.Model):
    dispatch_type = models.CharField(max_length=50, blank=True, null=True, default='DISPATCH', verbose_name=VN_C('dispatch_type'))
    notes_to_driver = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('notes_to_driver'))
    delivery_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('delivery_address'))
    notes_to_customer = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('notes_to_customer'))
    contact_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('contact_name'))
    driver_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('driver_name'))
    courier_freight_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('courier_freight_name'))
    veichle_registration = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('veichle_registration'))
    dispatch_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('dispatch_status_date'))
    dispatch_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('dispatch_status'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    attribute2 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute1'))
    special_notes = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('special_notes'))
    dispatch_batch = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('dispatch_batch'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute4 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute3'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    dispatch_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('dispatch_id'), primary_key=True)
    freight_header_id = models.ForeignKey(ArFreightHeaders, models.DO_NOTHING, blank=True, null=True, to_field='freight_header_id', db_column='freight_header_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    dispatch_number = models.CharField(max_length=30, blank=False, null=False, unique=True,
                                       verbose_name=VN_C('dispatch_number'))
    class Meta:
        managed = False
        db_table = 'dispatch_headers'
        verbose_name = verbose_name_plural = VN_T('dispatch_headers')

    def __str__(self):
        return self.dispatch_number


class GlCashingupHeaders(models.Model):
    cashingup_reference = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('cashingup_reference'))
    cashingup_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cashingup_status'))
    gl_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    closing_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('closing_balance'))
    opening_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('opening_balance'))
    cashingup_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cashingup_status_date'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    bank_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_id'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    difference_amount1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('difference_amount1'))
    difference_reason2 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('difference_reason2'))
    difference_reason1 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('difference_reason1'))
    difference_amount2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('difference_amount2'))
    banked_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('banked_amount'))
    actual_cashed_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('actual_cashed_amount'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cashingup_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cashingup_id'), primary_key=True)
    bank_account_id = models.ForeignKey(CmnBankAccounts, models.DO_NOTHING, blank=True, null=True, to_field='bank_account_id', db_column='bank_account_id')

    class Meta:
        managed = False
        db_table = 'gl_cashingup_headers'
        verbose_name = verbose_name_plural = VN_T('gl_cashingup_headers')

    def __str__(self):
        return str(self.cashingup_id)


class GlPaymentHeaders(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    payment_reference = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('payment_reference'))
    gl_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_date'))
    payment_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_status_date'))
    payment_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_status'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_id'), primary_key=True)
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods, models.DO_NOTHING, blank=True, null=True, to_field='pmnt_method_id', db_column='pmnt_method_id')
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')

    class Meta:
        managed = False
        db_table = 'gl_payment_headers'
        verbose_name = verbose_name_plural = VN_T('gl_payment_headers')

    def __str__(self):
        return str(self.payment_id)


class InvItemBarcodes(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    bar_in_directory = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('bar_in_directory'))
    create_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('create_type'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    primary_flag = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('primary_flag'))
    item_sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('item_sl_no'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    price_exltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_inctax'))
    description = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('description'))
    purchase_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('purchase_qty'))
    sales_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('sales_qty'))
    barcode_type = models.CharField(max_length=30, blank=True, null=True, default='EAN13', verbose_name=VN_C('barcode_type'))
    orig_sys_ref_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_name'))
    bar_end_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('bar_end_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    bar_printlabel = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('bar_printlabel'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    barcode = models.CharField(max_length=20, blank=False, null=False, verbose_name=VN_C('barcode'), primary_key=True)
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='iim_item_id')
    iisu_su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='iisu_su_id')

    class Meta:
        managed = False
        db_table = 'inv_item_barcodes_v'
        verbose_name = verbose_name_plural = VN_T('inv_item_barcodes')

    def __str__(self):
        return self.barcode


class InvItemDimensionLines(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    line_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('line_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    dimension_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('dimension_line_id'), primary_key=True)
    dimension_id = models.ForeignKey(InvItemDimensions, models.DO_NOTHING, blank=True, null=True, to_field='dimension_id', db_column='dimension_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_dimension_lines'
        verbose_name = verbose_name_plural = VN_T('inv_item_dimension_lines')

    def __str__(self):
        return str(self.dimension_line_id)
        # unique_together = (('dimension_item_id','invitemmasters'),)


class InvItemFreights(models.Model):
    freight_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('freight_weight'))
    expedite_flag = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('expedite_flag'))
    price2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price2'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    price5 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price5'))
    price4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price4'))
    price3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price3'))
    price6 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price6'))
    price1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price1'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_freight_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('item_freight_id'), primary_key=True)
    freight_header_id = models.ForeignKey(ArFreightHeaders, models.DO_NOTHING, blank=True, null=True, to_field='freight_header_id', db_column='freight_header_id')
    freight_line_id = models.ForeignKey(ArFreightLines, models.DO_NOTHING, blank=True, null=True, to_field='freight_line_id', db_column='freight_line_id')
    country_code = models.ForeignKey(CmnCountries, models.DO_NOTHING, blank=True, null=True, to_field='country_code', db_column='country_code')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='su_id')

    class Meta:
        managed = False
        db_table = 'inv_item_freights'
        verbose_name = verbose_name_plural = VN_T('inv_item_freights')

    def __str__(self):
        return str(self.item_freight_id)


class InvItemPricebreaks(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    pbreak_value_type = models.CharField(max_length=1, blank=True, null=True, default='P', verbose_name=VN_C('pbreak_value_type'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    pbreak_date_to = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pbreak_date_to'))
    pbreak_date_from = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pbreak_date_from'))
    pbreak_value = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('pbreak_value'))
    pbreak_type = models.CharField(max_length=1, blank=True, null=True, default='D', verbose_name=VN_C('pbreak_type'))
    qty_to = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_to'))
    qty_from = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_from'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    id = models.BigIntegerField(blank=False, null=False, verbose_name=VN_C('id'), primary_key=True)
    cuom_uom_id = models.ForeignKey(CmnUnitOfMeasurements, models.DO_NOTHING, blank=True, null=True, to_field='uom_id', db_column='cuom_uom_id')
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='iim_item_id')
    iisu_su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='iisu_su_id')

    class Meta:
        managed = False
        db_table = 'inv_item_pricebreaks'
        verbose_name = verbose_name_plural = VN_T('inv_item_pricebreaks')

    def __str__(self):
        return str(self.id)


class InvItemPrices(models.Model):
    markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('markup'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    price_exltax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_inctax'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='iim_item_id')
    iisu_su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='iisu_su_id')
    ipt_price_type_id = models.ForeignKey(InvPriceTypes, models.DO_NOTHING, blank=True, null=True, to_field='price_type_id', db_column='ipt_price_type_id')

    class Meta:
        managed = False
        db_table = 'inv_item_prices'
        verbose_name = verbose_name_plural = VN_T('inv_item_prices')

    def __str__(self):
        return str(self.id)


class InvLocationPricelists(models.Model):
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    location_pricelist_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('location_pricelist_id'), primary_key=True)
    pricelist_header_id = models.ForeignKey(PrPricelistHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pricelist_header_id', db_column='pricelist_header_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'inv_location_pricelists'
        verbose_name = verbose_name_plural = VN_T('inv_location_pricelists')

    def __str__(self):
        return str(self.location_pricelist_id)
        # unique_together = (('invlocations','prpricelistheaders'),('invlocations','sl_no'),)


class InvRequisitionHeaders(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    requisition_number = models.CharField(max_length=30, blank=False, null=False, unique=True,verbose_name=VN_C('requisition_number'))
    batch_name = models.CharField(max_length=30, blank=False, null=False, unique=True,verbose_name=VN_C('batch_name'))
    requisition_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('requisition_date'))
    need_by_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('need_by_date'))
    requisition_phase_code = models.CharField(max_length=30, blank=True, null=True,
                                              editable=False,
                                              verbose_name=VN_C('requisition_phase_code'))
    requisition_source = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'INV_REQUISITION_SOUIRCE'),
                                        verbose_name=VN_C('requisition_source'))
    requisition_category = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'INV_REQUISITION_CATEGORY'),
                                         verbose_name=VN_C('requisition_category'))
    requisition_type = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'INV_REQUISITION_TYPE'),
                                        verbose_name=VN_C('requisition_type'))
    priority_code = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'PRIORITY_CODE'),
                                     verbose_name=VN_C('priority_code'))
    requested_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('requested_by'))
    requisition_status_date = models.DateTimeField(blank=True, null=True, editable=False,verbose_name=VN_C('requisition_status_date'))
    requisition_status = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('requisition_status'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('active'))
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    picked_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('picked_by'))
    picked_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('picked_date'))
    fulfilled_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('fulfilled_by'))
    fulfilled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('fulfilled_date'))
    cancelled_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    received_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('received_by'))
    received_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('received_date'))
    orig_sys_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_source'))
    orig_sys_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    requisition_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('requisition_id'), primary_key=True)
    from_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING,
                                         blank=True, null=True, to_field='location_id', db_column='from_location_id',
                                         related_name='reqheaderfromlocation')
    to_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING,
                                       blank=True, null=True, to_field='location_id', db_column='to_location_id',
                                       related_name='reqheadertolocation')

    class Meta:
        managed = False
        db_table = 'inv_requisition_headers'
        verbose_name = verbose_name_plural = VN_T('inv_requisition_headers')

    def __str__(self):
        return self.requisition_number
        # unique_together = (('requisition_name'),('requisition_number'),)

    @property
    def cancelled_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.cancelled_by)
        except:
            return ""

    @property
    def fulfilled_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.fulfilled_by)
        except:
            return ""

    @property
    def picked_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.picked_by)
        except:
            return ""
    @property
    def requested_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.requested_by)
        except:
            return ""

    @property
    def received_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.received_by)
        except:
            return ""

class InvRequisitionLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False,
                                   verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False,
                                         verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False,
                                            verbose_name=VN_C('last_update_date'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    requested_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('requested_by'))
    picked_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('picked_by'))
    fulfilled_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('fulfilled_by'))
    received_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('received_by'))
    cancelled_by = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    case_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_size'))
    qty_requested_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_requested_units'))
    qty_fullfilled_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_fullfilled_units'))
    qty_allocated_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_allocated_units'))
    qty_cancelled_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    qty_difference_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_difference_units'))
    qty_received_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_units'))
    qty_balance_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_balance_units'))
    reason_for_difference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('reason_for_difference'))
    hint = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('hint'))
    priority_code = models.CharField(max_length=30, blank=True, null=True,
                                     choices=populatelistitem(None,CMN_LOOKUP_CODES_L,'PRIORITY_CODE'),
                                     verbose_name=VN_C('priority_code'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    need_by_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('need_by_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    requisition_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('requisition_line_status_date'))
    requisition_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('requisition_line_status'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    requisition_id = models.ForeignKey(InvRequisitionHeaders, models.DO_NOTHING, blank=True, null=True,
                                       to_field='requisition_id', db_column='requisition_id')
    requisition_line_id = models.BigIntegerField(blank=False, null=False, editable=False,
                                                 verbose_name=VN_C('requisition_line_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    picked_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                           to_field='location_id', db_column='picked_location_id',
                                           related_name='reqpicklocation',verbose_name=VN_C('picked_location_id'))
    picked_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                               to_field='sub_location_id', db_column='picked_sub_location_id',
                                           related_name='reqpickublocation',verbose_name=VN_C('picked_sub_location_id'))
    from_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING,blank=True, null=True, editable=True,
                                            to_field='location_id',   db_column='from_location_id',
                                           related_name='reqfromlocation', verbose_name=VN_C('from_location_id'))
    to_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, editable=True,
                                           to_field='location_id', db_column='to_location_id',
                                           related_name='reqtolocation', verbose_name=VN_C('to_location_id'))

    to_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING,blank=True,
                                           null=True, editable=False,
                                           to_field='sub_location_id', db_column='to_sub_location_id',
                                           related_name='reqtosublcation',
                                           verbose_name=VN_C('to_sub_location_id'))
    received_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING,blank=True,
                                                 null=True, editable=False,
                                                 to_field='sub_location_id', db_column='received_sub_location_id',
                                                 related_name='reqreceivedsublocation',
                                                 verbose_name=VN_C('received_sub_location_id'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    orig_sys_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_source'))
    orig_sys_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref'))

    class Meta:
        managed = False
        db_table = 'inv_requisition_lines'
        verbose_name = verbose_name_plural = VN_T('inv_requisition_lines')

    def __str__(self):
        return str(self.requisition_line_id)

    @property
    def fulfilled_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.fulfilled_by)
        except:
            return ""

    @property
    def picked_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.picked_by)
        except:
            return ""
    @property
    def requested_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.requested_by)
        except:
            return ""

    @property
    def received_by_name(self):
        try:
            return CmnUsers.objects.get(user_id=self.received_by)
        except:
            return ""


class InvSlocassignLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    subloc_levels = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_levels'))
    subloc_columns = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_columns'))
    subloc_rows = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('subloc_rows'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    assignment_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('assignment_line_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    assignment_id = models.ForeignKey(InvSlocassignHeaders, models.DO_NOTHING, blank=True, null=True, to_field='assignment_id', db_column='assignment_id')

    class Meta:
        managed = False
        db_table = 'inv_slocassign_lines'
        verbose_name = verbose_name_plural = VN_T('inv_slocassign_lines')

    def __str__(self):
        return str(self.assignment_line_id)


class InvStocksplitHeaders(models.Model):
    description = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('description'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    grn_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_id'))
    custsplit_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('custsplit_id'))
    batch_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('batch_id'))
    customer_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id1'))
    customer_id2 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id2'))
    customer_id3 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id3'))
    customer_id4 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id4'))
    customer_id5 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id5'))
    customer_id6 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id6'))
    customer_id7 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id7'))
    customer_id8 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id8'))
    customer_id9 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id9'))
    customer_id10 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id10'))
    customer_id11 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id11'))
    customer_id12 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id12'))
    customer_id13 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id13'))
    customer_id14 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id14'))
    customer_id15 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id15'))
    customer_id16 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id16'))
    customer_id17 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id17'))
    customer_id18 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id18'))
    customer_id19 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id19'))
    customer_id20 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id20'))
    customer_id21 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id21'))
    customer_id22 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id22'))
    customer_id23 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id23'))
    customer_id24 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id24'))
    customer_id25 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id25'))
    customer_id26 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id26'))
    customer_id27 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id27'))
    customer_id28 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id28'))
    customer_id29 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id29'))
    customer_id30 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('customer_id30'))
    header_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('header_status'))
    header_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('header_status_date'))
    no_of_customers = models.IntegerField(blank=True, null=True, verbose_name=VN_C('no_of_customers'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    stocksplit_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('stocksplit_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'inv_stocksplit_headers'
        verbose_name = verbose_name_plural = VN_T('inv_stocksplit_headers')

    def __str__(self):
        return str(self.stocksplit_id)



class PriceUpdatespPrices(models.Model):
    old_markup = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_markup'))
    old_price_exltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_price_exltax'))
    old_price_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('old_price_inctax'))
    new_price_exltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('new_price_exltax'))
    new_price_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('new_price_inctax'))
    price_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_value'))
    updateprice_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('updateprice_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    updatesp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('updatesp_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='su_id')
    price_type_id = models.ForeignKey(InvPriceTypes, models.DO_NOTHING, blank=True, null=True, to_field='price_type_id', db_column='price_type_id')
    updateitemcp_line_id = models.ForeignKey(PriceUpdateitemcpLines, models.DO_NOTHING, blank=True, null=True, to_field='updateitemcp_line_id', db_column='updateitemcp_line_id')
    updateitemcp_header_id = models.ForeignKey(PriceUpdateitemcpHeaders, models.DO_NOTHING, blank=True, null=True, to_field='updateitemcp_header_id', db_column='updateitemcp_header_id')

    class Meta:
        managed = False
        db_table = 'price_updatesp_prices'
        verbose_name = verbose_name_plural = VN_T('price_updatesp_prices')

    def __str__(self):
        return str(self.updatesp_id)


class CmnPaymentTrans(models.Model):
    payment_trans_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_trans_amount'))
    payment_trans_amount_out = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_trans_amount_out'))
    payment_trans_amount_in = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_trans_amount_in'))
    source_object_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('source_object_id'))
    source_object = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source_object'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    payment_trans_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('payment_trans_description'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    trans_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_status'))
    trans_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('trans_status_date'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    payment_trans_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_trans_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_trans_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_trans_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    cmn_payment_id = models.ForeignKey(CmnPayments, models.DO_NOTHING, blank=True, null=True, to_field='cmn_payment_id', db_column='cmn_payment_id')

    class Meta:
        managed = False
        db_table = 'cmn_payment_trans'
        verbose_name = verbose_name_plural = VN_T('cmn_payment_trans')

    def __str__(self):
        return str(self.payment_trans_id)


class GlCashingupLines(models.Model):
    payment_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_date'))
    transaction_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('transaction_date'))
    gl_account_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('gl_account_name'))
    pmnt_method = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('pmnt_method'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('user_id'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    diff_reason = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('diff_reason'))
    payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount'))
    difference_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('difference_amount'))
    cashingup_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cashingup_amount'))
    transaction_ref6 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref6'))
    transaction_ref5 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref5'))
    transaction_ref4 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref4'))
    transaction_ref3 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref3'))
    transaction_ref2 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref2'))
    transaction_ref1 = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('transaction_ref1'))
    transaction_batch = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_batch'))
    transaction_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_number'))
    cashingup_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cashingup_line_status_date'))
    cashingup_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cashingup_line_status'))
    transaction_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('transaction_total'))
    cashingup_reference = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('cashingup_reference'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cashingup_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cashingup_line_id'), primary_key=True)
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods, models.DO_NOTHING, blank=True, null=True, to_field='pmnt_method_id', db_column='pmnt_method_id')
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, related_name='glaccountcashing',
                                      blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    cashingup_id = models.ForeignKey(GlCashingupHeaders, models.DO_NOTHING, blank=True, null=True, to_field='cashingup_id', db_column='cashingup_id')
    diff_gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, related_name='diffglaccount',
                                           blank=True, null=True, to_field='gl_account_id', db_column='diff_gl_account_id')

    class Meta:
        managed = False
        db_table = 'gl_cashingup_lines'
        verbose_name = verbose_name_plural = VN_T('gl_cashingup_lines')

    def __str__(self):
        return str(self.cashingup_line_id)
        # unique_together = (('glcashingupheaders','transaction_source','transaction_source_id','transaction_payment_id'),)


class GlPaymentLines(models.Model):
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    payment_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_line_status_date'))
    payment_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_line_status'))
    payout_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payout_amount'))
    payin_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payin_amount'))
    payment_reference = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('payment_reference'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_line_id'), primary_key=True)
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods, models.DO_NOTHING, blank=True, null=True, to_field='pmnt_method_id', db_column='pmnt_method_id')
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    payment_id = models.ForeignKey(GlPaymentHeaders, models.DO_NOTHING, blank=True, null=True, to_field='payment_id', db_column='payment_id')

    class Meta:
        managed = False
        db_table = 'gl_payment_lines'
        verbose_name = verbose_name_plural = VN_T('gl_payment_lines')

    def __str__(self):
        return str(self.payment_line_id)


class HrUserAssignments(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    assignment_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('assignment_status_date'))
    source_ref_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id2'))
    source_ref_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_ref_id1'))
    source_object_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source_object_ref'))
    assignment_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('assignment_status'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    assignment_type = models.CharField(max_length=50, blank=True, null=True, default='PICKING', verbose_name=VN_C('assignment_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    assignment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('assignment_id'), primary_key=True)
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, null=True, to_field='sub_category_id', db_column='sub_category_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    user_id = models.ForeignKey(CmnUsers, models.DO_NOTHING, blank=True, null=True, to_field='user_id', db_column='user_id')

    class Meta:
        managed = False
        db_table = 'hr_user_assignments'
        verbose_name = verbose_name_plural = VN_T('hr_user_assignments')

    def __str__(self):
        return str(self.assignment_id)


class InvItemsalpursumSnap(models.Model):
    pur_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_thisweek'))
    pur_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_year4'))
    pur_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_year3'))
    pur_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_year2'))
    pur_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_lastyear'))
    pur_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_ytd'))
    pur_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_dec'))
    pur_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_nov'))
    pur_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_oct'))
    pur_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_sep'))
    pur_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_aug'))
    pur_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_jul'))
    pur_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_jun'))
    pur_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_may'))
    pur_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_apr'))
    pur_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_mar'))
    pur_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_feb'))
    pur_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_jan'))
    pur_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_lastmonth'))
    pur_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week6'))
    pur_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week5'))
    pur_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week4'))
    pur_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week3'))
    pur_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week2'))
    pur_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_week1'))
    sal_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_thisweek'))
    sal_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_year4'))
    sal_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_year3'))
    sal_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_year2'))
    sal_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_lastyear'))
    sal_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_ytd'))
    sal_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_dec'))
    sal_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_nov'))
    sal_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_oct'))
    sal_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_sep'))
    sal_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_aug'))
    sal_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_jul'))
    sal_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_jun'))
    sal_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_may'))
    sal_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_apr'))
    sal_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_mar'))
    sal_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_feb'))
    sal_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_jan'))
    sal_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_lastmonth'))
    sal_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week6'))
    sal_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week5'))
    sal_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week4'))
    sal_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week3'))
    sal_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week2'))
    sal_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_week1'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    pur_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pur_total'))
    sal_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sal_total'))
    sal_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sal_lasttrandate'))
    pur_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('pur_lasttrandate'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_itemsalpursum_snap'
        verbose_name = verbose_name_plural = VN_T('inv_itemsalpursum_snap')

    def __str__(self):
        return str(self.snapshot_id)


class InvItemSublocGroups(models.Model):
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    assignment_type = models.CharField(max_length=30, blank=True, null=True, default='AUTOMATIC', verbose_name=VN_C('assignment_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    isg_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('isg_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'inv_item_subloc_groups'
        verbose_name = verbose_name_plural = VN_T('inv_item_subloc_groups')

    def __str__(self):
        return str(self.isg_id)
        # unique_together = (('invlocations','invitemmasters','sub_loc_group_code'),)


class InvItemSublocSnap(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    minus_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('minus_quantity'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'inv_item_subloc_snap'
        verbose_name = verbose_name_plural = VN_T('inv_item_subloc_snap')

    def __str__(self):
        return str(self.snapshot_id)


class InvMonhlyreviewValSnap(models.Model):
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    record_value = models.IntegerField(blank=True, null=True, verbose_name=VN_C('record_value'))
    identifier3 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('identifier3'))
    identifier2 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('identifier2'))
    identifier1 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('identifier1'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    snapshot_year = models.IntegerField(blank=True, null=True, verbose_name=VN_C('snapshot_year'))
    snapshot_month = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('snapshot_month'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'inv_monhlyreview_val_snap'
        verbose_name = verbose_name_plural = VN_T('inv_monhlyreview_val_snap')

    def __str__(self):
        return str(self.snapshot_id)



class InvStocksplitLines(models.Model):
    customer_qty30 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty30'))
    line_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('line_status'))
    line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('line_status_date'))
    qty_in_stock_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock_units'))
    grn_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_line_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    item_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_number'))
    case_unit = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_unit'))
    inner_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inner_qty'))
    qty_in_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock'))
    category_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('category_name'))
    sub_category_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('sub_category_name'))
    customer_qty1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty1'))
    customer_qty2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty2'))
    customer_qty3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty3'))
    customer_qty4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty4'))
    customer_qty5 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty5'))
    customer_qty6 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty6'))
    customer_qty7 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty7'))
    customer_qty8 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty8'))
    customer_qty9 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty9'))
    customer_qty10 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty10'))
    customer_qty11 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty11'))
    customer_qty12 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty12'))
    customer_qty13 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty13'))
    customer_qty14 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty14'))
    customer_qty15 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty15'))
    customer_qty16 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty16'))
    customer_qty17 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty17'))
    customer_qty18 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty18'))
    customer_qty19 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty19'))
    customer_qty20 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty20'))
    customer_qty21 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty21'))
    customer_qty22 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty22'))
    customer_qty23 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty23'))
    customer_qty24 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty24'))
    customer_qty25 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty25'))
    customer_qty26 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty26'))
    customer_qty27 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty27'))
    customer_qty28 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty28'))
    customer_qty29 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('customer_qty29'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    stocksplit_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('stocksplit_line_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    stocksplit_id = models.ForeignKey(InvStocksplitHeaders, models.DO_NOTHING, blank=True, null=True, to_field='stocksplit_id', db_column='stocksplit_id')

    class Meta:
        managed = False
        db_table = 'inv_stocksplit_lines'
        verbose_name = verbose_name_plural = VN_T('inv_stocksplit_lines')

    def __str__(self):
        return str(self.stocksplit_line_id)


class InvSublocValSnap(models.Model):
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    close_value_lastbought = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('close_value_lastbought'))
    close_value_average = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('close_value_average'))
    close_value_base = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('close_value_base'))
    movement_value_lastbought = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('movement_value_lastbought'))
    movement_value_average = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('movement_value_average'))
    movement_value_base = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('movement_value_base'))
    open_value_lastbought = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('open_value_lastbought'))
    open_value_average = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('open_value_average'))
    open_value_base = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('open_value_base'))
    groupedby3_value = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('groupedby3_value'))
    groupedby2_value = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('groupedby2_value'))
    groupedby1_value = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('groupedby1_value'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    snapshot_year = models.IntegerField(blank=True, null=True, verbose_name=VN_C('snapshot_year'))
    snapshot_month = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('snapshot_month'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'inv_subloc_val_snap'
        verbose_name = verbose_name_plural = VN_T('inv_subloc_val_snap')

    def __str__(self):
        return str(self.snapshot_id)


class PoHeaders(models.Model):
    po_number = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('po_number'))
    gross_total = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('gross_total'))
    terms1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('terms1'))
    terms2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('terms2'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    agreement_number = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('agreement_number'))
    po_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('po_date'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    order_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_status'))
    order_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('order_status_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    weight_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    container_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('container_id'))
    container_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('container_name'))
    containers_by_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('containers_by_weight'))
    containers_by_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('containers_by_volume'))
    total_net_weight = models.IntegerField(blank=True, null=True, verbose_name=VN_C('total_net_weight'))
    ingredient_total = models.IntegerField(blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    buyer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('buyer_id'))
    salorder_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('salorder_header_id'))
    shipto_contact = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('shipto_contact'))
    shipto_phone = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_phone'))
    shipto_country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shipto_country_code'))
    shipto_post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    shipto_county = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    shipto_city = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    shipto_address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('shipto_address'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    revision_number = models.IntegerField(blank=True, null=True, default=0, verbose_name=VN_C('revision_number'))
    update_stock = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('update_stock'))
    trans_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_category'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    update_stock_on_grn = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('update_stock_on_grn'))
    orig_system_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    needby_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('needby_date'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    po_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('po_type'))
    net_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    vat_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    carriage_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    discount_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    po_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('po_header_id'), primary_key=True)
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    shipto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                           to_field='location_id', db_column='shipto_location_id',related_name='shipto_location')
    billto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                           to_field='location_id', db_column='billto_location_id',related_name='billto_location')
    sup_supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True,related_name='purchaseorders',
                                        to_field='supplier_id', db_column='sup_supplier_id')

    class Meta:
        managed = False
        db_table = 'po_headers'
        verbose_name = verbose_name_plural = VN_T('po_headers')

    def __str__(self):
        return self.po_number


class PoLines(models.Model):
    shipto_address = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('shipto_address'))
    customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('customer_id'))
    revision_number = models.IntegerField(blank=True, null=True, default=0, verbose_name=VN_C('revision_number'))
    qty_invoiced_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, default=1, verbose_name=VN_C('exchange_rate'))
    orig_system_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    line_type = models.CharField(max_length=30, blank=True, null=True, default='ITEM', verbose_name=VN_C('line_type'))
    needby_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('needby_date'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    net_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_price'))
    discount_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_price'))
    tax_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    tax_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    item_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_name'))
    po_line_desc = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('po_line_desc'))
    po_line_notes = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('po_line_notes'))
    qty_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_balance'))
    case_size = models.IntegerField(blank=True, null=True, verbose_name=VN_C('case_size'))
    sup_product_code = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('sup_product_code'))
    net_ingredient = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    order_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    qty_goodsin = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_goodsin'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    qty_reserved = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    gross_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    unit_volume = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    qty_ordered_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_cases'))
    qty_ordered_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_units'))
    qty_allocated = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_allocated'))
    qty_inorder = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_inorder'))
    qty_similar_inorder = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_similar_inorder'))
    qty_similar_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_similar_stock'))
    qty_reserved_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_units'))
    reorder_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('reorder_qty'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    saloder_line_id = models.IntegerField(blank=True, null=True, editable=True, verbose_name=VN_C('saloder_line_id'))
    salorder_header_id = models.IntegerField(blank=True, null=True, editable=True, verbose_name=VN_C('salorder_header_id'))
    qty_free_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_free_units'))
    shipto_contact = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('shipto_contact'))
    shipto_phone = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_phone'))
    shipto_country_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shipto_country_code'))
    shipto_post_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    shipto_county = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    shipto_city = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    po_line_id = models.BigIntegerField(blank=False, null=False, editable=True, verbose_name=VN_C('po_line_id'), primary_key=True)
    gl_account_id = models.ForeignKey(GlAccountCodes, models.DO_NOTHING, blank=True, null=True, to_field='gl_account_id', db_column='gl_account_id')
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    poh_po_header_id = models.ForeignKey(PoHeaders, models.DO_NOTHING, blank=True, null=True,
                                         to_field='po_header_id', db_column='poh_po_header_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True,
                                         to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'po_lines'
        verbose_name = verbose_name_plural = VN_T('po_lines')

    def __str__(self):
        return str(self.po_line_id)

class PoGrnHeaders(models.Model):
    grn_number = models.CharField(max_length=30, blank=False, null=False, unique=True, verbose_name=VN_C('grn_number'))
    total_net_weight = models.IntegerField(blank=True, null=True, verbose_name=VN_C('total_net_weight'))
    ingredient_total = models.IntegerField(blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    grn_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_user_id'))
    landing_cost_percent = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost_percent'))
    landing_cost_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost_total'))
    landing_cost4 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost4'))
    landing_cost3 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost3'))
    landing_cost2 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost2'))
    landing_cost1 = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_cost1'))
    update_base_cost = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('update_base_cost'))
    bu_id = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    orig_system_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_system_ref'))
    ext_po_reference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ext_po_reference'))
    trans_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('trans_category'))
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    update_stock = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('update_stock'))
    grn_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('grn_date'))
    delivery_note_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_note_ref'))
    delivery_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivery_date'))
    received_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('received_date'))
    net_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    vat_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    carriage_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    discount_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    gross_total = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('gross_total'))
    terms1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('terms1'))
    terms2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('terms2'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    grn_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('grn_status'))
    grn_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('grn_status_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    weight_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    container_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('container_id'))
    container_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('container_name'))
    containers_by_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('containers_by_weight'))
    containers_by_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('containers_by_volume'))
    billto_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('billto_location_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    grn_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('grn_id'), primary_key=True)
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    shipto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                           to_field='location_id', db_column='shipto_location_id',related_name='goodsinshipto_location')
    sup_supplier_id =  models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, related_name='goodsins',
                                           to_field='supplier_id', db_column='sup_supplier_id')

    class Meta:
        managed = False
        db_table = 'po_grn_headers'
        verbose_name = verbose_name_plural = VN_T('po_grn_headers')

    def __str__(self):
        return self.grn_number



class PoGrnLines(models.Model):
    discount_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_price'))
    tax_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    delivery_note_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_note_ref'))
    delivery_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivery_date'))
    received_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('received_date'))
    tax_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    item_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_name'))
    grn_line_desc = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('grn_line_desc'))
    grn_line_notes = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('grn_line_notes'))
    qty_ordered_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_cases'))
    qty_ordered_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_units'))
    qty_received_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_cases'))
    qty_received_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_units'))
    case_size = models.IntegerField(blank=True, null=True, verbose_name=VN_C('case_size'))
    sup_product_code = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('sup_product_code'))
    net_ingredient = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    grn_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('grn_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    reason_for_difference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('reason_for_difference'))
    qty_rejected = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_rejected'))
    reason_for_rejection = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('reason_for_rejection'))
    qty_difference = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_difference'))
    rejection_update_stock = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('rejection_update_stock'))
    rejection_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('rejection_sub_location_id'))
    qty_invoiced_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, default=1, verbose_name=VN_C('exchange_rate'))
    qty_goodsin = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_goodsin'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    qty_reserved = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    gross_unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    unit_volume = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    line_type = models.CharField(max_length=30, blank=True, null=True, default='ITEM', verbose_name=VN_C('line_type'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    qty_delivered_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_delivered_cases'))
    qty_delivered_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_delivered_units'))
    delivered_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('delivered_qty'))
    po_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_line_id'))
    net_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_price'))
    landing_unit_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_unit_price'))
    landing_net_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('landing_net_price'))
    qty_reserved_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_units'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    unapproved_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('unapproved_sub_location_id'))
    pallet_number = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('pallet_number'))
    qty_distributed_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_distributed_units'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    grn_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('grn_line_id'), primary_key=True)
    pallet_id = models.ForeignKey(InvPallets, models.DO_NOTHING, blank=True, null=True, to_field='pallet_id', db_column='pallet_id')
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    pgh_grn_id = models.ForeignKey(PoGrnHeaders, models.DO_NOTHING, blank=True, null=True, to_field='grn_id', db_column='pgh_grn_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True,
                                         to_field='item_id', db_column='item_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'po_grn_lines'
        verbose_name = verbose_name_plural = VN_T('po_grn_lines')

    def __str__(self):
        return str(self.grn_line_id)

class ApPaymentLines(models.Model):
    cheque_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cheque_number'))
    invoice_amount_paidcurr = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_amount_paidcurr'))
    invoice_amount_base = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_amount_base'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cancelled_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes'))
    pyment_line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('pyment_line_type'))
    discount_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_amount'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    payment_line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_line_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_line_id'), primary_key=True)
    payment_trans_id = models.ForeignKey(CmnPaymentTrans, models.DO_NOTHING, blank=True, null=True, to_field='payment_trans_id', db_column='payment_trans_id')
    payment_header_id = models.ForeignKey(ApPaymentHeaders, models.DO_NOTHING, blank=True, null=True, to_field='payment_header_id', db_column='payment_header_id')
    invoice_id = models.ForeignKey(ApInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_id', db_column='invoice_id')
    sup_supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, related_name='apinvocies',
                                        to_field='supplier_id', db_column='sup_supplier_id')
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods,models.DO_NOTHING, blank=True,null=True,
                                       to_field='pmnt_method_id', db_column='pmnt_method_id', verbose_name=VN_C('payment_method'))
    payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount'))
    payment_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_status_date'))
    payment_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_status'))

    class Meta:
        managed = False
        db_table = 'ap_payment_lines'
        verbose_name = verbose_name_plural = VN_T('ap_payment_lines')

    def __str__(self):
        return str(self.payment_line_id)
        # unique_together = (('appaymentheaders','sl_no'),)


class ApSupsumSnap(models.Model):
    inv_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_aug'))
    inv_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jul'))
    inv_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jun'))
    inv_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_may'))
    inv_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_apr'))
    inv_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_mar'))
    inv_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_feb'))
    inv_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jan'))
    inv_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_lastmonth'))
    inv_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week6'))
    inv_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week5'))
    inv_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week4'))
    inv_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week3'))
    inv_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week2'))
    inv_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week1'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    pmnt_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_total'))
    inv_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_total'))
    inv_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('inv_lasttrandate'))
    pmnt_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('pmnt_lasttrandate'))
    pmnt_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_thisweek'))
    pmnt_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year4'))
    pmnt_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year3'))
    pmnt_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year2'))
    pmnt_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_lastyear'))
    pmnt_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_ytd'))
    pmnt_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_dec'))
    pmnt_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_nov'))
    pmnt_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_oct'))
    pmnt_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_sep'))
    pmnt_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_aug'))
    pmnt_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jul'))
    pmnt_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jun'))
    pmnt_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_may'))
    pmnt_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_apr'))
    pmnt_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_mar'))
    pmnt_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_feb'))
    pmnt_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jan'))
    pmnt_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_lastmonth'))
    pmnt_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week6'))
    pmnt_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week5'))
    pmnt_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week4'))
    pmnt_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week3'))
    pmnt_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week2'))
    pmnt_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week1'))
    inv_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_thisweek'))
    inv_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year4'))
    inv_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year3'))
    inv_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year2'))
    inv_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_lastyear'))
    inv_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_ytd'))
    inv_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_dec'))
    inv_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_nov'))
    inv_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_oct'))
    inv_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_sep'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='supplier_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'ap_supsum_snap'
        verbose_name = verbose_name_plural = VN_T('ap_supsum_snap')

    def __str__(self):
        return str(self.snapshot_id)


class ArCustsplitLines(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    split_ratio = models.DecimalField(max_digits=5, decimal_places=3,blank=True, null=True, verbose_name=VN_C('split_ratio'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    custsplit_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('custsplit_line_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    custsplit_id = models.ForeignKey(ArCustsplitHeaders, models.DO_NOTHING, blank=True, null=True, to_field='custsplit_id', db_column='custsplit_id')

    class Meta:
        managed = False
        db_table = 'ar_custsplit_lines'
        verbose_name = verbose_name_plural = VN_T('ar_custsplit_lines')

    def __str__(self):
        return str(self.custsplit_line_id)
        # unique_together = (('arcustsplitheaders','arcustomers'),)


class ArCustsumSnap(models.Model):
    pmnt_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_total'))
    inv_total = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_total'))
    inv_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('inv_lasttrandate'))
    pmnt_lasttrandate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('pmnt_lasttrandate'))
    pmnt_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_thisweek'))
    pmnt_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year4'))
    pmnt_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year3'))
    pmnt_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_year2'))
    pmnt_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_lastyear'))
    pmnt_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_ytd'))
    pmnt_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_dec'))
    pmnt_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_nov'))
    pmnt_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_oct'))
    pmnt_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_sep'))
    pmnt_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_aug'))
    pmnt_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jul'))
    pmnt_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jun'))
    pmnt_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_may'))
    pmnt_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_apr'))
    pmnt_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_mar'))
    pmnt_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_feb'))
    pmnt_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_jan'))
    pmnt_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_lastmonth'))
    pmnt_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week6'))
    pmnt_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week5'))
    pmnt_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week4'))
    pmnt_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week3'))
    pmnt_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week2'))
    pmnt_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pmnt_week1'))
    inv_thisweek = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_thisweek'))
    inv_year4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year4'))
    inv_year3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year3'))
    inv_year2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_year2'))
    inv_lastyear = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_lastyear'))
    inv_ytd = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_ytd'))
    inv_dec = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_dec'))
    inv_nov = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_nov'))
    inv_oct = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_oct'))
    inv_sep = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_sep'))
    inv_aug = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_aug'))
    inv_jul = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jul'))
    inv_jun = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jun'))
    inv_may = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_may'))
    inv_apr = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_apr'))
    inv_mar = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_mar'))
    inv_feb = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_feb'))
    inv_jan = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_jan'))
    inv_lastmonth = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_lastmonth'))
    inv_week6 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week6'))
    inv_week5 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week5'))
    inv_week4 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week4'))
    inv_week3 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week3'))
    inv_week2 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week2'))
    inv_week1 = models.DecimalField(max_digits=17, decimal_places=3,blank=True, null=True, verbose_name=VN_C('inv_week1'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    snapshot_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('snapshot_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    snapshot_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('snapshot_id'), primary_key=True)
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')

    class Meta:
        managed = False
        db_table = 'ar_custsum_snap'
        verbose_name = verbose_name_plural = VN_T('ar_custsum_snap')

    def __str__(self):
        return str(self.snapshot_id)


class ArCustItemUploads(models.Model):
    upload_item = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('upload_item'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    price_exltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_inctax'))
    end_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_date_active'))
    start_date_active = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_date_active'))
    web_preference_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('web_preference_code'))
    web_export_hint = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('web_export_hint'))
    upload_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('upload_status'))
    long_desc = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('long_desc'))
    short_desc = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('short_desc'))
    item_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('item_number'))
    www_parentage = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_parentage'))
    www_size_color_map = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('www_size_color_map'))
    www_size_color = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('www_size_color'))
    www_variation_theme = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('www_variation_theme'))
    www_relationship_type = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('www_relationship_type'))
    www_parentsku = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('www_parentsku'))
    www_percentage = models.DecimalField(max_digits=7, decimal_places=3,blank=True, null=True, verbose_name=VN_C('www_percentage'))
    www_barcode = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('www_barcode'))
    max_publish_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_publish_qty'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_upload_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_upload_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    upload_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('upload_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_item_uploads'
        verbose_name = verbose_name_plural = VN_T('ar_cust_item_uploads')

    def __str__(self):
        return str(self.upload_id)


class ArCustBarcodeUploads(models.Model):
    price_exltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_exltax'))
    price_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('price_inctax'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_upload_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_upload_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    upload_barcode_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('upload_barcode_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    su_id = models.ForeignKey(InvItemSalesUnits, models.DO_NOTHING, blank=True, null=True, to_field='su_id', db_column='su_id')
    barcode = models.ForeignKey(InvItemBarcodes, models.DO_NOTHING, blank=True, null=True, to_field='barcode', db_column='barcode')
    upload_id = models.ForeignKey(ArCustItemUploads, models.DO_NOTHING, blank=True, null=True, to_field='upload_id', db_column='upload_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_barcode_uploads'
        verbose_name = verbose_name_plural = VN_T('ar_cust_barcode_uploads')

    def __str__(self):
        return str(self.upload_barcode_id)
        # unique_together = (('arcustitemuploads','invitembarcodes'),)


class ArCustItemExlcategories(models.Model):
    all_categories = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('all_categories'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    include_exclude_type = models.CharField(max_length=30, blank=True, null=True, default='EXCLUDE', verbose_name=VN_C('include_exclude_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    exl_category_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('exl_category_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    category_id = models.ForeignKey(InvItemCategories, models.DO_NOTHING, blank=True, null=True, to_field='category_id', db_column='category_id')
    sub_category_id = models.ForeignKey(InvItemSubCategories, models.DO_NOTHING, blank=True, null=True, to_field='sub_category_id', db_column='sub_category_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_item_exlcategories'
        verbose_name = verbose_name_plural = VN_T('ar_cust_item_exlcategories')

    def __str__(self):
        return str(self.exl_category_id)


class ArCustItemOffers(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('description'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    record_status = models.CharField(max_length=10, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_to'))
    date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('date_from'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    offer_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('offer_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    offer_header_id = models.ForeignKey(InvItemOfferHeaders, models.DO_NOTHING, blank=True, null=True, to_field='offer_header_id', db_column='offer_header_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_item_offers'
        verbose_name = verbose_name_plural = VN_T('ar_cust_item_offers')

    def __str__(self):
        return str(self.offer_id)


class ArCustPaymentMethods(models.Model):
    max_pmnt_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_pmnt_amount'))
    min_pmnt_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_pmnt_amount'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    cpm_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('cpm_id'), primary_key=True)
    cpm_pmnt_method_id = models.ForeignKey(CmnPaymentMethods, models.DO_NOTHING, blank=True, null=True, to_field='pmnt_method_id', db_column='cpm_pmnt_method_id')
    cust_customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='cust_customer_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_payment_methods'
        verbose_name = verbose_name_plural = VN_T('ar_cust_payment_methods')

    def __str__(self):
        return str(self.cpm_id)
        # unique_together = (('arcustomers','cmnpaymentmethods'),)


class ArCustStoreCardses(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    primary_cardholder = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('primary_cardholder'))
    points_balance = models.IntegerField(blank=True, null=True, verbose_name=VN_C('points_balance'))
    points_exchanged = models.IntegerField(blank=True, null=True, verbose_name=VN_C('points_exchanged'))
    points_earned = models.IntegerField(blank=True, null=True, verbose_name=VN_C('points_earned'))
    card_password = models.CharField(max_length=15, blank=True, null=True, verbose_name=VN_C('card_password'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    card_active = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('card_active'))
    card_status = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('card_status'))
    card_expiringon = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiringon'))
    card_issueno = models.IntegerField(blank=True, null=True, verbose_name=VN_C('card_issueno'))
    card_issuedon = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_issuedon'))
    card_holdername = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('card_holdername'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    card_no = models.CharField(max_length=20, blank=False, null=False, verbose_name=VN_C('card_no'), primary_key=True)
    cust_customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='cust_customer_id')

    class Meta:
        managed = False
        db_table = 'ar_cust_store_cardses'
        verbose_name = verbose_name_plural = VN_T('ar_cust_store_cardses')

    def __str__(self):
        return str(self.card_no)


class ArSalesorderHeaders(models.Model):
    end_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_release_date'))
    start_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_release_date'))
    last_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_release_date'))
    release_schedule_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('release_schedule_id'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    ingredient_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    volume_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    weight_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    billto_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('billto_address'))
    total_cost = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_cost'))
    system_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('system_status'))
    billto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_county'))
    shipto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    shipto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    billto_post_code = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_post_code'))
    billto_country = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('billto_country'))
    billto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_city'))
    shipto_country = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shipto_country'))
    shipto_post_code = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('phase_code'))
    one_off_shipto = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('one_off_shipto'))
    one_off_customer = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('one_off_customer'))
    billto_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('billto_email'))
    shipto_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('shipto_email'))
    billto_contact_name = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('billto_contact_name'))
    shipto_contact_name = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('shipto_contact_name'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    needby_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('needby_date'))
    customer_po_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('customer_po_date'))
    customer_po_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_po_number'))
    order_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_user_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delivered_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('delivered_by'))
    delivered_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivered_date'))
    customer_signature_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('customer_signature_date'))
    customer_signature_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('customer_signature_by'))
    transaction_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_phase_code'))
    marketing_source_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('marketing_source_code'))
    packing_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('packing_instructions'))
    shipping_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('shipping_instructions'))
    drop_ship_flag = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('drop_ship_flag'))
    pricelist_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pricelist_header_id'))
    order_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_source'))
    tax_exempt_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tax_exempt_reason_code'))
    tax_exempt_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('tax_exempt_number'))
    tax_exempt_flag = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('tax_exempt_flag'))
    pricing_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('pricing_date'))
    payment_card_types = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_card_types'))
    check_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('check_number'))
    ar_return_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ar_return_reason_code'))
    salcr_group_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('salcr_group_id'))
    sales_person_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sales_person_id'))
    emp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('emp_id'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    deliverto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_customer_id'))
    invoiceto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_contact_id'))
    invoiceto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_customer_id'))
    freight_terms_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_terms_code'))
    freight_carrier_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_carrier_code'))
    shipping_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipping_method_code'))
    partial_shipments_allowed = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('partial_shipments_allowed'))
    card_approval_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_approval_date'))
    card_approval_code = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_approval_code'))
    card_expiration_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiration_date'))
    card_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_number'))
    card_holder_name = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_holder_name'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    order_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('order_status_date'))
    order_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_status'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    cpt_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cpt_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    order_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_type'))
    carriage_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    discount_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    balance_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance_total'))
    gross_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    vat_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    net_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    order_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('order_currency_code'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    cancelled_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    authorized_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('authorized_by'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    order_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('order_date'))
    shipto_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('shipto_address'))
    freight_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_header_id'))
    discount_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('discount_type'))
    freight_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_rate'))
    freight_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_qty'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    order_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('order_header_id'), primary_key=True)
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    payto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='orderpayto',
                                          null=True, to_field='location_id', db_column='payto_location_id')
    shipfrom_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='ordershipfrom' ,
                                             null=True, to_field='location_id', db_column='shipfrom_location_id')
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, related_name='salesorders',
                                    to_field='customer_id', db_column='customer_id')
    order_number = models.CharField(max_length=30,null=False, blank=False,unique=True, verbose_name=VN_C('order_number'))
    class Meta:
        managed = False
        db_table = 'ar_salesorder_headers'
        verbose_name = verbose_name_plural = VN_T('ar_salesorder_headers')

    def __str__(self):
        return self.order_number


class ArSalesorderLines(models.Model):
    qty_requisition_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_requisition_units'))
    uom_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('uom_id'))
    total_line_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_line_amount'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    qty_invoiced_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    qty_cancelled_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    qty_shipped_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_shipped_units'))
    qty_picked_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_picked_units'))
    qty_ordered_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_units'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    returned_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_sub_location_id'))
    returned_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_location_id'))
    picked_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_location_id'))
    offer_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('offer_price_type_id'))
    order_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_price_type_id'))
    item_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_price_type_id'))
    offer_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('offer_unit_sp'))
    order_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('order_unit_sp'))
    item_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_unit_sp'))
    tax_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    saved_net_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('saved_net_amount'))
    saved_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('saved_unit_sp'))
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_line'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    cancelled_reason = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('cancelled_reason'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    discount_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('discount_type'))
    picked_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_sub_location_id'))
    needby_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('needby_date'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    tax_exempt_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tax_exempt_reason_code'))
    tax_exempt_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('tax_exempt_number'))
    tax_exempt_flag = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('tax_exempt_flag'))
    delivery_lead_time = models.IntegerField(blank=True, null=True, verbose_name=VN_C('delivery_lead_time'))
    qty_balance_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_balance_units'))
    credit_order_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('credit_order_line_id'))
    credit_order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('credit_order_header_id'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    order_line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_line_type'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    carriage_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_amount'))
    discount_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_amount'))
    tax_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_amount'))
    net_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_amount'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    qty_in_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock'))
    offer_attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute3'))
    offer_attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute2'))
    offer_attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute1'))
    offer_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('offer_type'))
    offer_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('offer_text'))
    gross_unit_weight = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    unit_volume = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    net_ingredient = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    item_price_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_price_id'))
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    order_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('order_line_status_date'))
    order_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('order_line_status'))
    barcode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('barcode'))
    invoice_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_line_status'))
    unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    t_groupnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_groupnumber'))
    t_batchnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_batchnumber'))
    t_notes2 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notes2'))
    t_notes1 = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notes1'))
    t_transactionlineid = models.CharField(max_length=140, blank=True, null=True, editable=False, verbose_name=VN_C('t_transactionlineid'))
    t_transactionid = models.CharField(max_length=140, blank=True, null=True, editable=False, verbose_name=VN_C('t_transactionid'))
    t_paymentreference = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_paymentreference'))
    t_notestosupplier = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('t_notestosupplier'))
    t_receivefeedback = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('t_receivefeedback'))
    t_paiddate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_paiddate'))
    t_checkedoutdate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_checkedoutdate'))
    t_orderdate = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('t_orderdate'))
    t_paymentmethod = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_paymentmethod'))
    t_linetotal = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_linetotal'))
    t_additionalcharges = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_additionalcharges'))
    t_voucher = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_voucher'))
    t_insurance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_insurance'))
    t_discount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_discount'))
    t_postage = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_postage'))
    t_taxincluded = models.CharField(max_length=1, blank=True, null=True, default='Y', verbose_name=VN_C('t_taxincluded'))
    t_taxamount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_taxamount'))
    t_taxrate = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_taxrate'))
    t_netprice = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_netprice'))
    t_unitpriceexltax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_unitpriceexltax'))
    t_unitpriceinctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_unitpriceinctax'))
    t_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('t_quantity'))
    t_customlabel = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_customlabel'))
    t_itemname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_itemname'))
    t_itemnumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_itemnumber'))
    t_delivertopostcode = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertopostcode'))
    t_delivertocountry = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocountry'))
    t_delivertocounty = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocounty'))
    t_delivertocity = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertocity'))
    t_delivertoaddress3 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress3'))
    t_delivertoaddress2 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress2'))
    t_delivertoaddress1 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoaddress1'))
    t_delivertoemail = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('t_delivertoemail'))
    t_delivertophone = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertophone'))
    t_delivertoname = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_delivertoname'))
    t_buyerpostcode = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyerpostcode'))
    t_buyercountry = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercountry'))
    t_buyercounty = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercounty'))
    t_buyercity = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyercity'))
    t_buyeraddress3 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress3'))
    t_buyeraddress2 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress2'))
    t_buyeraddress1 = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyeraddress1'))
    t_buyeremail = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('t_buyeremail'))
    t_buyerphone = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyerphone'))
    t_buyername = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_buyername'))
    t_username = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_username'))
    t_ordernumber = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_ordernumber'))
    phase_code = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('phase_code'))
    t_linenumber = models.IntegerField(blank=True, null=True, verbose_name=VN_C('t_linenumber'))
    t_cashondeliveryoption = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_cashondeliveryoption'))
    t_postageservice = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('t_postageservice'))
    delivery_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('delivery_status'))
    delivery_reference = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('delivery_reference'))
    qty_delivered_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_delivered_units'))
    delivery_batch = models.CharField(max_length=140, blank=True, null=True, verbose_name=VN_C('delivery_batch'))
    delivery_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivery_date'))
    refund_from_prev_sale = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('refund_from_prev_sale'))
    invoice_unit_sp_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_unit_sp_inctax'))
    unit_tax_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_tax_amount'))
    unknown_item_name = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('unknown_item_name'))
    external_ref1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref1'))
    external_ref2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref2'))
    external_ref3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref3'))
    external_ref4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref4'))
    external_ref5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref5'))
    external_ref6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref6'))
    freight_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_amount'))
    other_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('other_amount'))
    net_total_after_discount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total_after_discount'))
    sales_unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sales_unit_cp'))
    priceover_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('priceover_user_id'))
    discounted_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('discounted_user_id'))
    price_overridden = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('price_overridden'))
    qty_allocated_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_allocated_units'))
    qty_userpicked_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_userpicked_units'))
    t_attribute1 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_attribute1'))
    t_variation = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_variation'))
    t_attribute2 = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('t_attribute2'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    order_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('order_line_id'), primary_key=True)
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True,
                                        to_field='order_header_id', db_column='order_header_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True,
                                        to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'ar_salesorder_lines'
        verbose_name = verbose_name_plural = VN_T('ar_salesorder_lines')

    def __str__(self):
        return str(self.order_line_id)


class ArDeliveryHeaders(models.Model):
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    freight_terms_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_terms_code'))
    freight_carrier_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_carrier_code'))
    shipping_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipping_method_code'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    delivery_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivery_date'))
    cancelled_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    carriage_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    delivery_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('delivery_user_id'))
    ingredient_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    volume_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    weight_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    freight_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_header_id'))
    freight_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_rate'))
    freight_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_qty'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    shipfrom_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('shipfrom_location_id'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delivered_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('delivered_by'))
    delivered_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivered_date'))
    customer_signature_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('customer_signature_date'))
    customer_signature_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('customer_signature_by'))
    packing_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('packing_instructions'))
    shipping_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('shipping_instructions'))
    ar_return_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ar_return_reason_code'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    delivery_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('delivery_header_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')

    class Meta:
        managed = False
        db_table = 'ar_delivery_headers'
        verbose_name = verbose_name_plural = VN_T('ar_delivery_headers')

    def __str__(self):
        return str(self.delivery_header_id)


class ArDeliveryLines(models.Model):
    picked_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_sub_location_id'))
    unit_volume = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    net_ingredient = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    gross_unit_weight = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    barcode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('barcode'))
    qty_cancelled_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    qty_shipped_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_shipped_units'))
    qty_picked_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_picked_units'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    qty_invoiced_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    returned_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_location_id'))
    picked_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_location_id'))
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_line'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    returned_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_sub_location_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    delivery_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('delivery_line_id'), primary_key=True)
    delivery_header_id = models.ForeignKey(ArDeliveryHeaders, models.DO_NOTHING, blank=True, null=True, to_field='delivery_header_id', db_column='delivery_header_id')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')

    class Meta:
        managed = False
        db_table = 'ar_delivery_lines'
        verbose_name = verbose_name_plural = VN_T('ar_delivery_lines')

    def __str__(self):
        return str(self.delivery_line_id)
        # unique_together = (('ardeliveryheaders','sl_no'),)


class ArInvoiceHeaders(models.Model):
    inco_terms = models.CharField(max_length=30, blank=True, null=True, default='EXW', verbose_name=VN_C('inco_terms'))
    total_cost = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_cost'))
    invbatch_group_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invbatch_group_id'))
    delivery_freetext = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('delivery_freetext'))
    number_of_boxes = models.IntegerField(blank=True, null=True, verbose_name=VN_C('number_of_boxes'))
    additional_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('additional_amount'))
    grand_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('grand_total'))
    one_off_customer = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('one_off_customer'))
    one_off_shipto = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('one_off_shipto'))
    billto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_county'))
    copies_printed = models.IntegerField(blank=True, null=True, verbose_name=VN_C('copies_printed'))
    shipto_post_code = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_post_code'))
    shipto_country = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('shipto_country'))
    shipto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_city'))
    shipto_county = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('shipto_county'))
    billto_post_code = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_post_code'))
    billto_country = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('billto_country'))
    billto_city = models.CharField(max_length=40, blank=True, null=True, verbose_name=VN_C('billto_city'))
    billto_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('billto_email'))
    shipto_email = models.EmailField(max_length=254,blank=True, null=True, verbose_name=VN_C('shipto_email'))
    billto_contact_name = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('billto_contact_name'))
    shipto_contact_name = models.CharField(max_length=250, blank=True, null=True, verbose_name=VN_C('shipto_contact_name'))
    shipto_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('shipto_address'))
    invoice_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delivered_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('delivered_by'))
    delivered_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivered_date'))
    customer_signature_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('customer_signature_date'))
    customer_signature_by = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('customer_signature_by'))
    transaction_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_phase_code'))
    marketing_source_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('marketing_source_code'))
    packing_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('packing_instructions'))
    shipping_instructions = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('shipping_instructions'))
    drop_ship_flag = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('drop_ship_flag'))
    ar_return_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ar_return_reason_code'))
    salcr_group_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('salcr_group_id'))
    sales_person_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sales_person_id'))
    emp_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('emp_id'))
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    deliverto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_customer_id'))
    invoiceto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_contact_id'))
    invoiceto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_customer_id'))
    freight_terms_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_terms_code'))
    freight_carrier_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('freight_carrier_code'))
    shipping_method_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('shipping_method_code'))
    partial_shipments_allowed = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('partial_shipments_allowed'))
    tax_exempt_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('tax_exempt_reason_code'))
    tax_exempt_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('tax_exempt_number'))
    tax_exempt_flag = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('tax_exempt_flag'))
    pricing_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('pricing_date'))
    pricelist_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pricelist_header_id'))
    invoice_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_source'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    invoice_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_status_date'))
    invoice_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_status'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    cpt_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('cpt_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    invoice_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_type'))
    carriage_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_total'))
    discount_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    gross_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    vat_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    balance_total = models.DecimalField(max_digits=12, decimal_places=3, blank=True, null=True,
                                      verbose_name=VN_C('balance_total'))

    net_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    invoice_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('invoice_currency_code'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    cancelled_amount = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    authorized_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('authorized_by'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    needby_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('needby_date'))
    customer_po_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('customer_po_date'))
    customer_po_number = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('customer_po_number'))
    invoice_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_user_id'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    discount_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('discount_type'))
    freight_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_header_id'))
    freight_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_rate'))
    freight_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_qty'))
    freight_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('freight_line_id'))
    end_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('end_release_date'))
    start_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('start_release_date'))
    last_release_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_release_date'))
    release_schedule_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('release_schedule_id'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    ingredient_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    volume_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    weight_total = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    billto_address = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('billto_address'))
    credit_invoice_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('credit_invoice_header_id'))
    terminal_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('terminal_id'))
    paid_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('paid_amount'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    invoice_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('invoice_header_id'), primary_key=True)
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    payto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='paytolocation',
                                          null=True, to_field='location_id', db_column='payto_location_id')
    shipfrom_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='shipfromlocation',
                                    null=True, to_field='location_id', db_column='shipfrom_location_id')
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True,
                                    to_field='customer_id', db_column='customer_id', related_name='salesinvoices')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    invoice_number = models.CharField(max_length=30, blank=False, null=False, unique=True,
                                      verbose_name=VN_C('invoice_number'))

    class Meta:
        managed = False
        db_table = 'ar_invoice_headers'
        verbose_name = verbose_name_plural = VN_T('ar_invoice_headers')

    def __str__(self):
        return str(self.invoice_header_id)


class ArInvoiceLines(models.Model):
    su_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('su_id'))
    item_name = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('item_name'))
    credit_item_status_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('credit_item_status_code'))
    credit_inv_action_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('credit_inv_action_code'))
    ar_return_reason_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('ar_return_reason_code'))
    unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    price_overridden = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('price_overridden'))
    discounted_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('discounted_user_id'))
    priceover_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('priceover_user_id'))
    sales_unit_cp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sales_unit_cp'))
    net_total_after_discount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total_after_discount'))
    other_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('other_amount'))
    freight_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('freight_amount'))
    external_ref6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref6'))
    external_ref5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref5'))
    external_ref4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref4'))
    external_ref3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref3'))
    external_ref2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref2'))
    external_ref1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('external_ref1'))
    unknown_item_name = models.CharField(max_length=150, blank=True, null=True, verbose_name=VN_C('unknown_item_name'))
    unit_tax_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_tax_amount'))
    invoice_unit_sp_inctax = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_unit_sp_inctax'))
    refund_from_prev_sale = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('refund_from_prev_sale'))
    picked_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_location_id'))
    picked_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('picked_sub_location_id'))
    saved_net_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('saved_net_amount'))
    offer_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('offer_price_type_id'))
    invoice_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_price_type_id'))
    item_price_type_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_price_type_id'))
    offer_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('offer_unit_sp'))
    invoice_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoice_unit_sp'))
    item_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_unit_sp'))
    tax_rate = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    cancelled_reason = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('cancelled_reason'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    discount_type = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('discount_type'))
    returned_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_sub_location_id'))
    returned_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('returned_location_id'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    invoice_line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_line_type'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    carriage_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('carriage_amount'))
    discount_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_amount'))
    tax_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_amount'))
    net_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_amount'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    qty_in_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock'))
    offer_attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute3'))
    offer_attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute2'))
    offer_attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('offer_attribute1'))
    offer_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('offer_type'))
    offer_text = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('offer_text'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    saved_unit_sp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('saved_unit_sp'))
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_line'))
    orig_sys_ref_header = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    unit_volume = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    net_ingredient = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    gross_unit_weight = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_unit_weight'))
    credit_invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('credit_invoice_line_id'))
    credit_invoice_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('credit_invoice_header_id'))
    barcode = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('barcode'))
    uom_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('uom_id'))
    total_line_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('total_line_amount'))
    qty_ordered_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_units'))
    sales_unit = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sales_unit'))
    qty_invoiced_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    qty_cancelled_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    invoice_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('invoice_line_status_date'))
    qty_shipped_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_shipped_units'))
    qty_picked_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_picked_units'))
    invoice_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('invoice_line_status'))
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    item_price_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_price_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    invoice_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('invoice_line_id'), primary_key=True)
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')
    invoice_header_id = models.ForeignKey(ArInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_header_id', db_column='invoice_header_id')
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    net_total_after_discount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total_after_discount'))
    #item_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True,
                                to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'ar_invoice_lines'
        verbose_name = verbose_name_plural = VN_T('ar_invoice_lines')

    def __str__(self):
        return str(self.invoice_line_id)


class ArItemFulfillment(models.Model):
    invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_line_id'))
    grn_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_line_id'))
    grn_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('grn_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    fulfillment_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('fulfillment_status_date'))
    fulfillment_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('fulfillment_status'))
    qty_cancelled_units = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    qty_invoiced_units = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    qty_fulfilled_units = models.IntegerField(blank=True, null=True, verbose_name=VN_C('qty_fulfilled_units'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    comments = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('comments'))
    invoice_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_header_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    fulfillment_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('fulfillment_id'), primary_key=True)
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'ar_item_fulfillment'
        verbose_name = verbose_name_plural = VN_T('ar_item_fulfillment')

    def __str__(self):
        return str(self.fulfillment_id)


class ArOrderpadHeaders(models.Model):
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    orderpad_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('orderpad_decription'))
    user_id = models.IntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('user_id'))
    orderpad_header_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_header_status_date'))
    orderpad_header_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('orderpad_header_status'))
    orderpad_type = models.CharField(max_length=30, blank=True, null=True, default='SAELS', verbose_name=VN_C('orderpad_type'))
    orderpad_category = models.CharField(max_length=30, blank=True, null=True, default='SALES', verbose_name=VN_C('orderpad_category'))
    orderpad_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_date'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    orig_sys_ref_header = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    invoiceto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_customer_id'))
    deliverto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_customer_id'))
    invoiceto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_contact_id'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    orderpad_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('orderpad_header_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')

    class Meta:
        managed = False
        db_table = 'ar_orderpad_headers'
        verbose_name = verbose_name_plural = VN_T('ar_orderpad_headers')

    def __str__(self):
        return str(self.orderpad_header_id)


class ArOrderpadLines(models.Model):
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    orderpad_line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_line_status_date'))
    orderpad_line_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('orderpad_line_status'))
    qty_in_order = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_order'))
    qty_in_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock'))
    item_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_name'))
    item_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_number'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_line'))
    orig_sys_ref_header = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    order_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_line_id'))
    qty_in_pad_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('qty_in_pad_cases'))
    case_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('case_quantity'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    orderpad_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('orderpad_line_id'), primary_key=True)
    orderpad_header_id = models.ForeignKey(ArOrderpadHeaders, models.DO_NOTHING, blank=True, null=True, to_field='orderpad_header_id', db_column='orderpad_header_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'ar_orderpad_lines'
        verbose_name = verbose_name_plural = VN_T('ar_orderpad_lines')

    def __str__(self):
        return str(self.orderpad_line_id)


class ArPaymentHeaders(models.Model):
    attribute6 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute6'))
    attribute5 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute5'))
    attribute4 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('attribute1'))
    payment_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_source'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    payment_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_status'))
    payment_currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('payment_currency_code'))
    batch_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('batch_name'))
    payment_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_type'))
    discount_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    balance_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('balance_total'))
    payment_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_total'))
    payment_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_status_date'))
    bank_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_id'))
    bank_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bank_account_id'))
    cashback_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cashback_total'))
    transaction_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_phase_code'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    discount_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('discount_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    notes2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes2'))
    cancelled_amount = models.IntegerField(blank=True, null=True, verbose_name=VN_C('cancelled_amount'))
    cancelled_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('cancelled_by'))
    cancelled_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('cancelled_date'))
    exchange_rate = models.DecimalField(max_digits=22, decimal_places=6,blank=True, null=True, verbose_name=VN_C('exchange_rate'))
    payment_user_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('payment_user_id'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    pmnt_method_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pmnt_method_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    notes1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('notes1'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    check_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('check_number'))
    payment_reference = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('payment_reference'))
    card_security_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_security_code'))
    card_approval_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_approval_date'))
    card_approval_code = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_approval_code'))
    card_expiration_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiration_date'))
    card_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_number'))
    card_holder_name = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_holder_name'))
    payment_card_types = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_card_types'))
    payment_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_date'))
    entry_method = models.CharField(max_length=30, blank=True, null=True, default='ONETOMANY', verbose_name=VN_C('entry_method'))
    additional_charges = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('additional_charges'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_header_id'), primary_key=True)
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    invoice_header_id = models.ForeignKey(ArInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_header_id', db_column='invoice_header_id')
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')

    class Meta:
        managed = False
        db_table = 'ar_payment_headers'
        verbose_name = verbose_name_plural = VN_T('ar_payment_headers')

    def __str__(self):
        return str(self.payment_header_id)


class ArPaymentLines(models.Model):
    card_approval_code = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_approval_code'))
    transaction_phase_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_phase_code'))
    discount_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_value'))
    discount_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('discount_type'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    gl_accounting_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('gl_accounting_date'))
    cashback_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('cashback_amount'))
    period_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('period_line_id'))
    period_name = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('period_name'))
    check_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('check_number'))
    payment_reference = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('payment_reference'))
    card_security_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('card_security_code'))
    actual_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('actual_payment_amount'))
    standard_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('standard_payment_amount'))
    additional_payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('additional_payment_amount'))
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    payment_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_line_status_date'))
    payment_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_line_status'))
    gl_account_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('gl_account_id'))
    description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('description'))
    card_expiration_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_expiration_date'))
    card_number = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_number'))
    card_holder_name = models.CharField(max_length=80, blank=True, null=True, verbose_name=VN_C('card_holder_name'))
    payment_card_types = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_card_types'))
    card_approval_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('card_approval_date'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    payment_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('payment_line_id'), primary_key=True)
    payment_trans_id = models.ForeignKey(CmnPaymentTrans, models.DO_NOTHING, blank=True, null=True, to_field='payment_trans_id', db_column='payment_trans_id')
    payment_header_id = models.ForeignKey(ArPaymentHeaders, models.DO_NOTHING, blank=True, null=True, to_field='payment_header_id', db_column='payment_header_id')
    pmnt_method_id = models.ForeignKey(CmnPaymentMethods,models.DO_NOTHING, blank=True,null=True,
                                       to_field='pmnt_method_id', db_column='pmnt_method_id', verbose_name=VN_C('payment_method'))
    payment_amount = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('payment_amount'))
    payment_line_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('payment_status_date'))
    payment_line_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('payment_status'))
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    invoice_header_id = models.ForeignKey(ArInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_header_id', db_column='invoice_header_id')

    class Meta:
        managed = False
        db_table = 'ar_payment_lines'
        verbose_name = verbose_name_plural = VN_T('ar_payment_lines')

    def __str__(self):
        return str(self.payment_line_id)
        # unique_together = (('arpaymentheaders','invoice_header_id','pmnt_method_id'),)


class ArSalesorderPicklist(models.Model):
    picklist_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('picklist_status_date'))
    picklist_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('picklist_status'))
    quantity = models.IntegerField(blank=True, null=True, verbose_name=VN_C('quantity'))
    comments = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('comments'))
    transaction_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_source'))
    invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_line_id'))
    invoice_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_header_id'))
    delivery_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('delivery_header_id'))
    delivery_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('delivery_line_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    picklist_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('picklist_id'), primary_key=True)
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                        to_field='sub_location_id', db_column='sub_location_id', verbose_name=VN_C('sub_location_id'))
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True,
                                    to_field='location_id', db_column='location_id', verbose_name=VN_C('location_id'))

    class Meta:
        managed = False
        db_table = 'ar_salesorder_picklist'
        verbose_name = verbose_name_plural = VN_T('ar_salesorder_picklist')

    def __str__(self):
        return str(self.picklist_id)


class ArSalesorderStatuses(models.Model):
    release = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('release'))
    hold = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('hold'))
    comments = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('comments'))
    reason_description = models.CharField(max_length=240, blank=True, null=True, verbose_name=VN_C('reason_description'))
    reason_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('reason_code_id'))
    transaction_source = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_source'))
    invoice_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_line_id'))
    invoice_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoice_header_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    release_comment = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('release_comment'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    status_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('status_id'), primary_key=True)
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')

    class Meta:
        managed = False
        db_table = 'ar_salesorder_statuses'
        verbose_name = verbose_name_plural = VN_T('ar_salesorder_statuses')

    def __str__(self):
        return str(self.status_id)


class CmnStylePatterns(models.Model):
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    stp_date_to = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('stp_date_to'))
    stp_date_from = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('stp_date_from'))
    stp_level6_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level6_code'))
    last_item_seq = models.IntegerField(blank=True, null=True, verbose_name=VN_C('last_item_seq'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    item_numbering_hint = models.CharField(max_length=30, blank=True, null=True, default='SYSTEM', verbose_name=VN_C('item_numbering_hint'))
    separator = models.CharField(max_length=1, blank=True, null=True, default='.', verbose_name=VN_C('separator'))
    start_item_seq = models.IntegerField(blank=True, null=True, verbose_name=VN_C('start_item_seq'))
    stp_level5_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level5_code'))
    stp_level4_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level4_code'))
    stp_level3_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level3_code'))
    stp_level2_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level2_code'))
    stp_level1_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('stp_level1_code'))
    stp_category_code = models.CharField(max_length=30, blank=True, null=True, default='GENERAL', verbose_name=VN_C('stp_category_code'))
    stp_type_code = models.CharField(max_length=30, blank=True, null=True, default='STYLE', verbose_name=VN_C('stp_type_code'))
    stp_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('stp_description'))
    stp_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('stp_name'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    picturelevel = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('picturelevel'))
    picturetype = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('picturetype'))
    picturename = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('picturename'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    stp_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('stp_id'), primary_key=True)
    supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='supplier_id')
    manf_id = models.ForeignKey(InvManufacturers, models.DO_NOTHING, blank=True, null=True, to_field='manf_id', db_column='manf_id')

    class Meta:
        managed = False
        db_table = 'cmn_style_patterns'
        verbose_name = verbose_name_plural = VN_T('cmn_style_patterns')

    def __str__(self):
        return str(self.stp_id)


class CmnStpAttributes(models.Model):
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    attribute_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('attribute_description'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    attribute_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('attribute_id'), primary_key=True)
    stp_id = models.ForeignKey(CmnStylePatterns, models.DO_NOTHING, blank=True, null=True, to_field='stp_id', db_column='stp_id')

    class Meta:
        managed = False
        db_table = 'cmn_stp_attributes'
        verbose_name = verbose_name_plural = VN_T('cmn_stp_attributes')

    def __str__(self):
        return str(self.attribute_id)
        # unique_together = (('cmnstylepatterns','attribute_code','attribute_value'),)


class CmnStpLevels(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    level_description = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('level_description'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    level_id_concated = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('level_id_concated'))
    parent_level_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('parent_level_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    level_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('level_id'), primary_key=True)
    stp_id = models.ForeignKey(CmnStylePatterns, models.DO_NOTHING, blank=True, null=True, to_field='stp_id', db_column='stp_id')

    class Meta:
        managed = False
        db_table = 'cmn_stp_levels'
        verbose_name = verbose_name_plural = VN_T('cmn_stp_levels')

    def __str__(self):
        return str(self.level_id)
        # unique_together = (('cmnstylepatterns','level_number','level_type','level_code'),)


class PoOrderpadHeaders(models.Model):
    orderpad_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('orderpad_description'))
    orderpad_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_date'))
    orderpad_category = models.CharField(max_length=30, blank=True, null=True, default='SALES', verbose_name=VN_C('orderpad_category'))
    orderpad_type = models.CharField(max_length=30, blank=True, null=True, default='SAELS', verbose_name=VN_C('orderpad_type'))
    orderpad_header_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('orderpad_header_status'))
    orderpad_header_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_header_status_date'))
    user_id = models.IntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('user_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    orig_sys_ref_header = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    invoiceto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_customer_id'))
    deliverto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_customer_id'))
    invoiceto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_contact_id'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    net_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    discount_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    tax_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_total'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    gross_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    orderpad_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('orderpad_header_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='supplier_id')

    class Meta:
        managed = False
        db_table = 'po_orderpad_headers'
        verbose_name = verbose_name_plural = VN_T('po_orderpad_headers')

    def __str__(self):
        return str(self.orderpad_header_id)


class PoOrderpadLines(models.Model):
    orig_sys_ref_line = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_line'))
    qty_received_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_units'))
    qty_received_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_cases'))
    qty_balance_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_balance_units'))
    qty_balance_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_balance_cases'))
    qty_cancelled_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_cancelled_units'))
    promised_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('promised_date'))
    net_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_price'))
    discount_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_price'))
    tax_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('tax_code_id'))
    tax_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    po_line_desc = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('po_line_desc'))
    po_line_notes = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('po_line_notes'))
    sup_product_code = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('sup_product_code'))
    net_ingredient = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_weight'))
    unit_volume = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    item_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_number'))
    item_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_name'))
    qty_in_stock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_stock'))
    qty_in_order = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_order'))
    orderpad_line_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('orderpad_line_status'))
    orderpad_line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('orderpad_line_status_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    case_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_size'))
    qty_in_pad_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_in_pad_cases'))
    po_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_line_id'))
    orig_sys_ref_header = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('orig_sys_ref_header'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    orderpad_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('orderpad_line_id'), primary_key=True)
    orderpad_header_id = models.ForeignKey(PoOrderpadHeaders, models.DO_NOTHING, blank=True, null=True, to_field='orderpad_header_id', db_column='orderpad_header_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')

    class Meta:
        managed = False
        db_table = 'po_orderpad_lines'
        verbose_name = verbose_name_plural = VN_T('po_orderpad_lines')

    def __str__(self):
        return str(self.orderpad_line_id)


class GrnOrderpadHeaders(models.Model):
    delivery_note_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('delivery_note_ref'))
    invoice_number = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('invoice_number'))
    delivery_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('delivery_date'))
    invoice_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('invoice_date'))
    grn_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('grn_date'))
    grn_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('grn_status'))
    grn_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('grn_status_date'))
    user_id = models.IntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('user_id'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    invoiceto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_customer_id'))
    deliverto_customer_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_customer_id'))
    invoiceto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('invoiceto_contact_id'))
    deliverto_contact_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('deliverto_contact_id'))
    net_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    discount_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    tax_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_total'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    gross_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    grn_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('grn_id'), primary_key=True)
    customer_id = models.ForeignKey(ArCustomers, models.DO_NOTHING, blank=True, null=True, to_field='customer_id', db_column='customer_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    orderpad_header_id = models.ForeignKey(PoOrderpadHeaders, models.DO_NOTHING, blank=True, null=True, to_field='orderpad_header_id', db_column='orderpad_header_id')
    supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='supplier_id')

    class Meta:
        managed = False
        db_table = 'grn_orderpad_headers'
        verbose_name = verbose_name_plural = VN_T('grn_orderpad_headers')

    def __str__(self):
        return str(self.grn_id)


class GrnOrderpadLines(models.Model):
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    item_number = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('item_number'))
    item_name = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_name'))
    grn_line_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('grn_line_status'))
    grn_line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('grn_line_status_date'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    case_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_size'))
    qty_received_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_units'))
    qty_received_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_cases'))
    net_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_price'))
    discount_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_price'))
    tax_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    tax_code_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('tax_code_id'))
    tax_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    net_ingredient = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_ingredient'))
    weight_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('weight_total'))
    volume_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('volume_total'))
    ingredient_total = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ingredient_total'))
    unit_weight = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, verbose_name=VN_C('unit_weight'))
    unit_volume = models.DecimalField(max_digits=9, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_volume'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    orderpad_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('orderpad_line_id'), primary_key=True)
    grn_id = models.ForeignKey(GrnOrderpadHeaders, models.DO_NOTHING, blank=True, null=True, to_field='grn_id', db_column='grn_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    orderpad_header_id = models.ForeignKey(PoOrderpadHeaders, models.DO_NOTHING, blank=True, null=True, to_field='orderpad_header_id', db_column='orderpad_header_id')
    orderpad_line_id = models.ForeignKey(PoOrderpadLines, models.DO_NOTHING, blank=True, null=True, to_field='orderpad_line_id', db_column='orderpad_line_id')

    class Meta:
        managed = False
        db_table = 'grn_orderpad_lines'
        verbose_name = verbose_name_plural = VN_T('grn_orderpad_lines')

    def __str__(self):
        return str(self.orderpad_line_id)


class InvBomTrans(models.Model):
    bom_action = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_action'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('description'))
    picklist = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('picklist'))
    bom_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('bom_quantity'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    bom_category = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_category'))
    bom_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('bom_type'))
    bom_level = models.IntegerField(blank=True, null=True, verbose_name=VN_C('bom_level'))
    bom_trans_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('bom_trans_status_date'))
    bom_trans_status = models.CharField(max_length=30, blank=True, null=True, default='CREATED', verbose_name=VN_C('bom_trans_status'))
    qty_userpicked_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('qty_userpicked_units'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    trans_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('trans_quantity'))
    comments = models.CharField(max_length=1000, blank=True, null=True, verbose_name=VN_C('comments'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    bom_trans_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('bom_trans_id'), primary_key=True)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, related_name='bomitems',
                                blank=True, null=True, to_field='item_id', db_column='item_id')
    level0_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING,  related_name='topitem',
                                       blank=True, null=True, to_field='item_id', db_column='level0_item_id')
    parent_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, related_name='parentbomitem',
                                       blank=True, null=True, to_field='item_id', db_column='parent_item_id')
    order_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_header_id'))
    # models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    order_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('order_line_id'))
    # models.ForeignKey(ArSalesorderLines, models.DO_NOTHING, blank=True, null=True, to_field='order_line_id', db_column='order_line_id')

    class Meta:
        managed = False
        db_table = 'inv_bom_trans'
        verbose_name = verbose_name_plural = VN_T('inv_bom_trans')

    def __str__(self):
        return str(self.bom_trans_id)
        # unique_together = (('transaction_source','transaction_header_id','transaction_line_id','invitemmasters'),)


class InvItemPoHistories(models.Model):
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    sup_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sup_id'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    item_list_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_list_price'))
    item_cost_price = models.DecimalField(max_digits=10, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('item_cost_price'))
    item_curr_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('item_curr_qty'))
    source_name = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('source_name'))
    stkpur_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('stkpur_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    iiph_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('iiph_id'), primary_key=True)
    iim_item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='iim_item_id')
    sup_supplier_id = models.ForeignKey(ApSuppliers, models.DO_NOTHING, blank=True, null=True, to_field='supplier_id', db_column='sup_supplier_id')

    class Meta:
        managed = False
        db_table = 'inv_item_po_histories'
        verbose_name = verbose_name_plural = VN_T('inv_item_po_histories')

    def __str__(self):
        return str(self.iiph_id)


class PalletHeaders(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    pallet_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pallet_volume'))
    pallet_height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pallet_height'))
    pallet_width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pallet_width'))
    pallet_length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pallet_length'))
    pallet_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('pallet_weight'))
    unit_desc = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('unit_desc'))
    no_of_units = models.IntegerField(blank=True, null=True, verbose_name=VN_C('no_of_units'))
    attribute4 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute4'))
    attribute3 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute3'))
    attribute2 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute2'))
    attribute1 = models.CharField(max_length=255, blank=True, null=True, verbose_name=VN_C('attribute1'))
    ext_ref_id3 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ext_ref_id3'))
    ext_ref_id2 = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('ext_ref_id2'))
    ext_ref_id1 = models.BigIntegerField(blank=True, null=True, verbose_name=VN_C('ext_ref_id1'))
    source_object_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_object_ref'))
    source_ref_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id2'))
    source_ref_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_ref_id1'))
    pallet_header_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pallet_header_status_date'))
    pallet_header_status = models.CharField(max_length=30, blank=True, null=True, default='OPEN', verbose_name=VN_C('pallet_header_status'))
    pallet_age = models.IntegerField(blank=True, null=True, default=0, verbose_name=VN_C('pallet_age'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    pallet_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('pallet_decription'))
    pallet_tag = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('pallet_tag'))
    pallet_destination = models.CharField(max_length=30, blank=True, null=True, default='INTERNAL', verbose_name=VN_C('pallet_destination'))
    pallet_source = models.CharField(max_length=30, blank=True, null=True, default='INTERNAL', verbose_name=VN_C('pallet_source'))
    pallet_type = models.CharField(max_length=30, blank=True, null=True, default='PALLET', verbose_name=VN_C('pallet_type'))
    pallet_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pallet_date'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    dispatched_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dispatched_on'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pallet_header_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pallet_header_id'), primary_key=True)
    current_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, related_name='palletcurrsublocatiom',
                                                blank=True, null=True, to_field='sub_location_id', db_column='current_sub_location_id')
    current_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='currentlocation',
                                            null=True, to_field='location_id', db_column='current_location_id')
    dispatch_id = models.ForeignKey(DispatchHeaders, models.DO_NOTHING, blank=True, null=True, to_field='dispatch_id', db_column='dispatch_id')
    grn_id = models.ForeignKey(PoGrnHeaders, models.DO_NOTHING, blank=True, null=True, to_field='grn_id', db_column='grn_id')
    invoice_header_id = models.ForeignKey(ArInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_header_id', db_column='invoice_header_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='location',
                                    null=True, to_field='location_id', db_column='location_id')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    pc_id = models.ForeignKey(CmnContainers, models.DO_NOTHING, blank=True, null=True, to_field='pc_id', db_column='pc_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, related_name='palletsublocation',
                                        blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')
    pallet_number = models.CharField(max_length=30, blank=False, null=False, unique=True,
                                     verbose_name=VN_C('pallet_number'))
    pallet_name = models.CharField(max_length=100, blank=False, null=False, unique=True,
                                     verbose_name=VN_C('pallet_name'))

    class Meta:
        managed = False
        db_table = 'pallet_headers'
        verbose_name = verbose_name_plural = VN_T('pallet_headers')

    def __str__(self):
        return self.pallet_number
        # unique_together = (('pallet_name'),('pallet_number'),)


class PalletBoxes(models.Model):
    box_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('box_date'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    box_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('box_status_date'))
    box_status = models.CharField(max_length=30, blank=True, null=True, default='OPEN', verbose_name=VN_C('box_status'))
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    box_volume = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('box_volume'))
    box_height = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('box_height'))
    box_width = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('box_width'))
    box_length = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('box_length'))
    box_weight = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('box_weight'))
    box_tag = models.CharField(max_length=50, blank=True, null=True, verbose_name=VN_C('box_tag'))
    source_ref_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id2'))
    source_ref_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_ref_id1'))
    source_object_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source_object_ref'))
    no_of_itens = models.IntegerField(blank=True, null=True, verbose_name=VN_C('no_of_itens'))
    active = models.CharField(max_length=1, blank=True, null=True, default='Y', choices=populatelistitem('YES_NO'), verbose_name=VN_C('active'))
    box_decription = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('box_decription'))
    box_type = models.CharField(max_length=30, blank=True, null=True, default='BOX', verbose_name=VN_C('box_type'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    box_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('box_id'), primary_key=True)
    grn_id = models.ForeignKey(PoGrnHeaders, models.DO_NOTHING, blank=True, null=True, to_field='grn_id', db_column='grn_id')
    invoice_header_id = models.ForeignKey(ArInvoiceHeaders, models.DO_NOTHING, blank=True, null=True, to_field='invoice_header_id', db_column='invoice_header_id')
    order_header_id = models.ForeignKey(ArSalesorderHeaders, models.DO_NOTHING, blank=True, null=True, to_field='order_header_id', db_column='order_header_id')
    pc_id = models.ForeignKey(CmnContainers, models.DO_NOTHING, blank=True, null=True, to_field='pc_id', db_column='pc_id')
    pallet_header_id = models.ForeignKey(PalletHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pallet_header_id', db_column='pallet_header_id')

    class Meta:
        managed = False
        db_table = 'pallet_boxes'
        verbose_name = verbose_name_plural = VN_T('pallet_boxes')

    def __str__(self):
        return str(self.box_id)
        # unique_together = (('box_name'),('box_number'),)


class PalletLines(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    pallet_line_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pallet_line_status_date'))
    source_ref_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id2'))
    source_ref_id1 = models.IntegerField(blank=True, null=True, verbose_name=VN_C('source_ref_id1'))
    source_object_ref = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('source_object_ref'))
    pallet_line_status = models.CharField(max_length=30, blank=True, null=True, default='OPEN', verbose_name=VN_C('pallet_line_status'))
    item_number = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_number'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('quantity'))
    item_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_description'))
    line_type = models.CharField(max_length=50, blank=True, null=True, default='ITEM', verbose_name=VN_C('line_type'))
    quantity_cases = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity_cases'))
    case_unit = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('case_unit'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pallet_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pallet_line_id'), primary_key=True)
    box_id = models.ForeignKey(PalletBoxes, models.DO_NOTHING, blank=True, null=True, to_field='box_id', db_column='box_id')
    pallet_header_id = models.ForeignKey(PalletHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pallet_header_id', db_column='pallet_header_id')
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True, to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'pallet_lines'
        verbose_name = verbose_name_plural = VN_T('pallet_lines')

    def __str__(self):
        return str(self.pallet_line_id)
        # unique_together = (('palletheaders','palletboxes','invsublocations','invitemmasters'),('palletboxes','sl_no'),)


class PalletTransactions(models.Model):
    record_status = models.CharField(max_length=10, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    update_source = models.CharField(max_length=30, blank=True, null=True, default='API', editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    bu_id = models.IntegerField(blank=True, null=True, default=1, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('created_by'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    pallet_trans_status_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, verbose_name=VN_C('pallet_trans_status_date'))
    pallet_trans_status = models.CharField(max_length=30, blank=True, null=True, default='NEW', verbose_name=VN_C('pallet_trans_status'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, default=1, verbose_name=VN_C('quantity'))
    item_description = models.CharField(max_length=400, blank=True, null=True, verbose_name=VN_C('item_description'))
    item_id = models.IntegerField(blank=True, null=True, default=-1, editable=False, verbose_name=VN_C('item_id'))
    transaction_type = models.CharField(max_length=50, blank=True, null=True, default='INTERNALTOINTERNAL', verbose_name=VN_C('transaction_type'))
    transaction_category = models.CharField(max_length=50, blank=True, null=True, default='MOVEMENT', verbose_name=VN_C('transaction_category'))
    sl_no = models.IntegerField(blank=True, null=True, default=1, verbose_name=VN_C('sl_no'))
    to_ext_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('to_ext_location'))
    from_ext_location = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('from_ext_location'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    pallet_trans_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('pallet_trans_id'), primary_key=True)
    box_id = models.ForeignKey(PalletBoxes, models.DO_NOTHING, blank=True, null=True, to_field='box_id', db_column='box_id')
    from_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='fromlocation',
                                         null=True, to_field='location_id', db_column='from_location_id')
    pallet_header_id = models.ForeignKey(PalletHeaders, models.DO_NOTHING, blank=True, null=True, to_field='pallet_header_id', db_column='pallet_header_id')
    pallet_line_id = models.ForeignKey(PalletLines, models.DO_NOTHING, blank=True, null=True, to_field='pallet_line_id', db_column='pallet_line_id')
    from_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, related_name='fromsublocation',
                                             null=True, to_field='sub_location_id', db_column='from_sub_location_id')
    to_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, related_name='tolocation' ,
                                       null=True, to_field='location_id', db_column='to_location_id')
    to_sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, related_name='tosublocation',
                                           null=True, to_field='sub_location_id', db_column='to_sub_location_id')

    class Meta:
        managed = False
        db_table = 'pallet_transactions'
        verbose_name = verbose_name_plural = VN_T('pallet_transactions')

    def __str__(self):
        return str(self.pallet_trans_id)


class InvItemLocations(models.Model):
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    average_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('average_unitcp'))
    last_bought_unitcp = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_bought_unitcp'))
    annual_stktake_batch = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('annual_stktake_batch'))
    annual_stktake_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('annual_stktake_date'))
    initial_stktake_batch = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('initial_stktake_batch'))
    initial_stktake_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('initial_stktake_date'))
    opening_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('opening_balance'))
    closing_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('closing_balance'))
    qty_reserved = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved'))
    qty_sold = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_sold'))
    last_adjust_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_adjust_date'))
    last_sold_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_sold_date'))
    last_bought_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_bought_date'))
    qty_returned_to_supplier = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_returned_to_supplier'))
    qty_returned_from_customer = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_returned_from_customer'))
    qty_adjusted = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_adjusted'))
    qty_goodsin = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_goodsin'))
    qty_resrved = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_resrved'))
    qty_allocated = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_allocated'))
    qty_inorder = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_inorder'))
    last_po_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_po_qty'))
    last_sold_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_sold_qty'))
    qty_reserved_grn = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_grn'))
    qty_reserved_po = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_po'))
    qty_reserved_balance = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_balance'))
    qty_reserved_fulfilled = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_fulfilled'))
    qty_reserved_invoiced = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_reserved_invoiced'))
    last_po_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('last_po_date'))
    last_grn_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('last_grn_qty'))
    default_sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('default_sub_location_id'))
    qty_rqstion = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_rqstion'))
    qty_rqstion_transit = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_rqstion_transit'))
    class_code_value = models.CharField(max_length=5, blank=True, null=True, verbose_name=VN_C('class_code_value'))
    class_code_quantity = models.CharField(max_length=5, blank=True, null=True, verbose_name=VN_C('class_code_quantity'))
    class_code_picking = models.CharField(max_length=5, blank=True, null=True, verbose_name=VN_C('class_code_picking'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, primary_key=True, blank=True, null=True, to_field='item_id',
                                db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id',
                                    db_column='location_id')

    class Meta:
        managed = False
        db_table = 'inv_item_locations'
        verbose_name = verbose_name_plural = VN_T('inv_item_locations')
        unique_together = (('location_id','item_id'),)

    def __str__(self):
        return str(self.location_id.location_id) + ' : '+str(self.item_id)


class InvItemSubLocations(models.Model):
    minus_quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('minus_quantity'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    max_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('max_qty'))
    min_qty = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('min_qty'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    quantity = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('quantity'))
    pallet_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('pallet_header_id'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, primary_key=True,blank=True, null=True, to_field='item_id',
                                db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id',
                                    db_column='location_id')
    sub_location_id = models.ForeignKey(InvSubLocations, models.DO_NOTHING, blank=True, null=True,
                                        to_field='sub_location_id', db_column='sub_location_id')

    class Meta:
        managed = False
        db_table = 'inv_item_sub_locations'
        verbose_name = verbose_name_plural = VN_T('inv_item_sub_locations')
        unique_together = (('item_id','sub_location_id','location_id'),)

    def __str__(self):
        return self.location_id +' : '+ self.sub_location_id +  ':' + self.self.item_id


class InvItemSummarieses(models.Model):
    week4_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week4_qty'))
    week3_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week3_qty'))
    week2_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week2_qty'))
    week1_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week1_qty'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    ord_outstand_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ord_outstand_qty'))
    ord_last_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('ord_last_qty'))
    tot_ord_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_ord_value'))
    tot_bought_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_bought_value'))
    tot_sold_value = models.DecimalField(max_digits=22, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_sold_value'))
    tot_ord_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_ord_qty'))
    tot_bought_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_bought_qty'))
    tot_sold_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_sold_qty'))
    tot_alloc_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_alloc_qty'))
    tot_req_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('tot_req_qty'))
    item_qty_asof = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('item_qty_asof'))
    item_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, default=0, verbose_name=VN_C('item_qty'))
    sold_last_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('sold_last_on'))
    sold_last_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('sold_last_qty'))
    bought_last_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('bought_last_from'))
    bought_last_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('bought_last_on'))
    bought_last_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('bought_last_qty'))
    ord_last_from = models.IntegerField(blank=True, null=True, verbose_name=VN_C('ord_last_from'))
    ord_last_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('ord_last_on'))
    record_status = models.CharField(max_length=1, blank=True, null=True, default='I', editable=False, verbose_name=VN_C('record_status'))
    unalloc_reason = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('unalloc_reason'))
    last_updated_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    unalloc_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unalloc_qty'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    alloc_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('alloc_on'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    alloc_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('alloc_qty'))
    created_by = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    requested_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('requested_on'))
    bu_id = models.CharField(max_length=3, blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    requested_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('requested_qty'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    sold_last_to = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sold_last_to'))
    year6_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year6_value'))
    year5_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year5_value'))
    year4_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year4_value'))
    year3_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year3_value'))
    year2_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year2_value'))
    year1_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year1_value'))
    year6_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year6_qty'))
    year5_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year5_qty'))
    year4_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year4_qty'))
    year3_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year3_qty'))
    year2_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year2_qty'))
    year1_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('year1_qty'))
    month12_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month12_value'))
    month11_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month11_value'))
    month10_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month10_value'))
    month9_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month9_value'))
    month8_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month8_value'))
    month7_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month7_value'))
    month6_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month6_value'))
    month5_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month5_value'))
    month4_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month4_value'))
    month3_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month3_value'))
    month2_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month2_value'))
    month1_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month1_value'))
    month12_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month12_qty'))
    month11_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month11_qty'))
    month10_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month10_qty'))
    month9_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month9_qty'))
    month8_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month8_qty'))
    month7_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month7_qty'))
    month6_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month6_qty'))
    month5_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month5_qty'))
    month4_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month4_qty'))
    month3_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month3_qty'))
    month2_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month2_qty'))
    month1_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('month1_qty'))
    day7_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day7_value'))
    day6_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day6_value'))
    day5_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day5_value'))
    day4_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day4_value'))
    day3_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day3_value'))
    day2_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day2_value'))
    day1_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day1_value'))
    day7_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day7_qty'))
    day6_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day6_qty'))
    day5_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day5_qty'))
    day4_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day4_qty'))
    day3_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day3_qty'))
    day2_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day2_qty'))
    day1_qty = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('day1_qty'))
    week4_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week4_value'))
    week3_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week3_value'))
    week2_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week2_value'))
    week1_value = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('week1_value'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)

    class Meta:
        managed = False
        db_table = 'inv_item_summarieses'
        verbose_name = verbose_name_plural = VN_T('inv_item_summarieses')

    def __str__(self):
        return str(self.item_id)

def getmodelrow(p_model = models.Model,p_colname:str ="", p_string:str = "", p_number:int = 0, records:int = 0):
    rec = None
    searchstring = ""
    if not p_model:
        return rec
    if not commonutil.hasstrvalue(p_colname):
        return rec
    if commonutil.hasintvalue(p_number):
        searchstring = "{0}".format(p_colname)
        rec = p_model.objects.filter( **{searchstring: p_number})
    if commonutil.hasintvalue(p_string):
        searchstring = "{0}__exact".format(p_colname)
        rec = p_model.objects.filter(**{searchstring: p_string})
    if rec:
        if records > 0:
            rec = rec[records-1] # index started from zero
    return rec

class AuditItempriceHistory(models.Model):
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    bu_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    item_id = models.ForeignKey(InvItemMasters, models.DO_NOTHING, blank=True, null=True, to_field='item_id', db_column='item_id')
    location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=True, null=True, to_field='location_id', db_column='location_id')
    changed_by  = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('changed_by'))
    change_category = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                       verbose_name=VN_C('change_category'))
    change_reason = models.CharField(max_length=200, blank=True, null=True, editable=False,
                                     verbose_name=VN_C('change_reason'))
    change_type = models.CharField(max_length=30, blank=True, null=True, editable=False,
                                   verbose_name=VN_C('change_type'))
    customer_id  = models.BigIntegerField(blank=True, null=True, editable=False,
                                          verbose_name=VN_C('customer_id'))
    itemprice_history_id  = models.BigIntegerField(primary_key=True, blank=True, null=True,
                                                   editable=False, verbose_name=VN_C('history_id'))
    new_averageprice  = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True,
                                            verbose_name=VN_C('new_average_price'))
    new_price  = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True,
                                     verbose_name=VN_C('new_price'))
    old_averageprice  = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True,
                                            verbose_name=VN_C('old_average_price'))
    old_price  = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True,
                                     verbose_name=VN_C('old_price'))
    qty_instock  = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True,
                                       verbose_name=VN_C('qty_instock'))
    source_header_id   = models.BigIntegerField(blank=True, null=True, editable=False,
                                                verbose_name=VN_C('source_header_id'))
    source_line_id  = models.BigIntegerField(blank=True, null=True, editable=False,
                                             verbose_name=VN_C('source_line_id'))
    source_object_name  = models.BigIntegerField(blank=True, null=True, editable=False,
                                                 verbose_name=VN_C('source_object_name'))
    sub_location_id  = models.BigIntegerField(blank=True, null=True, editable=False,
                                              verbose_name=VN_C('sub_location_id'))
    supplier_id  = models.BigIntegerField(blank=True, null=True, editable=False,
                                          verbose_name=VN_C('supplier_id'))
    transaction_source =  models.CharField(max_length=30, blank=True, null=True, editable=False,
                                           verbose_name=VN_C('transaction_source'))
    class Meta:
        managed = False
        db_table = 'audit_itemprice_history'
        verbose_name = verbose_name_plural = VN_T('audit_itemprice_history')

    def __str__(self):
        return str(self.itemprice_history_id)


class ApDbnoteHeaders(models.Model):
    currency_code = models.CharField(max_length=10, blank=True, null=True, verbose_name=VN_C('currency_code'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    sourced_from = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sourced_from'))
    source_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_type'))
    transaction_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('transaction_type'))
    comments = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('comments'))
    net_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_total'))
    vat_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('vat_total'))
    discount_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_total'))
    gross_total = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('gross_total'))
    source_object = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_object'))
    dbnote_reference = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dbnote_reference'))
    dbnote_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dbnote_status'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    dbnote_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dbnote_date'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    dbnote_settled = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('dbnote_settled'))
    dbnote_settled_on = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dbnote_settled_on'))
    dbnote_source_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('dbnote_source_id'))
    dbnote_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dbnote_status_date'))
    dbnote_status_by = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dbnote_status_by'))
    dbnote_settled_by = models.IntegerField( blank=True, null=True, verbose_name=VN_C('dbnote_settled_by'))
    delivery_note_ref = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('delivery_note_ref'))
    delivery_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('delivery_date'))
    billto_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('billto_location_id'))
    adjust_stock = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('adjust_stock'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    dbnote_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('dbnote_id'), primary_key=True)
    dbnote_number = models.CharField(max_length=30, blank=False, null=False, unique=True,
                                     verbose_name=VN_C('debit_note_number'))
    sup_supplier_id = models.ForeignKey(ApSuppliers,models.DO_NOTHING, blank=False, null=False,
                                        to_field='supplier_id', db_column='sup_supplier_id',
                                        editable=True, verbose_name=VN_C('supplier_id'))
    shipto_location_id = models.ForeignKey(InvLocations, models.DO_NOTHING, blank=False, null=False,
                                           to_field='location_id',db_column='shipto_location_id',
                                             verbose_name=VN_C('shipto_location_id'))

    class Meta:
        managed = False
        db_table = 'ap_dbnote_headers'
        verbose_name = verbose_name_plural = VN_T('ap_dbnote_headers')

    def __str__(self):
        return self.dbnote_number

    @property
    def supplier_name(self):
        return ApSuppliers.objects.get(supplier_id=self.sup_supplier_id)

    def _get_settledby(self):
        return self.dbnote_settled_by

    @property
    def settled(self):
        return CmnUsers.objects.get(user_id=self.dbnote_settled_by)

class ApDbnoteLines(models.Model):
    gl_account_code = models.IntegerField(blank=True, null=True, verbose_name=VN_C('gl_account_code'))
    exchange_rate = models.DecimalField(max_digits=12, decimal_places=6,blank=True, null=True, default=1, verbose_name=VN_C('exchange_rate'))
    sub_location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('sub_location_id'))
    record_status = models.CharField(max_length=1, blank=True, null=True, editable=False, verbose_name=VN_C('record_status'))
    item_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('item_id'))
    item_name = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('item_name'))
    creation_date = models.DateTimeField(auto_now_add=True, blank=True, null=True, editable=False, verbose_name=VN_C('creation_date'))
    created_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('created_by'))
    bu_id = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('bu_id'))
    source_ref_id1 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id1'))
    source_ref_id2 = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('source_ref_id2'))
    qty_dbnote_units = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_dbnote_units'))
    unit_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('unit_cp'))
    case_cp = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_cp'))
    case_size = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('case_size'))
    net_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('net_price'))
    tax_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_price'))
    discount_price = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('discount_price'))
    last_update_date = models.DateTimeField(auto_now=True, blank=True, null=True, editable=False, verbose_name=VN_C('last_update_date'))
    invoiced_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('invoiced_price'))
    dbnote_status_date = models.DateTimeField(blank=True, null=True, verbose_name=VN_C('dbnote_status_date'))
    dbnote_line_desc = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('dbnote_line_desc'))
    sup_product_code = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('sup_product_code'))
    qty_instock = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_instock'))
    dbnote_status = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('dbnote_status'))
    detail_comments = models.CharField(max_length=100, blank=True, null=True, verbose_name=VN_C('detail_comments'))
    dbnote_add_reduce = models.CharField(max_length=1, blank=True, null=True, verbose_name=VN_C('dbnote_add_reduce'))
    tax_rate = models.DecimalField(max_digits=14, decimal_places=3,blank=True, null=True, verbose_name=VN_C('tax_rate'))
    delete_flag = models.CharField(max_length=1, blank=True, null=True, default='N', editable=False, verbose_name=VN_C('delete_flag'))
    attribute1 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute1'))
    attribute2 = models.CharField(max_length=2000, blank=True, null=True, verbose_name=VN_C('attribute2'))
    update_source = models.CharField(max_length=30, blank=True, null=True, editable=False, verbose_name=VN_C('update_source'))
    qty_ordered_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_ordered_units'))
    qty_delivered_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_delivered_units'))
    qty_received_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_received_units'))
    qty_invoiced_units = models.DecimalField(max_digits=13, decimal_places=3,blank=True, null=True, verbose_name=VN_C('qty_invoiced_units'))
    receipt_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('receipt_price'))
    po_header_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_header_id'))
    po_line_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('po_line_id'))
    sl_no = models.IntegerField(blank=True, null=True, verbose_name=VN_C('sl_no'))
    line_type = models.CharField(max_length=30, blank=True, null=True, verbose_name=VN_C('line_type'))
    last_updated_by = models.BigIntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('last_updated_by'))
    dbnote_reason = models.CharField(max_length=20, blank=True, null=True, verbose_name=VN_C('dbnote_reason'))
    order_price = models.DecimalField(max_digits=12, decimal_places=3,blank=True, null=True, verbose_name=VN_C('order_price'))
    location_id = models.IntegerField(blank=True, null=True, editable=False, verbose_name=VN_C('location_id'))
    adjust_stock = models.CharField(max_length=1, blank=True, null=True, default='N', verbose_name=VN_C('adjust_stock'))
    #tenant_id = models.IntegerField(blank=False, null=False,default=-1)
    dbnote_line_id = models.BigIntegerField(blank=False, null=False, editable=False, verbose_name=VN_C('dbnote_id'), primary_key=True)
    tax_code_id = models.ForeignKey(CmnTaxCodes, models.DO_NOTHING, blank=True, null=True, to_field='tax_code_id', db_column='tax_code_id')
    dbnote_id = models.ForeignKey(ApDbnoteHeaders,models.DO_NOTHING,blank=False, null=False, editable=False,
                                  to_field='dbnote_id', db_column='dbnote_id',
                                  verbose_name=VN_C('dbnote_id'),
                                )

    class Meta:
        managed = False
        db_table = 'ap_dbnote_lines'
        verbose_name = verbose_name_plural = VN_T('ap_dbnote_lines')

    def __str__(self):
        return str(self.dbnote_line_id)
